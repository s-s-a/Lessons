[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ExifTags",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "imagehash",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imagehash",
        "description": "imagehash",
        "detail": "imagehash",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PySide6.QtQml",
        "description": "PySide6.QtQml",
        "isExtraImport": true,
        "detail": "PySide6.QtQml",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QBasicTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QBasicTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "PyEmbeddedImage",
        "importPath": "wx.lib.embeddedimage",
        "description": "wx.lib.embeddedimage",
        "isExtraImport": true,
        "detail": "wx.lib.embeddedimage",
        "documentation": {}
    },
    {
        "label": "PySide6.QtWidgets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDesktopWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolTip",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDesktopWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "qApp",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "qApp",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLCDNumber",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QInputDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QColorDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFontDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCalendarWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplitter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleFactory",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QtQuickWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWebEngineWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "exif",
        "description": "exif",
        "isExtraImport": true,
        "detail": "exif",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "exif",
        "description": "exif",
        "isExtraImport": true,
        "detail": "exif",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "exif",
        "description": "exif",
        "isExtraImport": true,
        "detail": "exif",
        "documentation": {}
    },
    {
        "label": "reverse_geocoder",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "reverse_geocoder",
        "description": "reverse_geocoder",
        "detail": "reverse_geocoder",
        "documentation": {}
    },
    {
        "label": "pycountry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycountry",
        "description": "pycountry",
        "detail": "pycountry",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "MessageBoxConstants",
        "description": "MessageBoxConstants",
        "isExtraImport": true,
        "detail": "MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "YES_NO",
        "importPath": "MessageBoxConstants",
        "description": "MessageBoxConstants",
        "isExtraImport": true,
        "detail": "MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "SECONDBUTTON",
        "importPath": "MessageBoxConstants",
        "description": "MessageBoxConstants",
        "isExtraImport": true,
        "detail": "MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_YES",
        "importPath": "MessageBoxConstants",
        "description": "MessageBoxConstants",
        "isExtraImport": true,
        "detail": "MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "pyodbc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyodbc",
        "description": "pyodbc",
        "detail": "pyodbc",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "MessageBox",
        "description": "MessageBox",
        "isExtraImport": true,
        "detail": "MessageBox",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "wx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wx",
        "description": "wx",
        "detail": "wx",
        "documentation": {}
    },
    {
        "label": "wx.html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wx.html",
        "description": "wx.html",
        "detail": "wx.html",
        "documentation": {}
    },
    {
        "label": "HtmlEasyPrinting",
        "importPath": "wx.html",
        "description": "wx.html",
        "isExtraImport": true,
        "detail": "wx.html",
        "documentation": {}
    },
    {
        "label": "HtmlWindow",
        "importPath": "wx.html",
        "description": "wx.html",
        "isExtraImport": true,
        "detail": "wx.html",
        "documentation": {}
    },
    {
        "label": "apply_ico",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "apply_ico",
        "description": "apply_ico",
        "detail": "apply_ico",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "wx.adv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wx.adv",
        "description": "wx.adv",
        "detail": "wx.adv",
        "documentation": {}
    },
    {
        "label": "wordwrap",
        "importPath": "wx.lib.wordwrap",
        "description": "wx.lib.wordwrap",
        "isExtraImport": true,
        "detail": "wx.lib.wordwrap",
        "documentation": {}
    },
    {
        "label": "wordwrap",
        "importPath": "wx.lib.wordwrap",
        "description": "wx.lib.wordwrap",
        "isExtraImport": true,
        "detail": "wx.lib.wordwrap",
        "documentation": {}
    },
    {
        "label": "pub",
        "importPath": "wx.lib.pypubsub",
        "description": "wx.lib.pypubsub",
        "isExtraImport": true,
        "detail": "wx.lib.pypubsub",
        "documentation": {}
    },
    {
        "label": "configobj",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configobj",
        "description": "configobj",
        "detail": "configobj",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "check_time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "check_time",
        "description": "check_time",
        "detail": "check_time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "check_time",
        "description": "check_time",
        "isExtraImport": true,
        "detail": "check_time",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "readline",
        "description": "readline",
        "detail": "readline",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "W",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "E",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Toplevel",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "NO",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "W",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "E",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Toplevel",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "NO",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "SUNKEN",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "LEFT",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "TOP",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "BOTH",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Scrollbar",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "NSEW",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Entry",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "BOTH",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "NSEW",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "DateEntry",
        "importPath": "tkcalendar",
        "description": "tkcalendar",
        "isExtraImport": true,
        "detail": "tkcalendar",
        "documentation": {}
    },
    {
        "label": "DateEntry",
        "importPath": "tkcalendar",
        "description": "tkcalendar",
        "isExtraImport": true,
        "detail": "tkcalendar",
        "documentation": {}
    },
    {
        "label": "customtkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customtkinter",
        "description": "customtkinter",
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "customtkinter",
        "description": "customtkinter",
        "isExtraImport": true,
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "CTkMessagebox",
        "importPath": "CTkMessagebox",
        "description": "CTkMessagebox",
        "isExtraImport": true,
        "detail": "CTkMessagebox",
        "documentation": {}
    },
    {
        "label": "dearpygui.dearpygui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dearpygui.dearpygui",
        "description": "dearpygui.dearpygui",
        "detail": "dearpygui.dearpygui",
        "documentation": {}
    },
    {
        "label": "dearpygui.demo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dearpygui.demo",
        "description": "dearpygui.demo",
        "detail": "dearpygui.demo",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "niquests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "niquests",
        "description": "niquests",
        "detail": "niquests",
        "documentation": {}
    },
    {
        "label": "xmltodict",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xmltodict",
        "description": "xmltodict",
        "detail": "xmltodict",
        "documentation": {}
    },
    {
        "label": "yadisk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yadisk",
        "description": "yadisk",
        "detail": "yadisk",
        "documentation": {}
    },
    {
        "label": "cfg_token",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cfg_token",
        "description": "cfg_token",
        "detail": "cfg_token",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "aiogram",
        "description": "aiogram",
        "isExtraImport": true,
        "detail": "aiogram",
        "documentation": {}
    },
    {
        "label": "Dispatcher",
        "importPath": "aiogram.dispatcher",
        "description": "aiogram.dispatcher",
        "isExtraImport": true,
        "detail": "aiogram.dispatcher",
        "documentation": {}
    },
    {
        "label": "executor",
        "importPath": "aiogram.utils",
        "description": "aiogram.utils",
        "isExtraImport": true,
        "detail": "aiogram.utils",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide",
        "description": "PySide",
        "isExtraImport": true,
        "detail": "PySide",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "TkinterMapView",
        "importPath": "tkintermapview",
        "description": "tkintermapview",
        "isExtraImport": true,
        "detail": "tkintermapview",
        "documentation": {}
    },
    {
        "label": "flet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flet",
        "description": "flet",
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "AlertDialog",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "TextField",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "TextButton",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "LinearGradient",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "alignment",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "border_radius",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "padding",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "UserControl",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "IconButton",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "margin",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "icons",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "border",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Card",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "transform",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "animation",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Icon",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "SnackBar",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Checkbox",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Scale",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "#   flet",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "UserControl",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "animation",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "border",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "alignment",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "Card",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "transform",
        "importPath": "flet",
        "description": "flet",
        "isExtraImport": true,
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "ftplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ftplib",
        "description": "ftplib",
        "detail": "ftplib",
        "documentation": {}
    },
    {
        "label": "rlcompleter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rlcompleter",
        "description": "rlcompleter",
        "detail": "rlcompleter",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "NW",
        "importPath": "tkinter.constants",
        "description": "tkinter.constants",
        "isExtraImport": true,
        "detail": "tkinter.constants",
        "documentation": {}
    },
    {
        "label": "LEFT",
        "importPath": "tkinter.constants",
        "description": "tkinter.constants",
        "isExtraImport": true,
        "detail": "tkinter.constants",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "ffmpeg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ffmpeg",
        "description": "ffmpeg",
        "detail": "ffmpeg",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "aiogram.filters.command",
        "description": "aiogram.filters.command",
        "isExtraImport": true,
        "detail": "aiogram.filters.command",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "niquests.exceptions",
        "description": "niquests.exceptions",
        "isExtraImport": true,
        "detail": "niquests.exceptions",
        "documentation": {}
    },
    {
        "label": "Timeout",
        "importPath": "niquests.exceptions",
        "description": "niquests.exceptions",
        "isExtraImport": true,
        "detail": "niquests.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestException",
        "importPath": "niquests.exceptions",
        "description": "niquests.exceptions",
        "isExtraImport": true,
        "detail": "niquests.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "niquests.auth",
        "description": "niquests.auth",
        "isExtraImport": true,
        "detail": "niquests.auth",
        "documentation": {}
    },
    {
        "label": "scrapy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scrapy",
        "description": "scrapy",
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "CrawlerProcess",
        "importPath": "scrapy.crawler",
        "description": "scrapy.crawler",
        "isExtraImport": true,
        "detail": "scrapy.crawler",
        "documentation": {}
    },
    {
        "label": "get_project_settings",
        "importPath": "scrapy.utils.project",
        "description": "scrapy.utils.project",
        "isExtraImport": true,
        "detail": "scrapy.utils.project",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Tree",
        "importPath": "rich.tree",
        "description": "rich.tree",
        "isExtraImport": true,
        "detail": "rich.tree",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWebEngineWidgets",
        "description": "PySide6.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PySide6.QtWebEngineWidgets",
        "description": "PySide6.QtWebEngineWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWebEngineWidgets",
        "documentation": {}
    },
    {
        "label": "win32api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32api",
        "description": "win32api",
        "detail": "win32api",
        "documentation": {}
    },
    {
        "label": "win32con",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32con",
        "description": "win32con",
        "detail": "win32con",
        "documentation": {}
    },
    {
        "label": "win32net",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32net",
        "description": "win32net",
        "detail": "win32net",
        "documentation": {}
    },
    {
        "label": "win32netcon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32netcon",
        "description": "win32netcon",
        "detail": "win32netcon",
        "documentation": {}
    },
    {
        "label": "win32com.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32com.client",
        "description": "win32com.client",
        "detail": "win32com.client",
        "documentation": {}
    },
    {
        "label": "Dispatch",
        "importPath": "win32com.client",
        "description": "win32com.client",
        "isExtraImport": true,
        "detail": "win32com.client",
        "documentation": {}
    },
    {
        "label": "wmi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wmi",
        "description": "wmi",
        "detail": "wmi",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "whois",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whois",
        "description": "whois",
        "detail": "whois",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schedule",
        "description": "schedule",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "notification",
        "importPath": "plyer",
        "description": "plyer",
        "isExtraImport": true,
        "detail": "plyer",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'lessons-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'lessons-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'lessons-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'lessons-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'lessons-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "find_similar_images",
        "kind": 2,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "def find_similar_images(userpaths, hashfunc=imagehash.average_hash):\n\tdef is_image(filename):\n\t\tf = filename.lower()\n\t\treturn f.endswith('.png') or f.endswith('.jpg') or \\\n\t\t\tf.endswith('.jpeg') or f.endswith('.bmp') or \\\n\t\t\tf.endswith('.gif') or '.jpg' in f or f.endswith('.svg')\n\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\tf = filename.lower()\n\t\treturn f.endswith('.png') or f.endswith('.jpg') or \\\n\t\t\tf.endswith('.jpeg') or f.endswith('.bmp') or \\\n\t\t\tf.endswith('.gif') or '.jpg' in f or f.endswith('.svg')\n\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\timage_filenames",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:\n\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\timages",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:\n\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue\n\t\tif hash in images:\n\t\t\tprint(img, '  already exists as', ' '.join(images[hash]))\n\t\t\tif 'dupPictures' in img:",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\t\thash",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue\n\t\tif hash in images:\n\t\t\tprint(img, '  already exists as', ' '.join(images[hash]))\n\t\t\tif 'dupPictures' in img:\n\t\t\t\tprint('rm -v', img)\n\t\timages[hash] = images.get(hash, []) + [img]\n\t# for k, img_list in six.iteritems(images):",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\timages[hash]",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\timages[hash] = images.get(hash, []) + [img]\n\t# for k, img_list in six.iteritems(images):\n\t# \tif len(img_list) > 1:\n\t# \t\tprint(\" \".join(img_list))\nif __name__ == '__main__':  # noqa: C901\n\timport os\n\timport sys\n\tdef usage():\n\t\tsys.stderr.write(\"\"\"SYNOPSIS: %s [ahash|phash|dhash|...] [<directory>]\nIdentifies similar images in the directory.",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\thashmethod",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\thashmethod = sys.argv[1] if len(sys.argv) > 1 else usage()\n\tif hashmethod == 'ahash':\n\t\thashfunc = imagehash.average_hash\n\telif hashmethod == 'phash':\n\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.average_hash\n\telif hashmethod == 'phash':\n\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()\n\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()\n\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\tuserpaths",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.jp",
        "description": ".venv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": ".venv.Scripts.jp",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "Backend",
        "kind": 6,
        "importPath": "000000.PiSide6andQML.main",
        "description": "000000.PiSide6andQML.main",
        "peekOfCode": "class Backend(QObject):\n    updated = Signal(str, arguments=['time'])\n    def __init__(self):\n        super().__init__()\n        # Define timer.\n        self.timer = QTimer()\n        self.timer.setInterval(100)  # msecs 100 = 1/10th sec\n        self.timer.timeout.connect(self.update_time)\n        self.timer.start()\n    def update_time(self):",
        "detail": "000000.PiSide6andQML.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.PiSide6andQML.main",
        "description": "000000.PiSide6andQML.main",
        "peekOfCode": "app = QGuiApplication(sys.argv)\nengine = QQmlApplicationEngine()\nengine.quit.connect(app.quit)\nengine.load(r'000000\\PiSide6andQML\\main.qml')\nclass Backend(QObject):\n    updated = Signal(str, arguments=['time'])\n    def __init__(self):\n        super().__init__()\n        # Define timer.\n        self.timer = QTimer()",
        "detail": "000000.PiSide6andQML.main",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "000000.PiSide6andQML.main",
        "description": "000000.PiSide6andQML.main",
        "peekOfCode": "engine = QQmlApplicationEngine()\nengine.quit.connect(app.quit)\nengine.load(r'000000\\PiSide6andQML\\main.qml')\nclass Backend(QObject):\n    updated = Signal(str, arguments=['time'])\n    def __init__(self):\n        super().__init__()\n        # Define timer.\n        self.timer = QTimer()\n        self.timer.setInterval(100)  # msecs 100 = 1/10th sec",
        "detail": "000000.PiSide6andQML.main",
        "documentation": {}
    },
    {
        "label": "backend",
        "kind": 5,
        "importPath": "000000.PiSide6andQML.main",
        "description": "000000.PiSide6andQML.main",
        "peekOfCode": "backend = Backend()\nengine.rootObjects()[0].setProperty('backend', backend)\n# Initial call to trigger first update. Must be after the setProperty to connect signals.\nbackend.update_time()\nsys.exit(app.exec())",
        "detail": "000000.PiSide6andQML.main",
        "documentation": {}
    },
    {
        "label": "apply",
        "kind": 5,
        "importPath": "000000.apply_ico",
        "description": "000000.apply_ico",
        "peekOfCode": "apply = PyEmbeddedImage(\n    b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAB05J'\n    b'REFUWIXFl1tsXEcZx38zc87Z9fru2HEcO/cmacOSFoc0TZOURAq4bSiBqgKkij7AQ6VCERKv'\n    b'CIlHQLwRLg9FSC0FtYCa0Cq0hVIVQZqoiZpmQ+zETmrHjdu49saX9e7ZMzMfD7t2kq7TRlzU'\n    b'OVrNWc053/8y35z5Rilt+Dib/ljRgeBmH5Qu10OWLaygj5BeDFkC6gGwFHDkSDjBRV4kx3E1'\n    b'ZkZvJq76qCmQ5a6O9XyVLI/RSva21RvTm7tup6e5h9ZMKwD5uTznJy9wdvwMp4f7S0yS4xQ/'\n    b'4xy/U5dM8T8iIN5p9nMX6/jV0u6OjZ+/cx993fexNN2BiCDINVFAodBoLseXefGdP/P8sed5'\n    b'b3R8gCG+zkFeV9r4xXCMUjdIg/3yMGs5cPf2bese3f4oe5btITAGKxYrFlf9+WpvxZJIQqQj'\n    b'Ptm6mVu7b2W2brp9pDC6l07G1YB+66YIVJTLw6nN0ZP7dt/b8u3e79AUNhJLjPMeT4L1FUAv'\n    b'FiseKwleLIlYHJZYElqjZu5ZsZti82zLcDL8YNKSDHFGckpp+VACfEG2q3Uc2L1zV8uXN3wF'",
        "detail": "000000.apply_ico",
        "documentation": {}
    },
    {
        "label": "R_0",
        "kind": 5,
        "importPath": "000000.C4",
        "description": "000000.C4",
        "peekOfCode": "R_0 = R_1 = R_2_1 = R_2_2 = -2000\n# Переменные, в которых мы будем хранить числа\nN = int(input())\n# Не будем проверять входные данные на корректность\n# В ЕГЭ (но не в реальной жизни!) это не нужно\nfor i in range(N):\n    num = int(input())\n    if num % 3 == 0:\n        R_0 = max(R_0, num)\n        # Перезаписываем число на большее, если возможно",
        "detail": "000000.C4",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "000000.C4",
        "description": "000000.C4",
        "peekOfCode": "N = int(input())\n# Не будем проверять входные данные на корректность\n# В ЕГЭ (но не в реальной жизни!) это не нужно\nfor i in range(N):\n    num = int(input())\n    if num % 3 == 0:\n        R_0 = max(R_0, num)\n        # Перезаписываем число на большее, если возможно\n    elif num % 3 == 1:\n        R_1 = max(R_1, num)",
        "detail": "000000.C4",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "000000.C4",
        "description": "000000.C4",
        "peekOfCode": "R = max(R_0 + R_1, R_2_1 + R_2_2)\n# Это - вычисленное контрольное значение\nif R < 0:\n    # Если такого числа нет, R будет отрицательно\n    # Так как все числа не превышают 1000\n    R = 1\nprint(\"Вычисленное контрольное значение: {}\".format(R))\n# Осталось проверить пришедшее число\nresult = int(input())\nif R == result:",
        "detail": "000000.C4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "000000.C4",
        "description": "000000.C4",
        "peekOfCode": "result = int(input())\nif R == result:\n    print(\"Контроль пройден\")\nelse:\n    print(\"Контроль не пройден\")",
        "detail": "000000.C4",
        "documentation": {}
    },
    {
        "label": "MyApp",
        "kind": 6,
        "importPath": "000000.demo_qt6",
        "description": "000000.demo_qt6",
        "peekOfCode": "class MyApp(QtWidgets.QWidget):\n  def __init__(self, parent=None):\n    QtWidgets.QWidget.__init__(self, parent)\n    self.setWindowTitle('hello app')\n    self.setWindowIcon(QIcon('apply.ico'))\n    self.resize(300, 200)  # width, height\n    layout = QtWidgets.QVBoxLayout()\n    self.setLayout(layout)\n    # widgets\n    self.inputField = QtWidgets.QLineEdit()",
        "detail": "000000.demo_qt6",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.demo_qt6",
        "description": "000000.demo_qt6",
        "peekOfCode": "app = QApplication(sys.argv)\napp.setStyleSheet('''\n    Qwidget {\n      font-size^ 25px;\n    }\n    QPushButton {\n      font-size: 20px;\n    }\n''')\nwindow = MyApp()",
        "detail": "000000.demo_qt6",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "000000.demo_qt6",
        "description": "000000.demo_qt6",
        "peekOfCode": "window = MyApp()\nwindow.show()\napp.exec()",
        "detail": "000000.demo_qt6",
        "documentation": {}
    },
    {
        "label": "format_dms_coordinates",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def format_dms_coordinates(coordinates):\n    return f\"{coordinates[0]}° {coordinates[1]}\\' {coordinates[2]}\\\"\"\ndef dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref):\n    decimal_degrees = coordinates[0] + \\\n                      coordinates[1] / 60 + \\\n                      coordinates[2] / 3600\n    if coordinates_ref == \"S\" or coordinates_ref == \"W\":\n        decimal_degrees = -decimal_degrees\n    return decimal_degrees\ndef draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "dms_coordinates_to_dd_coordinates",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref):\n    decimal_degrees = coordinates[0] + \\\n                      coordinates[1] / 60 + \\\n                      coordinates[2] / 3600\n    if coordinates_ref == \"S\" or coordinates_ref == \"W\":\n        decimal_degrees = -decimal_degrees\n    return decimal_degrees\ndef draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):\n    import webbrowser\n    decimal_latitude = dms_coordinates_to_dd_coordinates(latitude, latitude_ref)",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "draw_map_for_location",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):\n    import webbrowser\n    decimal_latitude = dms_coordinates_to_dd_coordinates(latitude, latitude_ref)\n    decimal_longitude = dms_coordinates_to_dd_coordinates(longitude, longitude_ref)\n    url = f\"https://www.google.com/maps?q={decimal_latitude},{decimal_longitude}\"\n    webbrowser.open_new_tab(url)\ndef degrees_to_direction(degrees):\n    COMPASS_DIRECTIONS = [\n        \"N\",\n        \"NNE\",",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "degrees_to_direction",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def degrees_to_direction(degrees):\n    COMPASS_DIRECTIONS = [\n        \"N\",\n        \"NNE\",\n        \"NE\",\n        \"ENE\",\n        \"E\",\n        \"ESE\",\n        \"SE\",\n        \"SSE\",",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "format_direction_ref",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def format_direction_ref(direction_ref):\n    direction_ref_text = \"(true or magnetic north not specified)\"\n    if direction_ref == \"T\":\n        direction_ref_text = \"True north\"\n    elif direction_ref == \"M\":\n        direction_ref_text = \"Magnetic north\"\n    return direction_ref_text\ndef format_altitude(altitude, altitude_ref):\n    altitude_ref_text = \"(above or below sea level not specified)\"\n    if altitude_ref == 0:",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "format_altitude",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def format_altitude(altitude, altitude_ref):\n    altitude_ref_text = \"(above or below sea level not specified)\"\n    if altitude_ref == 0:\n        altitude_ref_text = \"above sea level\"\n    elif altitude_ref == 1:\n        altitude_ref_text = \"below sea level\"\n    return f\"{altitude} meters {altitude_ref_text}\"\ndef format_speed_ref(speed_ref):\n    speed_ref_text = \"(speed units not specified)\"\n    if speed_ref == \"K\":",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "format_speed_ref",
        "kind": 2,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "def format_speed_ref(speed_ref):\n    speed_ref_text = \"(speed units not specified)\"\n    if speed_ref == \"K\":\n        speed_ref_text = \"km/h\"\n    elif speed_ref == \"M\":\n        speed_ref_text = \"mph\"\n    elif speed_ref == \"N\":\n        speed_ref_text = \"knots\"\n    return speed_ref_text\nwith open(\"30_06_2015_15_36_03.JPEG\", \"rb\") as palm_1_file:",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "images = [palm_1_image, palm_2_image]\nfor index, image in enumerate(images):\n    if image.has_exif:\n        status = f\"contains EXIF (version {image.exif_version}) information.\"\n        print(f\"Memeber list: {image.list_all()}\")\n        print(f\"Tags & values list: {image.get_all()}\")\n    else:\n        status = \"does not contain any EXIF information.\"\n    print(f\"Image {index} {status}\")\nimage_members = []",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "image_members",
        "kind": 5,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "image_members = []\nfor image in images:\n    image_members.append(dir(image))\nfor index, image_member_list in enumerate(image_members):\n    print(f\"Image {index} contains {len(image_member_list)} members:\")\n    print(f\"{image_member_list}\\n\")\ncommon_members = set(image_members[0]).intersection(set(image_members[1]))\ncommon_members_sorted = sorted(list(common_members))\nprint(\"Image 0 and Image 1 have these members in common:\")\nprint(f\"{common_members_sorted}\")",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "common_members",
        "kind": 5,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "common_members = set(image_members[0]).intersection(set(image_members[1]))\ncommon_members_sorted = sorted(list(common_members))\nprint(\"Image 0 and Image 1 have these members in common:\")\nprint(f\"{common_members_sorted}\")\nfor index, image in enumerate(images):\n    print(f\"Device information - Image {index}\")\n    print(\"----------------------------\")\n    if image.has_exif:\n      print(f\"Make: {image.get('make', 'Unknown')}\")\n      print(f\"Model: {image.get('model', 'Unknown')}\\n\")",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "common_members_sorted",
        "kind": 5,
        "importPath": "000000.EXIF",
        "description": "000000.EXIF",
        "peekOfCode": "common_members_sorted = sorted(list(common_members))\nprint(\"Image 0 and Image 1 have these members in common:\")\nprint(f\"{common_members_sorted}\")\nfor index, image in enumerate(images):\n    print(f\"Device information - Image {index}\")\n    print(\"----------------------------\")\n    if image.has_exif:\n      print(f\"Make: {image.get('make', 'Unknown')}\")\n      print(f\"Model: {image.get('model', 'Unknown')}\\n\")\nfor index, image in enumerate(images):",
        "detail": "000000.EXIF",
        "documentation": {}
    },
    {
        "label": "inlist",
        "kind": 2,
        "importPath": "000000.hello_teminal",
        "description": "000000.hello_teminal",
        "peekOfCode": "def inlist(*args) -> bool:\n    return args[0] in args[1:]\nname = input(\"Введите имя: \")\n#if inlist(name, \"Саша\", \"Шура\", \"Сашок\", \"Саня\", \"Шурик\", \"Санёк\", \"Санек\"):\n#    print(\"Здравствуйте, Александр!\")\n#else:\n#    print(\"Я Вас не знаю\")\nprint(\"Здравствуйте, Александр!\" if inlist(name, \"Саша\", \"Шура\", \"Сашок\", \"Саня\", \"Шурик\", \"Санёк\", \"Санек\") else \"Я Вас не знаю\")",
        "detail": "000000.hello_teminal",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "000000.hello_teminal",
        "description": "000000.hello_teminal",
        "peekOfCode": "name = input(\"Введите имя: \")\n#if inlist(name, \"Саша\", \"Шура\", \"Сашок\", \"Саня\", \"Шурик\", \"Санёк\", \"Санек\"):\n#    print(\"Здравствуйте, Александр!\")\n#else:\n#    print(\"Я Вас не знаю\")\nprint(\"Здравствуйте, Александр!\" if inlist(name, \"Саша\", \"Шура\", \"Сашок\", \"Саня\", \"Шурик\", \"Санёк\", \"Санек\") else \"Я Вас не знаю\")",
        "detail": "000000.hello_teminal",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "kind": 2,
        "importPath": "000000.MessageBox",
        "description": "000000.MessageBox",
        "peekOfCode": "def messagebox(msg, arg1=None, arg2=None, timeout=None, details=''):\n    def center_widget(widget):\n        '''center the widget on the screen'''\n        widget_pos = widget.frameGeometry()\n        screen_center = QtGui.QDesktopWidget().screenGeometry().center()\n        widget_pos.moveCenter(screen_center)\n        widget.move(widget_pos.topLeft())\n    flags = 0\n    title = 'vfp2py'\n    if arg1 is not None:",
        "detail": "000000.MessageBox",
        "documentation": {}
    },
    {
        "label": "OK_ONLY",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "OK_ONLY = 0\nOK_CANCEL = 1\nABORT_RETRY_IGNORE = 2\nYES_NO_CANCEL = 3\nYES_NO = 4\nRETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "OK_CANCEL",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "OK_CANCEL = 1\nABORT_RETRY_IGNORE = 2\nYES_NO_CANCEL = 3\nYES_NO = 4\nRETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "ABORT_RETRY_IGNORE",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "ABORT_RETRY_IGNORE = 2\nYES_NO_CANCEL = 3\nYES_NO = 4\nRETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "YES_NO_CANCEL",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "YES_NO_CANCEL = 3\nYES_NO = 4\nRETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "YES_NO",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "YES_NO = 4\nRETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETRY_CANCEL",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETRY_CANCEL = 5\nNOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "NOICON",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "NOICON = 0\nSTOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "STOPSIGN",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "STOPSIGN = 16\nQUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "QUESTION",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "QUESTION = 32\nEXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "EXCLAMATION",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "EXCLAMATION = 48\nINFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "INFORMATION",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "INFORMATION = 64\nFIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "FIRSTBUTTON",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "FIRSTBUTTON = 0\nSECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "SECONDBUTTON",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "SECONDBUTTON = 256\nTHIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "THIRDBUTTON",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "THIRDBUTTON = 512\nOK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "OK",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "OK = QtGui.QMessageBox.Ok\nCANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "CANCEL",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "CANCEL = QtGui.QMessageBox.Cancel\nABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "ABORT",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "ABORT = QtGui.QMessageBox.Abort\nRETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETRY",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETRY = QtGui.QMessageBox.Retry\nIGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "IGNORE",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "IGNORE = QtGui.QMessageBox.Ignore\nYES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "YES",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "YES = QtGui.QMessageBox.Yes\nNO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "NO",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "NO = QtGui.QMessageBox.No\nRETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_OK",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_OK = 1\nRETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_CANCEL",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_CANCEL = 2\nRETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_ABORT",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_ABORT = 3\nRETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_RETRY",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_RETRY = 4\nRETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_IGNORE",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_IGNORE = 5\nRETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_YES",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_YES = 6\nRETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "RETURN_NO",
        "kind": 5,
        "importPath": "000000.MessageBoxConstants",
        "description": "000000.MessageBoxConstants",
        "peekOfCode": "RETURN_NO = 7",
        "detail": "000000.MessageBoxConstants",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "000000.PyODBC",
        "description": "000000.PyODBC",
        "peekOfCode": "conn = pyodbc.connect(r'''Driver={ODBC Driver 17 for SQL Server};\n                      Server=.;\n                      Database=master;\n                      Trusted_Connection=yes;\n                      APP=Pyton App;\n                      Workstation=SSA-ASUS''')\n# conn.setdecoding(pyodbc.SQL_CHAR,encoding='utf-8')\ncursor = conn.cursor()\ncursor.execute('select @@version')\nfor row in cursor:",
        "detail": "000000.PyODBC",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "000000.PyODBC",
        "description": "000000.PyODBC",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('select @@version')\nfor row in cursor:\n    print(row)\nconn.close()",
        "detail": "000000.PyODBC",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_10_1",
        "description": "000000.PyQt5_10_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.text = u'\\u041b\\u0435\\u0432 \\u041d\\u0438\\u043a\\u043e\\u043b\\u0430\\\n\\u0435\\u0432\\u0438\\u0447 \\u0422\\u043e\\u043b\\u0441\\u0442\\u043e\\u0439: \\n\\\n\\u0410\\u043d\\u043d\\u0430 \\u041a\\u0430\\u0440\\u0435\\u043d\\u0438\\u043d\\u0430'\n        self.setGeometry(300, 300, 280, 170)\n        self.setWindowTitle('Draw text')",
        "detail": "000000.PyQt5_10_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_10_2",
        "description": "000000.PyQt5_10_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 280, 170)\n        self.setWindowTitle('Points')\n        self.show()\n    def paintEvent(self, e):\n        qp = QPainter()",
        "detail": "000000.PyQt5_10_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_10_3",
        "description": "000000.PyQt5_10_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 350, 100)\n        self.setWindowTitle('Colours')\n        self.show()\n    def paintEvent(self, e):\n        qp = QPainter()",
        "detail": "000000.PyQt5_10_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_10_4",
        "description": "000000.PyQt5_10_4",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 280, 270)\n        self.setWindowTitle('Pen styles')\n        self.show()\n    def paintEvent(self, e):\n        qp = QPainter()",
        "detail": "000000.PyQt5_10_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_10_5",
        "description": "000000.PyQt5_10_5",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 355, 280)\n        self.setWindowTitle('Brushes')\n        self.show()\n    def paintEvent(self, e):\n        qp = QPainter()",
        "detail": "000000.PyQt5_10_5",
        "documentation": {}
    },
    {
        "label": "Communicate",
        "kind": 6,
        "importPath": "000000.PyQt5_11_1",
        "description": "000000.PyQt5_11_1",
        "peekOfCode": "class Communicate(QObject):\n    updateBW = pyqtSignal(int)\nclass BurningWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setMinimumSize(1, 30)\n        self.value = 75\n        self.num = [75, 150, 225, 300, 375, 450, 525, 600, 675]",
        "detail": "000000.PyQt5_11_1",
        "documentation": {}
    },
    {
        "label": "BurningWidget",
        "kind": 6,
        "importPath": "000000.PyQt5_11_1",
        "description": "000000.PyQt5_11_1",
        "peekOfCode": "class BurningWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setMinimumSize(1, 30)\n        self.value = 75\n        self.num = [75, 150, 225, 300, 375, 450, 525, 600, 675]\n    def setValue(self, value):\n        self.value = value",
        "detail": "000000.PyQt5_11_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_11_1",
        "description": "000000.PyQt5_11_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        sld = QSlider(Qt.Horizontal, self)\n        sld.setFocusPolicy(Qt.NoFocus)\n        sld.setRange(1, 750)\n        sld.setValue(75)\n        sld.setGeometry(30, 40, 150, 30)",
        "detail": "000000.PyQt5_11_1",
        "documentation": {}
    },
    {
        "label": "Tetris",
        "kind": 6,
        "importPath": "000000.PyQt5_12_1",
        "description": "000000.PyQt5_12_1",
        "peekOfCode": "class Tetris(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.tboard = Board(self)\n        self.setCentralWidget(self.tboard)\n        self.statusbar = self.statusBar()\n        self.tboard.msg2Statusbar[str].connect(self.statusbar.showMessage)\n        self.tboard.start()",
        "detail": "000000.PyQt5_12_1",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "000000.PyQt5_12_1",
        "description": "000000.PyQt5_12_1",
        "peekOfCode": "class Board(QFrame):\n    msg2Statusbar = pyqtSignal(str)\n    BoardWidth = 10\n    BoardHeight = 22\n    Speed = 300\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.initBoard()\n    def initBoard(self):\n        self.timer = QBasicTimer()",
        "detail": "000000.PyQt5_12_1",
        "documentation": {}
    },
    {
        "label": "Tetrominoe",
        "kind": 6,
        "importPath": "000000.PyQt5_12_1",
        "description": "000000.PyQt5_12_1",
        "peekOfCode": "class Tetrominoe(object):\n    NoShape = 0\n    ZShape = 1\n    SShape = 2\n    LineShape = 3\n    TShape = 4\n    SquareShape = 5\n    LShape = 6\n    MirroredLShape = 7\nclass Shape(object):",
        "detail": "000000.PyQt5_12_1",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "000000.PyQt5_12_1",
        "description": "000000.PyQt5_12_1",
        "peekOfCode": "class Shape(object):\n    coordsTable = (\n        ((0, 0),     (0, 0),     (0, 0),     (0, 0)),\n        ((0, -1),    (0, 0),     (-1, 0),    (-1, 1)),\n        ((0, -1),    (0, 0),     (1, 0),     (1, 1)),\n        ((0, -1),    (0, 0),     (0, 1),     (0, 2)),\n        ((-1, 0),    (0, 0),     (1, 0),     (0, 1)),\n        ((0, 0),     (1, 0),     (0, 1),     (1, 1)),\n        ((-1, -1),   (0, -1),    (0, 0),     (0, 1)),\n        ((1, -1),    (0, -1),    (0, 0),     (0, 1))",
        "detail": "000000.PyQt5_12_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_2_1",
        "description": "000000.PyQt5_2_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 300, 220)\n        self.setWindowTitle('Icon')\n        self.setWindowIcon(QIcon('Excel-64x64x32.png'))\n        self.show()\nif __name__ == '__main__':",
        "detail": "000000.PyQt5_2_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_2_2",
        "description": "000000.PyQt5_2_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        QToolTip.setFont(QFont('SansSerif', 10))\n        self.setToolTip('This is a <b>QWidget</b> widget')\n        btn = QPushButton('Button', self)\n        btn.setToolTip('This is a <b>QPushButton</b> widget')\n        btn.resize(btn.sizeHint())",
        "detail": "000000.PyQt5_2_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_2_3",
        "description": "000000.PyQt5_2_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        qbtn = QPushButton('Quit', self)\n        qbtn.clicked.connect(QCoreApplication.instance().quit)\n        qbtn.resize(qbtn.sizeHint())\n        qbtn.move(50, 50)\n        self.setGeometry(300, 300, 250, 150)",
        "detail": "000000.PyQt5_2_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_2_4",
        "description": "000000.PyQt5_2_4",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 250, 150)\n        self.setWindowTitle('Message box')\n        self.show()\n    def closeEvent(self, event):\n        if messagebox(",
        "detail": "000000.PyQt5_2_4",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 2,
        "importPath": "000000.PyQt5_2_4",
        "description": "000000.PyQt5_2_4",
        "peekOfCode": "def left(__s, __amount):\n    return __s[:__amount]\ndef right(_s, amount):\n    return _s[-amount:]\ndef substring(_s, offset, amount):\n    return _s[offset:offset+amount]\nclass Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()",
        "detail": "000000.PyQt5_2_4",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 2,
        "importPath": "000000.PyQt5_2_4",
        "description": "000000.PyQt5_2_4",
        "peekOfCode": "def right(_s, amount):\n    return _s[-amount:]\ndef substring(_s, offset, amount):\n    return _s[offset:offset+amount]\nclass Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 250, 150)",
        "detail": "000000.PyQt5_2_4",
        "documentation": {}
    },
    {
        "label": "substring",
        "kind": 2,
        "importPath": "000000.PyQt5_2_4",
        "description": "000000.PyQt5_2_4",
        "peekOfCode": "def substring(_s, offset, amount):\n    return _s[offset:offset+amount]\nclass Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 250, 150)\n        self.setWindowTitle('Message box')\n        self.show()",
        "detail": "000000.PyQt5_2_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_2_5",
        "description": "000000.PyQt5_2_5",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.resize(250, 150)\n        self.center()\n        self.setWindowTitle('Center')\n        self.show()\n    def center(self):",
        "detail": "000000.PyQt5_2_5",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_3_1",
        "description": "000000.PyQt5_3_1",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.statusBar().showMessage('Ready')\n        self.setGeometry(300, 300, 250, 150)\n        self.setWindowTitle('Statusbar')\n        self.show()\nif __name__ == '__main__':",
        "detail": "000000.PyQt5_3_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_3_2",
        "description": "000000.PyQt5_3_2",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        exitAction = QAction(QIcon('exit.png'), '&Exit', self)\n        exitAction.setShortcut('Ctrl+Q')\n        exitAction.setStatusTip('Exit application')\n        exitAction.triggered.connect(qApp.quit)\n        self.statusBar()",
        "detail": "000000.PyQt5_3_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_3_3",
        "description": "000000.PyQt5_3_3",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        exitAction = QAction(QIcon('exit.bmp'), 'Exit', self)\n        exitAction.setShortcut('Ctrl+Q')\n        exitAction.triggered.connect(qApp.quit)\n        self.toolbar = self.addToolBar('Exit')\n        self.toolbar.addAction(exitAction)",
        "detail": "000000.PyQt5_3_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_3_5",
        "description": "000000.PyQt5_3_5",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        textEdit = QTextEdit()\n        self.setCentralWidget(textEdit)\n        exitAction = QAction(QIcon('exit.bmp'), 'Exit', self)\n        exitAction.setShortcut('Ctrl+Q')\n        exitAction.setStatusTip('Exit application')",
        "detail": "000000.PyQt5_3_5",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_4_1",
        "description": "000000.PyQt5_4_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        lbl1 = QLabel('Zetcode', self)\n        lbl1.move(15, 10)\n        lbl2 = QLabel('tutorials', self)\n        lbl2.move(35, 40)\n        lbl3 = QLabel('for programmers', self)",
        "detail": "000000.PyQt5_4_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_4_2",
        "description": "000000.PyQt5_4_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        okButton = QPushButton(\"OK\")\n        cancelButton = QPushButton(\"Cancel\")\n        hbox = QHBoxLayout()\n        hbox.addStretch(1)\n        hbox.addWidget(okButton)",
        "detail": "000000.PyQt5_4_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_4_3",
        "description": "000000.PyQt5_4_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        grid = QGridLayout()\n        self.setLayout(grid)\n        names = ['Cls', 'Bck', '', 'Close', '7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', '0', '.', '=', '+']\n        positions = [(i,j) for i in range(5) for j in range(4)]\n        for position, name in zip(positions, names):",
        "detail": "000000.PyQt5_4_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_4_4",
        "description": "000000.PyQt5_4_4",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        title = QLabel('Title')\n        author = QLabel('Author')\n        review = QLabel('Review')\n        titleEdit = QLineEdit()\n        authorEdit = QLineEdit()",
        "detail": "000000.PyQt5_4_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_5_1",
        "description": "000000.PyQt5_5_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        lcd = QLCDNumber(self)\n        sld = QSlider(Qt.Horizontal, self)\n        vbox = QVBoxLayout()\n        vbox.addWidget(lcd)\n        vbox.addWidget(sld)",
        "detail": "000000.PyQt5_5_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_5_2",
        "description": "000000.PyQt5_5_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 250, 150)\n        self.setWindowTitle('Event handler')\n        self.show()\n    def keyPressEvent(self, e):\n        if e.key() == Qt.Key_Escape:",
        "detail": "000000.PyQt5_5_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_5_3",
        "description": "000000.PyQt5_5_3",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        btn1 = QPushButton(\"Button 1\", self)\n        btn1.move(30, 50)\n        btn2 = QPushButton(\"Button 2\", self)\n        btn2.move(150, 50)\n        btn1.clicked.connect(self.buttonClicked)",
        "detail": "000000.PyQt5_5_3",
        "documentation": {}
    },
    {
        "label": "Communicate",
        "kind": 6,
        "importPath": "000000.PyQt5_5_4",
        "description": "000000.PyQt5_5_4",
        "peekOfCode": "class Communicate(QObject):\n    closeApp = pyqtSignal()\nclass Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.c = Communicate()\n        self.c.closeApp.connect(self.close)\n        self.setGeometry(300, 300, 290, 150)",
        "detail": "000000.PyQt5_5_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_5_4",
        "description": "000000.PyQt5_5_4",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.c = Communicate()\n        self.c.closeApp.connect(self.close)\n        self.setGeometry(300, 300, 290, 150)\n        self.setWindowTitle('Emit signal')\n        self.show()",
        "detail": "000000.PyQt5_5_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_6_1",
        "description": "000000.PyQt5_6_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.btn = QPushButton('Dialog', self)\n        self.btn.move(20, 20)\n        self.btn.clicked.connect(self.showDialog)\n        self.le = QLineEdit(self)\n        self.le.move(130, 22)",
        "detail": "000000.PyQt5_6_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_6_2",
        "description": "000000.PyQt5_6_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        col = QColor(0, 0, 0)\n        self.btn = QPushButton('Dialog', self)\n        self.btn.move(20, 20)\n        self.btn.clicked.connect(self.showDialog)\n        self.frm = QFrame(self)",
        "detail": "000000.PyQt5_6_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_6_3",
        "description": "000000.PyQt5_6_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        vbox = QVBoxLayout()\n        btn = QPushButton('Dialog', self)\n        btn.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)\n        btn.move(20, 20)\n        vbox.addWidget(btn)",
        "detail": "000000.PyQt5_6_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_6_4",
        "description": "000000.PyQt5_6_4",
        "peekOfCode": "class Example(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.textEdit = QTextEdit()\n        self.setCentralWidget(self.textEdit)\n        self.statusBar()\n        openFile = QAction(QIcon('open.png'), 'Open', self)\n        openFile.setShortcut('Ctrl+O')",
        "detail": "000000.PyQt5_6_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_7_1",
        "description": "000000.PyQt5_7_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        cb = QCheckBox('Show title', self)\n        cb.move(20, 20)\n        cb.toggle()\n        cb.stateChanged.connect(self.changeTitle)\n        self.setGeometry(300, 300, 250, 150)",
        "detail": "000000.PyQt5_7_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_7_2",
        "description": "000000.PyQt5_7_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.col = QColor(0, 0, 0)\n        redb = QPushButton('Red', self)\n        redb.setCheckable(True)\n        redb.move(10, 10)\n        redb.clicked[bool].connect(self.setColor)",
        "detail": "000000.PyQt5_7_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_7_3",
        "description": "000000.PyQt5_7_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        sld = QSlider(Qt.Horizontal, self)\n        sld.setFocusPolicy(Qt.NoFocus)\n        sld.setGeometry(30, 40, 100, 30)\n        sld.valueChanged[int].connect(self.changeValue)\n        self.label = QLabel(self)",
        "detail": "000000.PyQt5_7_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_7_4",
        "description": "000000.PyQt5_7_4",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.pbar = QProgressBar(self)\n        self.pbar.setGeometry(30, 40, 250, 20)\n        self.btn = QPushButton('Start', self)\n        self.btn.move(40, 80)\n        self.btn.clicked.connect(self.doAction)",
        "detail": "000000.PyQt5_7_4",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_7_5",
        "description": "000000.PyQt5_7_5",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        cal = QCalendarWidget(self)\n        cal.setGridVisible(True)\n        cal.move(20, 20)\n        cal.clicked[QDate].connect(self.showDate)\n        self.lbl = QLabel(self)",
        "detail": "000000.PyQt5_7_5",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_8_1",
        "description": "000000.PyQt5_8_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        hbox = QHBoxLayout(self)\n        pixmap = QPixmap(\"italika_logo_800.jpg\")\n        lbl = QLabel(self)\n        lbl.setPixmap(pixmap)\n        hbox.addWidget(lbl)",
        "detail": "000000.PyQt5_8_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_8_2",
        "description": "000000.PyQt5_8_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.lbl = QLabel(self)\n        qle = QLineEdit(self)\n        qle.move(60, 100)\n        self.lbl.move(60, 40)\n        qle.textChanged[str].connect(self.onChanged)",
        "detail": "000000.PyQt5_8_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_8_3",
        "description": "000000.PyQt5_8_3",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        hbox = QHBoxLayout(self)\n        topleft = QFrame(self)\n        topleft.setFrameShape(QFrame.StyledPanel)\n        topright = QFrame(self)\n        topright.setFrameShape(QFrame.StyledPanel)",
        "detail": "000000.PyQt5_8_3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_8_4",
        "description": "000000.PyQt5_8_4",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.lbl = QLabel(\"Ubuntu\", self)\n        combo = QComboBox(self)\n        combo.addItem(\"Ubuntu\")\n        combo.addItem(\"Mandriva\")\n        combo.addItem(\"Fedora\")",
        "detail": "000000.PyQt5_8_4",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "000000.PyQt5_9_1",
        "description": "000000.PyQt5_9_1",
        "peekOfCode": "class Button(QPushButton):\n    def __init__(self, title, parent):\n        super().__init__(title, parent)\n        self.setAcceptDrops(True)\n    def dragEnterEvent(self, e):\n        if e.mimeData().hasFormat('text/plain'):\n            e.accept()\n        else:\n            e.ignore()\n    def dropEvent(self, e):",
        "detail": "000000.PyQt5_9_1",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_9_1",
        "description": "000000.PyQt5_9_1",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        edit = QLineEdit('', self)\n        edit.setDragEnabled(True)\n        edit.move(30, 65)\n        button = Button(\"Button\", self)\n        button.move(190, 65)",
        "detail": "000000.PyQt5_9_1",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "000000.PyQt5_9_2",
        "description": "000000.PyQt5_9_2",
        "peekOfCode": "class Button(QPushButton):\n    def __init__(self, title, parent):\n        super().__init__(title, parent)\n    def mouseMoveEvent(self, e):\n        if e.buttons() != Qt.RightButton:\n            return\n        mimeData = QMimeData()\n        drag = QDrag(self)\n        drag.setMimeData(mimeData)\n        drag.setHotSpot(e.pos() - self.rect().topLeft())",
        "detail": "000000.PyQt5_9_2",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "000000.PyQt5_9_2",
        "description": "000000.PyQt5_9_2",
        "peekOfCode": "class Example(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setAcceptDrops(True)\n        self.button = Button('Button', self)\n        self.button.move(100, 65)\n        self.setWindowTitle('Click or Move')\n        self.setGeometry(300, 300, 280, 150)",
        "detail": "000000.PyQt5_9_2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.PyQt5_BackgroundImage",
        "description": "000000.PyQt5_BackgroundImage",
        "peekOfCode": "app = QtWidgets.QApplication(sys.argv)\nwindow = QtWidgets.QWidget()\nwindow.setWindowTitle(\"Изображение в качестве фона\")\nwindow.resize(300, 100)\npal = window.palette()\npal.setBrush(QtGui.QPalette.Normal, QtGui.QPalette.Window,\n             QtGui.QBrush(QtGui.QPixmap(\"BackOfForm.jpg\")))\nwindow.setPalette(pal)\nlabel = QtWidgets.QLabel(\"Текст надписи\")\nlabel.setAlignment(QtCore.Qt.AlignCenter)",
        "detail": "000000.PyQt5_BackgroundImage",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "000000.PyQt5_BackgroundImage",
        "description": "000000.PyQt5_BackgroundImage",
        "peekOfCode": "window = QtWidgets.QWidget()\nwindow.setWindowTitle(\"Изображение в качестве фона\")\nwindow.resize(300, 100)\npal = window.palette()\npal.setBrush(QtGui.QPalette.Normal, QtGui.QPalette.Window,\n             QtGui.QBrush(QtGui.QPixmap(\"BackOfForm.jpg\")))\nwindow.setPalette(pal)\nlabel = QtWidgets.QLabel(\"Текст надписи\")\nlabel.setAlignment(QtCore.Qt.AlignCenter)\nlabel.setStyleSheet(\"background-image: url(wizbck04.gif);\")",
        "detail": "000000.PyQt5_BackgroundImage",
        "documentation": {}
    },
    {
        "label": "pal",
        "kind": 5,
        "importPath": "000000.PyQt5_BackgroundImage",
        "description": "000000.PyQt5_BackgroundImage",
        "peekOfCode": "pal = window.palette()\npal.setBrush(QtGui.QPalette.Normal, QtGui.QPalette.Window,\n             QtGui.QBrush(QtGui.QPixmap(\"BackOfForm.jpg\")))\nwindow.setPalette(pal)\nlabel = QtWidgets.QLabel(\"Текст надписи\")\nlabel.setAlignment(QtCore.Qt.AlignCenter)\nlabel.setStyleSheet(\"background-image: url(wizbck04.gif);\")\nlabel.setAutoFillBackground(True)\nvbox = QtWidgets.QVBoxLayout()\nvbox.addWidget(label)",
        "detail": "000000.PyQt5_BackgroundImage",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "000000.PyQt5_BackgroundImage",
        "description": "000000.PyQt5_BackgroundImage",
        "peekOfCode": "label = QtWidgets.QLabel(\"Текст надписи\")\nlabel.setAlignment(QtCore.Qt.AlignCenter)\nlabel.setStyleSheet(\"background-image: url(wizbck04.gif);\")\nlabel.setAutoFillBackground(True)\nvbox = QtWidgets.QVBoxLayout()\nvbox.addWidget(label)\nwindow.setLayout(vbox)\nwindow.show()\nsys.exit(app.exec())",
        "detail": "000000.PyQt5_BackgroundImage",
        "documentation": {}
    },
    {
        "label": "vbox",
        "kind": 5,
        "importPath": "000000.PyQt5_BackgroundImage",
        "description": "000000.PyQt5_BackgroundImage",
        "peekOfCode": "vbox = QtWidgets.QVBoxLayout()\nvbox.addWidget(label)\nwindow.setLayout(vbox)\nwindow.show()\nsys.exit(app.exec())",
        "detail": "000000.PyQt5_BackgroundImage",
        "documentation": {}
    },
    {
        "label": "TextEdit",
        "kind": 6,
        "importPath": "000000.PyQt5_simpleEditor",
        "description": "000000.PyQt5_simpleEditor",
        "peekOfCode": "class TextEdit(QMainWindow):\n    def __init__(self):\n        super(TextEdit, self).__init__()\n        #font = QFont(\"Courier\", 11)\n        # self.setFont(font)\n        self.filename = False\n        self.Ui()\n    def Ui(self):\n        quitApp = QAction(QIcon(\n            '/usr/share/icons/breeze-dark/actions/32/application-exit.svg'), 'Quit', self)",
        "detail": "000000.PyQt5_simpleEditor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "000000.PyQt5_simpleEditor",
        "description": "000000.PyQt5_simpleEditor",
        "peekOfCode": "def main():\n    app = QApplication(sys.argv)\n    editor = TextEdit()\n    sys.exit(app.exec())\nif __name__ == '__main__':\n    main()",
        "detail": "000000.PyQt5_simpleEditor",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.PyQt5_ToolTips",
        "description": "000000.PyQt5_ToolTips",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = QWidget(flags=QtCore.Qt.Dialog)\nwindow.setWindowTitle(\"Bcплывaюшиe подсказки\")\nwindow.resize(300, 70)\nbutton = QPushButton(\"&Закрыть окно\", window)\nbutton.setFixedSize(150, 30)\nbutton.move(75, 20)\nbutton.setToolTip(\"Это всплывающая подсказка для <b>кнопки</b>\")\nwindow.setToolTip(\"Этo всплывающая подсказка для <b>окна</b>\")\nbutton.setWhatsThis(\"Этo справка для <b>кнопки</b>\")",
        "detail": "000000.PyQt5_ToolTips",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "000000.PyQt5_ToolTips",
        "description": "000000.PyQt5_ToolTips",
        "peekOfCode": "window = QWidget(flags=QtCore.Qt.Dialog)\nwindow.setWindowTitle(\"Bcплывaюшиe подсказки\")\nwindow.resize(300, 70)\nbutton = QPushButton(\"&Закрыть окно\", window)\nbutton.setFixedSize(150, 30)\nbutton.move(75, 20)\nbutton.setToolTip(\"Это всплывающая подсказка для <b>кнопки</b>\")\nwindow.setToolTip(\"Этo всплывающая подсказка для <b>окна</b>\")\nbutton.setWhatsThis(\"Этo справка для <b>кнопки</b>\")\nwindow.setWhatsThis(\"Этo справка для <b>окна</b>\")",
        "detail": "000000.PyQt5_ToolTips",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "000000.PyQt5_ToolTips",
        "description": "000000.PyQt5_ToolTips",
        "peekOfCode": "button = QPushButton(\"&Закрыть окно\", window)\nbutton.setFixedSize(150, 30)\nbutton.move(75, 20)\nbutton.setToolTip(\"Это всплывающая подсказка для <b>кнопки</b>\")\nwindow.setToolTip(\"Этo всплывающая подсказка для <b>окна</b>\")\nbutton.setWhatsThis(\"Этo справка для <b>кнопки</b>\")\nwindow.setWhatsThis(\"Этo справка для <b>окна</b>\")\nbutton.clicked.connect(app.instance().quit)\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "000000.PyQt5_ToolTips",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "kind": 6,
        "importPath": "000000.PyQt5_WebEngine",
        "description": "000000.PyQt5_WebEngine",
        "peekOfCode": "class MyWindow(QtWidgets.QWidget):\n    def __init__(self, parent=None):\n        QtWidgets.QWidget.__init__(self, parent, flags=QtCore.Qt.Window)\n        self.setWindowTitle(\"Класс QWebEngineView\")\n        vbox = QtWidgets.QVBoxLayout()\n        hbox = QtWidgets.QHBoxLayout()\n        self.btnBack = QtWidgets.QPushButton(\"&Назад\")\n        hbox.addWidget(self.btnBack)\n        self.btnForward = QtWidgets.QPushButton(\"&Вперёд\")\n        hbox.addWidget(self.btnForward)",
        "detail": "000000.PyQt5_WebEngine",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.PyQt5_WebEngine",
        "description": "000000.PyQt5_WebEngine",
        "peekOfCode": "app = QtWidgets.QApplication(sys.argv)\nwindow = MyWindow()\nwindow.show()\nsys.exit(app.exec())",
        "detail": "000000.PyQt5_WebEngine",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "000000.PyQt5_WebEngine",
        "description": "000000.PyQt5_WebEngine",
        "peekOfCode": "window = MyWindow()\nwindow.show()\nsys.exit(app.exec())",
        "detail": "000000.PyQt5_WebEngine",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.wxPython_01",
        "description": "000000.wxPython_01",
        "peekOfCode": "class MyPanel(wx.Panel):\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\n        self.number_of_buttons = 0\n        self.frame = parent\n        self.mainSizer = wx.BoxSizer(wx.VERTICAL)\n        controlSizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.widgetSizer = wx.BoxSizer(wx.VERTICAL)\n        self.addButton = wx.Button(self, label=\"Add\")",
        "detail": "000000.wxPython_01",
        "documentation": {}
    },
    {
        "label": "MyFrame",
        "kind": 6,
        "importPath": "000000.wxPython_01",
        "description": "000000.wxPython_01",
        "peekOfCode": "class MyFrame(wx.Frame):\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, parent=None, title=\"Add / Remove Buttons\")\n        self.fSizer = wx.BoxSizer(wx.VERTICAL)\n        panel = MyPanel(self)\n        self.fSizer.Add(panel, 1, wx.EXPAND)\n        self.SetSizer(self.fSizer)\n        self.Fit()\n        self.Show()",
        "detail": "000000.wxPython_01",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.wxPython_02",
        "description": "000000.wxPython_02",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, title=\"Screenshot Tutorial\")\n        panel = wx.Panel(self)\n        screenshotBtn = wx.Button(panel, label=\"Take Screenshot\")\n        screenshotBtn.Bind(wx.EVT_BUTTON, self.onTakeScreenShot)\n        printBtn = wx.Button(panel, label=\"Print Screenshot\")\n        printBtn.Bind(wx.EVT_BUTTON, self.onPrint)\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(screenshotBtn, 0, wx.ALL|wx.CENTER, 5)",
        "detail": "000000.wxPython_02",
        "documentation": {}
    },
    {
        "label": "SnapshotPrinter",
        "kind": 6,
        "importPath": "000000.wxPython_02_1",
        "description": "000000.wxPython_02_1",
        "peekOfCode": "class SnapshotPrinter(wx.Frame):\n    def __init__(self, title='Snapshot Printer'):\n        wx.Frame.__init__(self, None, title=title, size=(650,400))\n        self.panel = wx.Panel(self)\n        self.printer = HtmlEasyPrinting(\n            name='Printing', parentWindow=None)\n        self.html = HtmlWindow(self.panel)\n        self.html.SetRelatedFrame(self, self.GetTitle())\n        if not os.path.exists('screenshot.htm'):\n            self.createHtml()",
        "detail": "000000.wxPython_02_1",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.wxPython_03",
        "description": "000000.wxPython_03",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, title='Image Extractor')\n        self.panel = wx.Panel(self)\n        loc = wx.IconLocation(r'c:\\Users\\Sizov\\AppData\\Local\\Programs\\Python\\Python37\\python.exe', 0)\n        self.SetIcon(wx.Icon(loc))\nif __name__ == '__main__':\n    app = wx.App(False)\n    frame = MyForm().Show()\n    app.MainLoop()",
        "detail": "000000.wxPython_03",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.wxPython_03_01",
        "description": "000000.wxPython_03_01",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, title='Custom Image')\n        self.panel = wx.Panel(self, wx.ID_ANY)\n        ico = wx.Icon('apply.ico', wx.BITMAP_TYPE_ICO)\n        self.SetIcon(ico)\nif __name__ == '__main__':\n    app = wx.App(False)\n    frame = MyForm().Show()\n    app.MainLoop()",
        "detail": "000000.wxPython_03_01",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.wxPython_03_02",
        "description": "000000.wxPython_03_02",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, title='Python Image Title')\n        self.panel = wx.Panel(self, wx.ID_ANY)\n#        ico = apply_ico.python.GetIcon()\n        ico = apply_ico.apply\n        self.SetIcon(ico)\n# Запустите программу\nif __name__ == '__main__':\n    app = wx.App(False)",
        "detail": "000000.wxPython_03_02",
        "documentation": {}
    },
    {
        "label": "MainPanel",
        "kind": 6,
        "importPath": "000000.wxPython_04",
        "description": "000000.wxPython_04",
        "peekOfCode": "class MainPanel(wx.Panel):\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent=parent)\n        self.frame = parent\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        hSizer = wx.BoxSizer(wx.HORIZONTAL)\n        for num in range(4):\n            label = \"Button %s\" % num\n            btn = wx.Button(self, label=label)\n            sizer.Add(btn, 0, wx.ALL, 5)",
        "detail": "000000.wxPython_04",
        "documentation": {}
    },
    {
        "label": "MainFrame",
        "kind": 6,
        "importPath": "000000.wxPython_04",
        "description": "000000.wxPython_04",
        "peekOfCode": "class MainFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, size=(600,450))\n        panel = MainPanel(self)\n        self.Center()\nclass Main(wx.App):\n    def __init__(self, redirect=False, filename=None):\n        wx.App.__init__(self, redirect, filename)\n        dlg = MainFrame()\n        dlg.Show()",
        "detail": "000000.wxPython_04",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "000000.wxPython_04",
        "description": "000000.wxPython_04",
        "peekOfCode": "class Main(wx.App):\n    def __init__(self, redirect=False, filename=None):\n        wx.App.__init__(self, redirect, filename)\n        dlg = MainFrame()\n        dlg.Show()\nif __name__ == \"__main__\":\n    app = Main()\n    app.MainLoop()",
        "detail": "000000.wxPython_04",
        "documentation": {}
    },
    {
        "label": "ContextFileDialog",
        "kind": 6,
        "importPath": "000000.wxPython_11",
        "description": "000000.wxPython_11",
        "peekOfCode": "class ContextFileDialog(wx.FileDialog):\n    \"\"\"\"\"\"\n    def __enter__(self):\n        \"\"\"\"\"\"\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.Destroy()\nclass MyPanel(wx.Panel):\n    \"\"\"\"\"\"\n    def __init__(self, parent):",
        "detail": "000000.wxPython_11",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.wxPython_11",
        "description": "000000.wxPython_11",
        "peekOfCode": "class MyPanel(wx.Panel):\n    \"\"\"\"\"\"\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\n        btn = wx.Button(self, label='Open File')\n        btn.Bind(wx.EVT_BUTTON, self.onOpenFile)\n    def onOpenFile(self, event):\n        \"\"\"\"\"\"\n        wildcard = \"Python source (*.py)|*.py|\" \\",
        "detail": "000000.wxPython_11",
        "documentation": {}
    },
    {
        "label": "MyFrame",
        "kind": 6,
        "importPath": "000000.wxPython_11",
        "description": "000000.wxPython_11",
        "peekOfCode": "class MyFrame(wx.Frame):\n    \"\"\"\"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title='wxPython Contexts')\n        panel = MyPanel(self)\n        self.Show()\nif __name__ == '__main__':\n    app = wx.App(False)\n    frame = MyFrame()",
        "detail": "000000.wxPython_11",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.wxPython_13",
        "description": "000000.wxPython_13",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, wx.ID_ANY, title='The About Box')\n        # Add a panel so it looks correct on all platforms\n        self.panel = wx.Panel(self, wx.ID_ANY)\n        # Создаём кнопки\n        aboutBtn = wx.Button(self.panel, wx.ID_ANY, \"Open wx.AboutBox\")\n        self.Bind(wx.EVT_BUTTON, self.onAboutDlg, aboutBtn)\n        aboutHtmlBtn = wx.Button(self.panel, wx.ID_ANY, \"Open HtmlAboutBox\")\n        self.Bind(wx.EVT_BUTTON, self.onAboutHtmlDlg, aboutHtmlBtn)",
        "detail": "000000.wxPython_13",
        "documentation": {}
    },
    {
        "label": "AboutDlg",
        "kind": 6,
        "importPath": "000000.wxPython_13",
        "description": "000000.wxPython_13",
        "peekOfCode": "class AboutDlg(wx.Frame):\n    def __init__(self, parent):\n        wx.Frame.__init__(self, parent, wx.ID_ANY, title=\"About\", size=(400,400))\n        html = wxHTML(self)\n        html.SetPage(\n            ''\n            \"<h2>About the About Tutorial</h2>\"\n            \"<p>This about box is for demo purposes only. It was created in June 2006\"\n            \"by Mike Driscoll.</p>\"\n            \"<p><b>Software used in making this demo:</h3></p>\"",
        "detail": "000000.wxPython_13",
        "documentation": {}
    },
    {
        "label": "wxHTML",
        "kind": 6,
        "importPath": "000000.wxPython_13",
        "description": "000000.wxPython_13",
        "peekOfCode": "class wxHTML(wx.html.HtmlWindow):\n    def OnLinkClicked(self, link):\n        webbrowser.open(link.GetHref())\n# Запускаем программу\nif __name__ == '__main__':\n    app = wx.App(False)\n    frame = MyForm().Show()\n    app.MainLoop()",
        "detail": "000000.wxPython_13",
        "documentation": {}
    },
    {
        "label": "LoginDialog",
        "kind": 6,
        "importPath": "000000.wxPython_14",
        "description": "000000.wxPython_14",
        "peekOfCode": "class LoginDialog(wx.Dialog):\n    \"\"\"\n    Class to define login dialog\n    \"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Dialog.__init__(self, None, title=\"Login\")\n        self.logged_in = False\n        # user info\n        user_sizer = wx.BoxSizer(wx.HORIZONTAL)",
        "detail": "000000.wxPython_14",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.wxPython_14",
        "description": "000000.wxPython_14",
        "peekOfCode": "class MyPanel(wx.Panel):\n    \"\"\"\"\"\"\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\nclass MainFrame(wx.Frame):\n    \"\"\"\"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Main App\")",
        "detail": "000000.wxPython_14",
        "documentation": {}
    },
    {
        "label": "MainFrame",
        "kind": 6,
        "importPath": "000000.wxPython_14",
        "description": "000000.wxPython_14",
        "peekOfCode": "class MainFrame(wx.Frame):\n    \"\"\"\"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Main App\")\n        panel = MyPanel(self)\n        # Ask user to login\n        dlg = LoginDialog()\n        dlg.ShowModal()\n        authenticated = dlg.logged_in",
        "detail": "000000.wxPython_14",
        "documentation": {}
    },
    {
        "label": "LoginDialog",
        "kind": 6,
        "importPath": "000000.wxPython_14_1",
        "description": "000000.wxPython_14_1",
        "peekOfCode": "class LoginDialog(wx.Dialog):\n    \"\"\"\n    Класс для определения диалога логина\n    \"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Dialog.__init__(self, None, title=\"Login\")\n        # user info\n        user_sizer = wx.BoxSizer(wx.HORIZONTAL)\n        user_lbl = wx.StaticText(self, label=\"Username:\")",
        "detail": "000000.wxPython_14_1",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.wxPython_14_1",
        "description": "000000.wxPython_14_1",
        "peekOfCode": "class MyPanel(wx.Panel):\n    \"\"\"\"\"\"\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\nclass MainFrame(wx.Frame):\n    \"\"\"\"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Main App\")",
        "detail": "000000.wxPython_14_1",
        "documentation": {}
    },
    {
        "label": "MainFrame",
        "kind": 6,
        "importPath": "000000.wxPython_14_1",
        "description": "000000.wxPython_14_1",
        "peekOfCode": "class MainFrame(wx.Frame):\n    \"\"\"\"\"\"\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Main App\")\n        panel = MyPanel(self)\n        pub.subscribe(self.myListener, \"frameListener\")\n        # Ask user to login\n        dlg = LoginDialog()\n        dlg.ShowModal()",
        "detail": "000000.wxPython_14_1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "000000.wxTest_01",
        "description": "000000.wxTest_01",
        "peekOfCode": "app = wx.App()\nframe = wx.Frame(None, -1, 'simple.py')\nframe.Show()\napp.MainLoop()",
        "detail": "000000.wxTest_01",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "000000.wxTest_01",
        "description": "000000.wxTest_01",
        "peekOfCode": "frame = wx.Frame(None, -1, 'simple.py')\nframe.Show()\napp.MainLoop()",
        "detail": "000000.wxTest_01",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.WxWidgets_1",
        "description": "000000.WxWidgets_1",
        "peekOfCode": "class MyPanel(wx.Panel):\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\n        self.number_of_buttons = 0\n        self.frame = parent\n        self.mainSizer = wx.BoxSizer(wx.VERTICAL)\n        controlSizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.widgetSizer = wx.BoxSizer(wx.VERTICAL)\n        self.addButton = wx.Button(self, label=\"Add\")",
        "detail": "000000.WxWidgets_1",
        "documentation": {}
    },
    {
        "label": "MyFrame",
        "kind": 6,
        "importPath": "000000.WxWidgets_1",
        "description": "000000.WxWidgets_1",
        "peekOfCode": "class MyFrame(wx.Frame):\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, parent=None, title=\"Add / Remove Buttons\")\n        self.fSizer = wx.BoxSizer(wx.VERTICAL)\n        panel = MyPanel(self)\n        self.fSizer.Add(panel, 1, wx.EXPAND)\n        self.SetSizer(self.fSizer)\n        self.Fit()\n        self.Show()",
        "detail": "000000.WxWidgets_1",
        "documentation": {}
    },
    {
        "label": "MyForm",
        "kind": 6,
        "importPath": "000000.WxWidgets_About",
        "description": "000000.WxWidgets_About",
        "peekOfCode": "class MyForm(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, wx.ID_ANY, title='The About Box')\n        # Add a panel so it looks correct on all platforms\n        self.panel = wx.Panel(self, wx.ID_ANY)\n        # Создаём кнопки\n        aboutBtn = wx.Button(self.panel, wx.ID_ANY, \"Open wx.AboutBox\")\n        self.Bind(wx.EVT_BUTTON, self.onAboutDlg, aboutBtn)\n        aboutHtmlBtn = wx.Button(self.panel, wx.ID_ANY, \"Open HtmlAboutBox\")\n        self.Bind(wx.EVT_BUTTON, self.onAboutHtmlDlg, aboutHtmlBtn)",
        "detail": "000000.WxWidgets_About",
        "documentation": {}
    },
    {
        "label": "AboutDlg",
        "kind": 6,
        "importPath": "000000.WxWidgets_About",
        "description": "000000.WxWidgets_About",
        "peekOfCode": "class AboutDlg(wx.Frame):\n    def __init__(self, parent):\n        wx.Frame.__init__(self, parent, wx.ID_ANY, title=\"About\", size=(400,400))\n        html = wxHTML(self)\n        html.SetPage(\n            ''\n            \"<h2>About the About Tutorial</h2>\"\n            \"<p>This about box is for demo purposes only. It was created in June 2006\"\n            \"by Mike Driscoll.</p>\"\n            \"<p><b>Software used in making this demo:</h3></p>\"",
        "detail": "000000.WxWidgets_About",
        "documentation": {}
    },
    {
        "label": "wxHTML",
        "kind": 6,
        "importPath": "000000.WxWidgets_About",
        "description": "000000.WxWidgets_About",
        "peekOfCode": "class wxHTML(wx.html.HtmlWindow):\n    def OnLinkClicked(self, link):\n        webbrowser.open(link.GetHref())\n# Запускаем программу\nif __name__ == '__main__':\n    app = wx.App(False)\n    frame = MyForm().Show()\n    app.MainLoop()",
        "detail": "000000.WxWidgets_About",
        "documentation": {}
    },
    {
        "label": "PreferencesDialog",
        "kind": 6,
        "importPath": "000000.WxWidgets_Config",
        "description": "000000.WxWidgets_Config",
        "peekOfCode": "class PreferencesDialog(wx.Dialog):\n    \"\"\"\n    Создаёт и отображает диалог с параметрами, позволяющий пользователю\n    изменить несколько настроек.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Инициализация диалога\n        \"\"\"\n        wx.Dialog.__init__(self, None, title='Preferences',",
        "detail": "000000.WxWidgets_Config",
        "documentation": {}
    },
    {
        "label": "MyApp",
        "kind": 6,
        "importPath": "000000.WxWidgets_Config",
        "description": "000000.WxWidgets_Config",
        "peekOfCode": "class MyApp(wx.App):\n    \"\"\"\"\"\"\n    def OnInit(self):\n        \"\"\"Constructor\"\"\"\n        dlg = PreferencesDialog()\n        dlg.ShowModal()\n        dlg.Destroy()\n        return True\nif __name__ == \"__main__\":\n    app = MyApp(False)",
        "detail": "000000.WxWidgets_Config",
        "documentation": {}
    },
    {
        "label": "Fader",
        "kind": 6,
        "importPath": "000000.WxWidgets_Fade",
        "description": "000000.WxWidgets_Fade",
        "peekOfCode": "class Fader(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, title='Fader Example')\n        self.amount = 5\n        self.delta = 5\n        #panel = wx.Panel(self, wx.ID_ANY)\n        wx.Panel(self, wx.ID_ANY)\n        self.SetTransparent(self.amount)\n        # Fader Timer\n        self.timer = wx.Timer(self, wx.ID_ANY)",
        "detail": "000000.WxWidgets_Fade",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.WxWidgets_Log",
        "description": "000000.WxWidgets_Log",
        "peekOfCode": "class MyPanel(wx.Panel):\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        # создадим панель в которую помести окно вывода и кнопку для генерации событий\n        wx.Panel.__init__(self, parent)\n        self.logText = wx.TextCtrl(\n            self,\n            style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.TE_RICH)\n        btn = wx.Button(self, label=\"Press Me\")\n        btn.Bind(wx.EVT_BUTTON, self.onPress)",
        "detail": "000000.WxWidgets_Log",
        "documentation": {}
    },
    {
        "label": "MyFrame",
        "kind": 6,
        "importPath": "000000.WxWidgets_Log",
        "description": "000000.WxWidgets_Log",
        "peekOfCode": "class MyFrame(wx.Frame):\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Logging test\")\n        #panel = MyPanel(self)\n        MyPanel(self)\n        self.Show()\nif __name__ == '__main__':\n    app = wx.App(False)\n    frm = MyFrame()",
        "detail": "000000.WxWidgets_Log",
        "documentation": {}
    },
    {
        "label": "MyPanel",
        "kind": 6,
        "importPath": "000000.WxWidgets_Log2",
        "description": "000000.WxWidgets_Log2",
        "peekOfCode": "class MyPanel(wx.Panel):\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        # создадим панель в которую помести окно вывода, чебокс инвертировать и кнопку для генерации событий\n        wx.Panel.__init__(self, parent)\n        # десь мы будем хранить все сообщения\n        self.cache_msg = list()\n        self.logText = wx.TextCtrl(\n            self,\n            style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.TE_RICH)",
        "detail": "000000.WxWidgets_Log2",
        "documentation": {}
    },
    {
        "label": "MyFrame",
        "kind": 6,
        "importPath": "000000.WxWidgets_Log2",
        "description": "000000.WxWidgets_Log2",
        "peekOfCode": "class MyFrame(wx.Frame):\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Logging test\")\n        panel = MyPanel(self)\n        self.Show()\ndef main():\n    app = wx.App(False)\n    frame = MyFrame()\n    app.MainLoop()",
        "detail": "000000.WxWidgets_Log2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "000000.WxWidgets_Log2",
        "description": "000000.WxWidgets_Log2",
        "peekOfCode": "def main():\n    app = wx.App(False)\n    frame = MyFrame()\n    app.MainLoop()\nif __name__ == \"__main__\":\n    main()",
        "detail": "000000.WxWidgets_Log2",
        "documentation": {}
    },
    {
        "label": "TextEdit",
        "kind": 6,
        "importPath": "000000.WxWidgets_simpleEditor",
        "description": "000000.WxWidgets_simpleEditor",
        "peekOfCode": "class TextEdit(wx.Frame):\n    def __init__(self, parent, title):\n        wx.Frame.__init__(self, parent, wx.ID_ANY, title, size=(520, 340))\n        menuBar = wx.MenuBar()\n        menuFile = wx.Menu()\n        menuBar.Append(menuFile, \"&File\")\n        menuFile.Append(1, \"&Open\")\n        menuFile.Append(2, \"&Save\")\n        menuFile.Append(3, \"&Quit\")\n        self.SetMenuBar(menuBar)",
        "detail": "000000.WxWidgets_simpleEditor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "000000.WxWidgets_simpleEditor",
        "description": "000000.WxWidgets_simpleEditor",
        "peekOfCode": "def main():\n    app = wx.App(False)\n    view = TextEdit(None, \"TextEdit\")\n    app.MainLoop()\nif __name__ == '__main__':\n    main()",
        "detail": "000000.WxWidgets_simpleEditor",
        "documentation": {}
    },
    {
        "label": "RemoteFile",
        "kind": 6,
        "importPath": "1.1",
        "description": "1.1",
        "peekOfCode": "class RemoteFile:\n    def __init__(self, filename, mode='r', server_ip='127.0.0.1', port='4444'):\n        self.__filename = filename\n        self.__mode = mode\n        self.ip = server_ip\n        self.__server_ip = self.ip\n        self.__port = port\n        self.__fp = None\n    # custom write method\n    def remote_write(self, text: str):",
        "detail": "1.1",
        "documentation": {}
    },
    {
        "label": "Euro",
        "kind": 6,
        "importPath": "1.2",
        "description": "1.2",
        "peekOfCode": "class Euro:\n    \"\"\"\n    Класс должен определить один из:\n    __lt__(), __le__(), __gt__(), или же __ge__()\n    Кроме того, класс должен предоставить __eq__() метод\n    \"\"\"\n    def __init__(self, value: int):\n        self.__value = value\n    # Оператор ==\n    def __eq__(self, other):",
        "detail": "1.2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "1.2",
        "description": "1.2",
        "peekOfCode": "a = Euro(100)\nb = Euro(200)\nprint(a > b)\nprint(a < b)\nprint(a == b)\nprint(a != b)\nprint(a >= b)\nprint(a <= b)\na.hyperinflation()\nb.hyperinflation()",
        "detail": "1.2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "1.2",
        "description": "1.2",
        "peekOfCode": "b = Euro(200)\nprint(a > b)\nprint(a < b)\nprint(a == b)\nprint(a != b)\nprint(a >= b)\nprint(a <= b)\na.hyperinflation()\nb.hyperinflation()\nprint(a == b)",
        "detail": "1.2",
        "documentation": {}
    },
    {
        "label": "stupid_example",
        "kind": 2,
        "importPath": "1.3",
        "description": "1.3",
        "peekOfCode": "def stupid_example():\n    res = 0\n    a = [num for num in range(1_000_000)]\n    b = [num for num in range(1_000_000)]\n    for index in range(len(a)):\n        res = a[index] + b[index]\n    print(res)\n@check_time\ndef zip_example():\n    res = 0",
        "detail": "1.3",
        "documentation": {}
    },
    {
        "label": "zip_example",
        "kind": 2,
        "importPath": "1.3",
        "description": "1.3",
        "peekOfCode": "def zip_example():\n    res = 0\n    a = [num for num in range(1_000_000)]\n    b = [num for num in range(1_000_000)]\n    for a_val, b_val in zip(a, b):\n        res = a_val + b_val\n    print(res)\nif __name__ == \"__main__\":\n    stupid_example()\n    zip_example()",
        "detail": "1.3",
        "documentation": {}
    },
    {
        "label": "fill_users_list",
        "kind": 2,
        "importPath": "1.4",
        "description": "1.4",
        "peekOfCode": "def fill_users_list():\n    global USERS_BUY\n    temp = [(\"confirmed\", random.randint(10, 200)) for user in range(1_000_000)]\n    USERS_BUY += temp\n@check_time\ndef cycle_example():\n    res = 0\n    for user in USERS_BUY:\n        if user[0] == \"confirmed\":\n            res += user[1]",
        "detail": "1.4",
        "documentation": {}
    },
    {
        "label": "cycle_example",
        "kind": 2,
        "importPath": "1.4",
        "description": "1.4",
        "peekOfCode": "def cycle_example():\n    res = 0\n    for user in USERS_BUY:\n        if user[0] == \"confirmed\":\n            res += user[1]\n    print(res)\n@check_time\ndef list_example():\n    balance_list = [user[1] for user in USERS_BUY if user[0] == \"confirmed\"]\n    res = sum(balance_list)",
        "detail": "1.4",
        "documentation": {}
    },
    {
        "label": "list_example",
        "kind": 2,
        "importPath": "1.4",
        "description": "1.4",
        "peekOfCode": "def list_example():\n    balance_list = [user[1] for user in USERS_BUY if user[0] == \"confirmed\"]\n    res = sum(balance_list)\n    print(res)\n@check_time\ndef generator_example():\n    balance_list = (user[1] for user in USERS_BUY if user[0] == \"confirmed\")\n    res = sum(balance_list)\n    print(res)\nif __name__ == \"__main__\":",
        "detail": "1.4",
        "documentation": {}
    },
    {
        "label": "generator_example",
        "kind": 2,
        "importPath": "1.4",
        "description": "1.4",
        "peekOfCode": "def generator_example():\n    balance_list = (user[1] for user in USERS_BUY if user[0] == \"confirmed\")\n    res = sum(balance_list)\n    print(res)\nif __name__ == \"__main__\":\n    fill_users_list()\n    cycle_example()\n    list_example()\n    generator_example()",
        "detail": "1.4",
        "documentation": {}
    },
    {
        "label": "USERS_BUY",
        "kind": 5,
        "importPath": "1.4",
        "description": "1.4",
        "peekOfCode": "USERS_BUY = [\n    (\"confirmed\", 100),\n    (\"unconfirmed\", 500),\n    (\"confirmed\", 900),\n]\ndef fill_users_list():\n    global USERS_BUY\n    temp = [(\"confirmed\", random.randint(10, 200)) for user in range(1_000_000)]\n    USERS_BUY += temp\n@check_time",
        "detail": "1.4",
        "documentation": {}
    },
    {
        "label": "summary",
        "kind": 2,
        "importPath": "1.5",
        "description": "1.5",
        "peekOfCode": "def summary(a, b):\n    \"\"\"\n    Возвращает сумму двух чисел.\n    >>> [summary(x, x) for x in range(10)]\n    [0, 2, 4, 6, 8, 10, 1112, 14, 16, 18]\n    >>> summary(10, 20)\n    30\n    \"\"\"\n    return a + b\nif __name__ == \"__main__\":",
        "detail": "1.5",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "1.6",
        "description": "1.6",
        "peekOfCode": "key = \"space\"\nreadline.parse_and_bind(f\"{key}: complete\")",
        "detail": "1.6",
        "documentation": {}
    },
    {
        "label": "lowqual_implementation",
        "kind": 2,
        "importPath": "1.7",
        "description": "1.7",
        "peekOfCode": "def lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()\nprint('\\n\\n')",
        "detail": "1.7",
        "documentation": {}
    },
    {
        "label": "implementation_of_normal_boys",
        "kind": 2,
        "importPath": "1.7",
        "description": "1.7",
        "peekOfCode": "def implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()\nprint('\\n\\n')\nimplementation_of_normal_boys()",
        "detail": "1.7",
        "documentation": {}
    },
    {
        "label": "list_1",
        "kind": 5,
        "importPath": "1.7",
        "description": "1.7",
        "peekOfCode": "list_1 = [1, 2]\nlist_2 = [5, 6]\nlist_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):",
        "detail": "1.7",
        "documentation": {}
    },
    {
        "label": "list_2",
        "kind": 5,
        "importPath": "1.7",
        "description": "1.7",
        "peekOfCode": "list_2 = [5, 6]\nlist_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)",
        "detail": "1.7",
        "documentation": {}
    },
    {
        "label": "list_3",
        "kind": 5,
        "importPath": "1.7",
        "description": "1.7",
        "peekOfCode": "list_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()",
        "detail": "1.7",
        "documentation": {}
    },
    {
        "label": "func_for_else",
        "kind": 2,
        "importPath": "2.1",
        "description": "2.1",
        "peekOfCode": "def func_for_else():\n    numbers = [1, 2, 3, 4, 5]\n    for num in numbers:\n        if num == 0:\n            print(\"The list contains a zero.\")\n            break\n    else:\n        print(\"The list does not contain a zero.\")\ndef func_while_else():\n    count = 0",
        "detail": "2.1",
        "documentation": {}
    },
    {
        "label": "func_while_else",
        "kind": 2,
        "importPath": "2.1",
        "description": "2.1",
        "peekOfCode": "def func_while_else():\n    count = 0\n    while count < 5:\n        print(\"Count is\", count)\n        count += 1\n    else:\n        print(\"Count reached 5.\")\nif __name__ == \"__main__\":\n    func_for_else()\n    func_while_else()",
        "detail": "2.1",
        "documentation": {}
    },
    {
        "label": "search_for_else",
        "kind": 2,
        "importPath": "2.2",
        "description": "2.2",
        "peekOfCode": "def search_for_else():\n    for element in my_list:\n        if element == search_element:\n            print(\"Element found!\")\n            break\n    else:\n        print(\"Element not found.\")\ndef search_default():\n    available = False\n    for element in my_list:",
        "detail": "2.2",
        "documentation": {}
    },
    {
        "label": "search_default",
        "kind": 2,
        "importPath": "2.2",
        "description": "2.2",
        "peekOfCode": "def search_default():\n    available = False\n    for element in my_list:\n        if element == search_element:\n            available = True\n            print(\"Element found!\")\n            break\n    if not available:\n        print(\"Element not found.\")\nif __name__ == \"__main__\":",
        "detail": "2.2",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "2.2",
        "description": "2.2",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\nsearch_element = 6\ndef search_for_else():\n    for element in my_list:\n        if element == search_element:\n            print(\"Element found!\")\n            break\n    else:\n        print(\"Element not found.\")\ndef search_default():",
        "detail": "2.2",
        "documentation": {}
    },
    {
        "label": "search_element",
        "kind": 5,
        "importPath": "2.2",
        "description": "2.2",
        "peekOfCode": "search_element = 6\ndef search_for_else():\n    for element in my_list:\n        if element == search_element:\n            print(\"Element found!\")\n            break\n    else:\n        print(\"Element not found.\")\ndef search_default():\n    available = False",
        "detail": "2.2",
        "documentation": {}
    },
    {
        "label": "validate_user_input",
        "kind": 2,
        "importPath": "2.3",
        "description": "2.3",
        "peekOfCode": "def validate_user_input():\n    user_input = \"abc123\"\n    for symbol in user_input:\n        if not symbol.isalpha():\n            print(\"Input contains invalid characters.\")\n            break\n    else:\n        print(\"Input is valid.\")\ndef validate_user_input_2():\n    data = [1, 2, 3, 4, 5]",
        "detail": "2.3",
        "documentation": {}
    },
    {
        "label": "validate_user_input_2",
        "kind": 2,
        "importPath": "2.3",
        "description": "2.3",
        "peekOfCode": "def validate_user_input_2():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        if item < 0 or item > 10:\n            print(\"Invalid data detected!\")\n            break\n    else:\n        print(\"All data is valid.\")\nif __name__ == \"__main__\":\n    validate_user_input()",
        "detail": "2.3",
        "documentation": {}
    },
    {
        "label": "search_for",
        "kind": 2,
        "importPath": "2.4",
        "description": "2.4",
        "peekOfCode": "def search_for():\n    if search_element in my_list:\n        print(\"Element found!\")\n    else:\n        print(\"Element not found.\")\nif __name__ == \"__main__\":\n    search_for()",
        "detail": "2.4",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "2.4",
        "description": "2.4",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\nsearch_element = 6\ndef search_for():\n    if search_element in my_list:\n        print(\"Element found!\")\n    else:\n        print(\"Element not found.\")\nif __name__ == \"__main__\":\n    search_for()",
        "detail": "2.4",
        "documentation": {}
    },
    {
        "label": "search_element",
        "kind": 5,
        "importPath": "2.4",
        "description": "2.4",
        "peekOfCode": "search_element = 6\ndef search_for():\n    if search_element in my_list:\n        print(\"Element found!\")\n    else:\n        print(\"Element not found.\")\nif __name__ == \"__main__\":\n    search_for()",
        "detail": "2.4",
        "documentation": {}
    },
    {
        "label": "data_strings",
        "kind": 5,
        "importPath": "2.5",
        "description": "2.5",
        "peekOfCode": "data_strings = [\"1\", \"2\", \"3\"]\nparsed_data = []\nfor data_str in data_strings:\n    try:\n        value = int(data_str)\n        parsed_data.append(value)\n    except ValueError:\n        print(f\"Error parsing string '{data_str}'\")\n        break\nelse:",
        "detail": "2.5",
        "documentation": {}
    },
    {
        "label": "parsed_data",
        "kind": 5,
        "importPath": "2.5",
        "description": "2.5",
        "peekOfCode": "parsed_data = []\nfor data_str in data_strings:\n    try:\n        value = int(data_str)\n        parsed_data.append(value)\n    except ValueError:\n        print(f\"Error parsing string '{data_str}'\")\n        break\nelse:\n    print(\"Job completed.\")",
        "detail": "2.5",
        "documentation": {}
    },
    {
        "label": "add_transaction",
        "kind": 2,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "def add_transaction():\n    if type_combobox.get() and amount_entry.get():\n        try:\n            transaction_type = type_combobox.get()\n            amount = float(amount_entry.get())\n            comment = comment_entry.get()\n            cur.execute(\"\"\"\n            insert into transactions (type, amount, comment)\n            values (?,?,?)\n            \"\"\", (transaction_type, amount, comment))",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "view_data",
        "kind": 2,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "def view_data():\n    view_window = tkinter.Toplevel(root)\n    view_window.title(\"Просмотр транзакций\")\n    treeview = ttk.Treeview(view_window)\n    treeview.pack()\n    treeview[\"columns\"] = (\"type\", \"amount\", \"comment\")\n    treeview.column(\"#0\", width=0, stretch=tkinter.NO)\n    treeview.column(\"type\", width=100, anchor=tkinter.W)\n    treeview.column(\"amount\", anchor=tkinter.E, width=100)\n    treeview.column(\"comment\", anchor=tkinter.W, width=200)",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "connection = sqlite3.connect('finance.db')\ncur = connection.cursor()\ncur.execute(\"\"\"\n    Create table if not exists transactions (\n        id integer primary key autoincrement,\n        type text,\n        amount real,\n        comment text\n        )\n\"\"\")",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "cur = connection.cursor()\ncur.execute(\"\"\"\n    Create table if not exists transactions (\n        id integer primary key autoincrement,\n        type text,\n        amount real,\n        comment text\n        )\n\"\"\")\nconnection.commit()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "root = tkinter.Tk()\nroot.title(\"Домашняя бухгалтерия\")\nroot.geometry('200x280')\nroot.resizable(True, False)\nroot.wm_minsize(200, 280)\ntype_label = tkinter.Label(root, text=\"Тип:\")\ntype_label.pack(pady=10)\ntype_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = tkinter.Label(root, text=\"Сумма:\")",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "type_label",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "type_label = tkinter.Label(root, text=\"Тип:\")\ntype_label.pack(pady=10)\ntype_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = tkinter.Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = tkinter.Entry(root)\namount_entry.pack()\ncomment_label = tkinter.Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "type_combobox",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "type_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = tkinter.Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = tkinter.Entry(root)\namount_entry.pack()\ncomment_label = tkinter.Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = tkinter.Entry(root)\ncomment_entry.pack()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "amount_label",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "amount_label = tkinter.Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = tkinter.Entry(root)\namount_entry.pack()\ncomment_label = tkinter.Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = tkinter.Entry(root)\ncomment_entry.pack()\nadd_button = tkinter.Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "amount_entry",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "amount_entry = tkinter.Entry(root)\namount_entry.pack()\ncomment_label = tkinter.Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = tkinter.Entry(root)\ncomment_entry.pack()\nadd_button = tkinter.Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = tkinter.Button(root, text=\"Посмотреть транзакции\", command=view_data)\nview_button.pack()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "comment_label",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "comment_label = tkinter.Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = tkinter.Entry(root)\ncomment_entry.pack()\nadd_button = tkinter.Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = tkinter.Button(root, text=\"Посмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "comment_entry",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "comment_entry = tkinter.Entry(root)\ncomment_entry.pack()\nadd_button = tkinter.Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = tkinter.Button(root, text=\"Посмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "add_button",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "add_button = tkinter.Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = tkinter.Button(root, text=\"Посмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "view_button",
        "kind": 5,
        "importPath": "Accounting.Accounting",
        "description": "Accounting.Accounting",
        "peekOfCode": "view_button = tkinter.Button(root, text=\"Посмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.Accounting",
        "documentation": {}
    },
    {
        "label": "add_transaction",
        "kind": 2,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "def add_transaction():\n    if type_combobox.get() and amount_entry.get():\n        try:\n            transaction_type = type_combobox.get()\n            amount = float(amount_entry.get())\n            comment = comment_entry.get()\n            cur.execute(\"\"\"\n                INSERT INTO transactions (type, amount, comment)\n                VALUES (?, ?, ?)\n                \"\"\", (transaction_type, amount, comment))",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "view_data",
        "kind": 2,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "def view_data():\n    view_window = Toplevel(root)\n    view_window.title(\"Просмотр транзакций\")\n    treeview = ttk.Treeview(view_window)\n    treeview.pack()\n    treeview[\"columns\"] = (\"type\", \"amount\", \"comment\")\n    treeview.column(\"#0\", width=0, stretch=NO)\n    treeview.column(\"type\", anchor=W, width=100)\n    treeview.column(\"amount\", anchor=E, width=100)\n    treeview.column(\"comment\", anchor=W, width=200)",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "connection = sqlite3.connect('finance.db')\ncur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )\n\"\"\")",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "cur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )\n\"\"\")\nconnection.commit()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "root = Tk()\nroot.title(\"Домашняя Бухгалтерия\")\nroot.geometry('200x280')\ntype_label = Label(root, text=\"Тип:\")\ntype_label.pack(pady=10)\ntype_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = Entry(root)",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "type_label",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "type_label = Label(root, text=\"Тип:\")\ntype_label.pack(pady=10)\ntype_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = Entry(root)\namount_entry.pack()\ncomment_label = Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "type_combobox",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "type_combobox = ttk.Combobox(root, values=[\"Доход\", \"Расход\"])\ntype_combobox.pack()\namount_label = Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = Entry(root)\namount_entry.pack()\ncomment_label = Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = Entry(root)\ncomment_entry.pack()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "amount_label",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "amount_label = Label(root, text=\"Сумма:\")\namount_label.pack(pady=10)\namount_entry = Entry(root)\namount_entry.pack()\ncomment_label = Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = Entry(root)\ncomment_entry.pack()\nadd_button = Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "amount_entry",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "amount_entry = Entry(root)\namount_entry.pack()\ncomment_label = Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = Entry(root)\ncomment_entry.pack()\nadd_button = Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = Button(root, text=\"Просмотреть транзакции\", command=view_data)\nview_button.pack()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "comment_label",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "comment_label = Label(root, text=\"Комментарий:\")\ncomment_label.pack(pady=10)\ncomment_entry = Entry(root)\ncomment_entry.pack()\nadd_button = Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = Button(root, text=\"Просмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "comment_entry",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "comment_entry = Entry(root)\ncomment_entry.pack()\nadd_button = Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = Button(root, text=\"Просмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "add_button",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "add_button = Button(root, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10)\nview_button = Button(root, text=\"Просмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "view_button",
        "kind": 5,
        "importPath": "Accounting.home accounting",
        "description": "Accounting.home accounting",
        "peekOfCode": "view_button = Button(root, text=\"Просмотреть транзакции\", command=view_data)\nview_button.pack()\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home accounting",
        "documentation": {}
    },
    {
        "label": "add_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "def add_transaction():\n    if type_combobox.get() and amount_entry.get():\n        try:\n            transaction_type = type_combobox.get()\n            amount = float(amount_entry.get())\n            comment = comment_entry.get()\n            date = date_entry.get_date()\n            cur.execute(\"\"\"\n                INSERT INTO transactions (type, amount, comment)\n                VALUES (?, ?, ?)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "delete_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "def delete_transaction():\n    selected_item = treeview.selection()\n    if selected_item:\n        item_values = treeview.item(selected_item, \"values\")\n        transaction_id = item_values[0]\n        cur.execute(\"DELETE FROM transactions WHERE id =?\", (transaction_id,))\n        connection.commit()\n        treeview.delete(selected_item)\n        messagebox.showinfo(\"Успех\", \"Транзакция успешно удалена!\")\n    else:",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "delete_all_transactions",
        "kind": 2,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "def delete_all_transactions():\n    confirm = messagebox.askyesno(\"Предупреждение\", \"Вы уверены, что хотите удалить все транзакции?\") == YES\n    if confirm:\n        cur.execute(\"DELETE FROM transactions\")\n        connection.commit()\n        treeview.delete(*treeview.get_children())\n        messagebox.showinfo(\"Успех\", \"Все транзакции успешно удалены!\")\ndef edit_transaction():\n    selected_item = treeview.selection()\n    if not selected_item:",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "edit_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "def edit_transaction():\n    selected_item = treeview.selection()\n    if not selected_item:\n        messagebox.showinfo('Транзакция не выбрана!',\n                            'Выберите транзакцию для редактирования!')\n        return\n    transaction_id = treeview.set(selected_item, \"#1\")\n    date = date_entry.get_date()\n    transaction_type = type_combobox.get()\n    amount = float(amount_entry.get())",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "on_row_click",
        "kind": 2,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "def on_row_click(event):\n    item = treeview.selection()\n    values = treeview.item(item, 'values')\n    date_entry.delete(0, END)\n    date_entry.insert(0, values[1])\n    type_combobox.set(values[2])\n    amount_entry.delete(0, END)\n    amount_entry.insert(0, values[3])\n    comment_entry.delete(0, END)\n    comment_entry.insert(0, values[4])",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "connection = sqlite3.connect('finance.db')\ncur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        date DATE NOT NULL,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "cur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        date DATE NOT NULL,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )\n\"\"\")",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "root = Tk()\nroot.title(\"Домашняя Бухгалтерия\")\nroot.geometry('700x350')\nroot.resizable(False, False)  # не разрешаем растягивать окно\nleft_frame = Frame(root, bd=2, relief=SUNKEN)\nleft_frame.pack(side=LEFT, anchor=N, pady=10)\ndate_label = Label(left_frame, text=\"Дата:\")\ndate_label.pack(pady=10, padx=10, anchor=W)\ndate_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "left_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "left_frame = Frame(root, bd=2, relief=SUNKEN)\nleft_frame.pack(side=LEFT, anchor=N, pady=10)\ndate_label = Label(left_frame, text=\"Дата:\")\ndate_label.pack(pady=10, padx=10, anchor=W)\ndate_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(pady=10, padx=10, anchor=W)\ntype_label = Label(left_frame, text=\"Тип:\")\ntype_label.pack(pady=10, anchor=W)\ntype_combobox = ttk.Combobox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(pady=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "date_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "date_label = Label(left_frame, text=\"Дата:\")\ndate_label.pack(pady=10, padx=10, anchor=W)\ndate_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(pady=10, padx=10, anchor=W)\ntype_label = Label(left_frame, text=\"Тип:\")\ntype_label.pack(pady=10, anchor=W)\ntype_combobox = ttk.Combobox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(pady=10, anchor=W)\namount_label = Label(left_frame, text=\"Сумма:\")\namount_label.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "date_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "date_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(pady=10, padx=10, anchor=W)\ntype_label = Label(left_frame, text=\"Тип:\")\ntype_label.pack(pady=10, anchor=W)\ntype_combobox = ttk.Combobox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(pady=10, anchor=W)\namount_label = Label(left_frame, text=\"Сумма:\")\namount_label.pack(pady=10, padx=10, anchor=W)\namount_entry = Entry(left_frame)\namount_entry.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "type_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "type_label = Label(left_frame, text=\"Тип:\")\ntype_label.pack(pady=10, anchor=W)\ntype_combobox = ttk.Combobox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(pady=10, anchor=W)\namount_label = Label(left_frame, text=\"Сумма:\")\namount_label.pack(pady=10, padx=10, anchor=W)\namount_entry = Entry(left_frame)\namount_entry.pack(pady=10, padx=10, anchor=W)\ncomment_label = Label(left_frame, text=\"Комментарий:\")\ncomment_label.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "type_combobox",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "type_combobox = ttk.Combobox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(pady=10, anchor=W)\namount_label = Label(left_frame, text=\"Сумма:\")\namount_label.pack(pady=10, padx=10, anchor=W)\namount_entry = Entry(left_frame)\namount_entry.pack(pady=10, padx=10, anchor=W)\ncomment_label = Label(left_frame, text=\"Комментарий:\")\ncomment_label.pack(pady=10, padx=10, anchor=W)\ncomment_entry = Entry(left_frame)\ncomment_entry.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "amount_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "amount_label = Label(left_frame, text=\"Сумма:\")\namount_label.pack(pady=10, padx=10, anchor=W)\namount_entry = Entry(left_frame)\namount_entry.pack(pady=10, padx=10, anchor=W)\ncomment_label = Label(left_frame, text=\"Комментарий:\")\ncomment_label.pack(pady=10, padx=10, anchor=W)\ncomment_entry = Entry(left_frame)\ncomment_entry.pack(pady=10, padx=10, anchor=W)\nadd_button = Button(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10, padx=10, anchor=W)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "amount_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "amount_entry = Entry(left_frame)\namount_entry.pack(pady=10, padx=10, anchor=W)\ncomment_label = Label(left_frame, text=\"Комментарий:\")\ncomment_label.pack(pady=10, padx=10, anchor=W)\ncomment_entry = Entry(left_frame)\ncomment_entry.pack(pady=10, padx=10, anchor=W)\nadd_button = Button(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10, padx=10, anchor=W)\nbutton_frame = Frame(root, bd=2, relief=SUNKEN)\nbutton_frame.pack(side=TOP, pady=10, padx=10, fill=BOTH)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "comment_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "comment_label = Label(left_frame, text=\"Комментарий:\")\ncomment_label.pack(pady=10, padx=10, anchor=W)\ncomment_entry = Entry(left_frame)\ncomment_entry.pack(pady=10, padx=10, anchor=W)\nadd_button = Button(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10, padx=10, anchor=W)\nbutton_frame = Frame(root, bd=2, relief=SUNKEN)\nbutton_frame.pack(side=TOP, pady=10, padx=10, fill=BOTH)\ndelete_button = Button(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(pady=10, padx=10, side=LEFT)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "comment_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "comment_entry = Entry(left_frame)\ncomment_entry.pack(pady=10, padx=10, anchor=W)\nadd_button = Button(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10, padx=10, anchor=W)\nbutton_frame = Frame(root, bd=2, relief=SUNKEN)\nbutton_frame.pack(side=TOP, pady=10, padx=10, fill=BOTH)\ndelete_button = Button(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(pady=10, padx=10, side=LEFT)\ndelete_all_button = Button(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(pady=10, padx=10, side=LEFT)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "add_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "add_button = Button(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(pady=10, padx=10, anchor=W)\nbutton_frame = Frame(root, bd=2, relief=SUNKEN)\nbutton_frame.pack(side=TOP, pady=10, padx=10, fill=BOTH)\ndelete_button = Button(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(pady=10, padx=10, side=LEFT)\ndelete_all_button = Button(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(pady=10, padx=10, side=LEFT)\nedit_button = Button(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(pady=10, padx=10, side=LEFT)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "button_frame = Frame(root, bd=2, relief=SUNKEN)\nbutton_frame.pack(side=TOP, pady=10, padx=10, fill=BOTH)\ndelete_button = Button(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(pady=10, padx=10, side=LEFT)\ndelete_all_button = Button(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(pady=10, padx=10, side=LEFT)\nedit_button = Button(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(pady=10, padx=10, side=LEFT)\nright_frame = Frame(root, bd=2, relief=SUNKEN)\nright_frame.pack(side=LEFT, pady=10)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "delete_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "delete_button = Button(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(pady=10, padx=10, side=LEFT)\ndelete_all_button = Button(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(pady=10, padx=10, side=LEFT)\nedit_button = Button(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(pady=10, padx=10, side=LEFT)\nright_frame = Frame(root, bd=2, relief=SUNKEN)\nright_frame.pack(side=LEFT, pady=10)\ndata_frame = Frame(root, bd=2, relief=SUNKEN)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "delete_all_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "delete_all_button = Button(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(pady=10, padx=10, side=LEFT)\nedit_button = Button(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(pady=10, padx=10, side=LEFT)\nright_frame = Frame(root, bd=2, relief=SUNKEN)\nright_frame.pack(side=LEFT, pady=10)\ndata_frame = Frame(root, bd=2, relief=SUNKEN)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "edit_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "edit_button = Button(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(pady=10, padx=10, side=LEFT)\nright_frame = Frame(root, bd=2, relief=SUNKEN)\nright_frame.pack(side=LEFT, pady=10)\ndata_frame = Frame(root, bd=2, relief=SUNKEN)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = Scrollbar(data_frame, orient=VERTICAL, command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "right_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "right_frame = Frame(root, bd=2, relief=SUNKEN)\nright_frame.pack(side=LEFT, pady=10)\ndata_frame = Frame(root, bd=2, relief=SUNKEN)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = Scrollbar(data_frame, orient=VERTICAL, command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview['columns'] = ('id', 'date', 'type', 'amount', 'comment')",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "data_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "data_frame = Frame(root, bd=2, relief=SUNKEN)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = Scrollbar(data_frame, orient=VERTICAL, command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview['columns'] = ('id', 'date', 'type', 'amount', 'comment')\ntreeview.column('#0', width=0, stretch=NO)\ntreeview.column('id', anchor=W, width=100)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "treeview",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "treeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = Scrollbar(data_frame, orient=VERTICAL, command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview['columns'] = ('id', 'date', 'type', 'amount', 'comment')\ntreeview.column('#0', width=0, stretch=NO)\ntreeview.column('id', anchor=W, width=100)\ntreeview.column('date', anchor=W, width=100)\ntreeview.column('type', anchor=W, width=100)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "scrollbar",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "scrollbar = Scrollbar(data_frame, orient=VERTICAL, command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview['columns'] = ('id', 'date', 'type', 'amount', 'comment')\ntreeview.column('#0', width=0, stretch=NO)\ntreeview.column('id', anchor=W, width=100)\ntreeview.column('date', anchor=W, width=100)\ntreeview.column('type', anchor=W, width=100)\ntreeview.column('amount', anchor=E, width=100)\ntreeview.column('comment', anchor=W, width=200)",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "treeview['columns']",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "treeview['columns'] = ('id', 'date', 'type', 'amount', 'comment')\ntreeview.column('#0', width=0, stretch=NO)\ntreeview.column('id', anchor=W, width=100)\ntreeview.column('date', anchor=W, width=100)\ntreeview.column('type', anchor=W, width=100)\ntreeview.column('amount', anchor=E, width=100)\ntreeview.column('comment', anchor=W, width=200)\ntreeview.heading('#0', text='')\ntreeview.heading('id', text='ID')\ntreeview.heading('date', text='Дата')",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "Accounting.home_accounting2",
        "description": "Accounting.home_accounting2",
        "peekOfCode": "rows = cur.fetchall()\nfor row in rows:\n    treeview.insert('', END, values=row)\ntreeview.bind('<ButtonRelease-1>', on_row_click) # выбор транзакции\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home_accounting2",
        "documentation": {}
    },
    {
        "label": "add_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "def add_transaction():\n    if type_combobox.get() and amount_entry.get():\n        try:\n            transaction_type = type_combobox.get()\n            amount = float(amount_entry.get())\n            comment = comment_entry.get()\n            date = date_entry.get()\n            cur.execute(\"\"\"\n                INSERT INTO transactions (date, type, amount, comment)\n                VALUES (?, ?, ?, ?)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "delete_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "def delete_transaction():\n    selected_item = treeview.selection()\n    if selected_item:\n        item_values = treeview.item(selected_item, \"values\")\n        transaction_id = item_values[0]\n        cur.execute(\"DELETE FROM transactions WHERE id=?\", (transaction_id,))\n        connection.commit()\n        treeview.delete(selected_item)\n        CTkMessagebox(title=\"Успех\", message=\"Транзакция успешно удалена!\", icon=\"check\", option_1=\"ОК\")\n    else:",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "delete_all_transactions",
        "kind": 2,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "def delete_all_transactions():\n    confirm = CTkMessagebox(title=\"Подтверждение\", message=\"Вы уверены, что хотите удалить все транзакции?\",\n                            icon=\"question\",\n                            option_2=\"Да\", option_1=\"Нет\")\n    response = confirm.get()\n    if response == \"Да\":\n        cur.execute(\"DELETE FROM transactions\")\n        connection.commit()\n        treeview.delete(*treeview.get_children())\n        CTkMessagebox(title=\"Успех\", message=\"Все транзакции успешно удалены!\", icon=\"check\", option_1=\"ОК\")",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "edit_transaction",
        "kind": 2,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "def edit_transaction():\n    selected_item = treeview.selection()\n    if not selected_item:\n        CTkMessagebox(title=\"Транзакция не выбрана!\",\n                      message=\"Пожалуйста, выберите транзакцию в таблице, чтобы отредактировать.\",\n                      icon=\"warning\",\n                      option_1=\"ОК\")\n        return\n    transaction_id = treeview.set(selected_item, \"#1\")\n    date = date_entry.get()",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "on_row_click",
        "kind": 2,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "def on_row_click(event):\n    if treeview.selection():\n        item = treeview.selection()[0]\n        values = treeview.item(item, \"values\")\n        date_entry.delete(0, END)\n        date_entry.insert(0, values[1])\n        type_combobox.set(values[2])\n        amount_entry.delete(0, END)\n        amount_entry.insert(0, values[3])\n        comment_entry.delete(0, END)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "connection = sqlite3.connect(\"finance.db\")\ncur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        date DATA NOT NULL,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "cur = connection.cursor()\ncur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS transactions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        date DATA NOT NULL,\n        type TEXT,\n        amount REAL,\n        comment TEXT\n        )\n\"\"\")",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "root = CTk()\nroot.title(\"Домашняя Бухгалтерия\")\nroot.geometry(\"770x370\")\nroot.resizable(False, False)\nstyle = ttk.Style()\nstyle.theme_use('default')\nstyle.configure('Treeview',\n                background='#2a2d2e',\n                foreground='white',\n                rowheight=25,",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "style",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "style = ttk.Style()\nstyle.theme_use('default')\nstyle.configure('Treeview',\n                background='#2a2d2e',\n                foreground='white',\n                rowheight=25,\n                fieldbackground='#343638',\n                bordercolor='#343638',\n                borderwidth=0)\nstyle.map('Treeview', background=[('selected', '#22559b')])",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "left_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "left_frame = CTkFrame(root, border_width=2)\nleft_frame.pack(side=LEFT, padx=10, anchor=\"w\")\ndate_label = CTkLabel(left_frame, text=\"Дата:\")\ndate_label.pack(anchor=\"w\", pady=10, padx=10)\ndate_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(anchor=\"w\", padx=10)\ntype_label = CTkLabel(left_frame, text=\"Тип:\")\ntype_label.pack(anchor=\"w\", pady=10, padx=10)\ntype_combobox = CTkComboBox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(anchor=\"w\", padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "date_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "date_label = CTkLabel(left_frame, text=\"Дата:\")\ndate_label.pack(anchor=\"w\", pady=10, padx=10)\ndate_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(anchor=\"w\", padx=10)\ntype_label = CTkLabel(left_frame, text=\"Тип:\")\ntype_label.pack(anchor=\"w\", pady=10, padx=10)\ntype_combobox = CTkComboBox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(anchor=\"w\", padx=10)\namount_label = CTkLabel(left_frame, text=\"Сумма:\")\namount_label.pack(anchor=\"w\", pady=10, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "date_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "date_entry = DateEntry(left_frame, width=20, foreground=\"white\", borderwidth=2, date_pattern=\"dd.mm.y\", locale=\"ru\")\ndate_entry.pack(anchor=\"w\", padx=10)\ntype_label = CTkLabel(left_frame, text=\"Тип:\")\ntype_label.pack(anchor=\"w\", pady=10, padx=10)\ntype_combobox = CTkComboBox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(anchor=\"w\", padx=10)\namount_label = CTkLabel(left_frame, text=\"Сумма:\")\namount_label.pack(anchor=\"w\", pady=10, padx=10)\namount_entry = CTkEntry(left_frame, )\namount_entry.pack(anchor=\"w\", padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "type_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "type_label = CTkLabel(left_frame, text=\"Тип:\")\ntype_label.pack(anchor=\"w\", pady=10, padx=10)\ntype_combobox = CTkComboBox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(anchor=\"w\", padx=10)\namount_label = CTkLabel(left_frame, text=\"Сумма:\")\namount_label.pack(anchor=\"w\", pady=10, padx=10)\namount_entry = CTkEntry(left_frame, )\namount_entry.pack(anchor=\"w\", padx=10)\ncomment_label = CTkLabel(left_frame, text=\"Комментарий:\")\ncomment_label.pack(anchor=\"w\", pady=10, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "type_combobox",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "type_combobox = CTkComboBox(left_frame, values=[\"Доход\", \"Расход\"], state=\"readonly\")\ntype_combobox.pack(anchor=\"w\", padx=10)\namount_label = CTkLabel(left_frame, text=\"Сумма:\")\namount_label.pack(anchor=\"w\", pady=10, padx=10)\namount_entry = CTkEntry(left_frame, )\namount_entry.pack(anchor=\"w\", padx=10)\ncomment_label = CTkLabel(left_frame, text=\"Комментарий:\")\ncomment_label.pack(anchor=\"w\", pady=10, padx=10)\ncomment_entry = CTkEntry(left_frame)\ncomment_entry.pack(anchor=\"w\", padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "amount_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "amount_label = CTkLabel(left_frame, text=\"Сумма:\")\namount_label.pack(anchor=\"w\", pady=10, padx=10)\namount_entry = CTkEntry(left_frame, )\namount_entry.pack(anchor=\"w\", padx=10)\ncomment_label = CTkLabel(left_frame, text=\"Комментарий:\")\ncomment_label.pack(anchor=\"w\", pady=10, padx=10)\ncomment_entry = CTkEntry(left_frame)\ncomment_entry.pack(anchor=\"w\", padx=10)\nadd_button = CTkButton(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(anchor=\"w\", pady=10, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "amount_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "amount_entry = CTkEntry(left_frame, )\namount_entry.pack(anchor=\"w\", padx=10)\ncomment_label = CTkLabel(left_frame, text=\"Комментарий:\")\ncomment_label.pack(anchor=\"w\", pady=10, padx=10)\ncomment_entry = CTkEntry(left_frame)\ncomment_entry.pack(anchor=\"w\", padx=10)\nadd_button = CTkButton(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(anchor=\"w\", pady=10, padx=10)\nbutton_frame = CTkFrame(root)\nbutton_frame.pack(side=TOP, fill=BOTH, padx=10, pady=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "comment_label",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "comment_label = CTkLabel(left_frame, text=\"Комментарий:\")\ncomment_label.pack(anchor=\"w\", pady=10, padx=10)\ncomment_entry = CTkEntry(left_frame)\ncomment_entry.pack(anchor=\"w\", padx=10)\nadd_button = CTkButton(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(anchor=\"w\", pady=10, padx=10)\nbutton_frame = CTkFrame(root)\nbutton_frame.pack(side=TOP, fill=BOTH, padx=10, pady=10)\ndelete_button = CTkButton(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(side=LEFT, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "comment_entry",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "comment_entry = CTkEntry(left_frame)\ncomment_entry.pack(anchor=\"w\", padx=10)\nadd_button = CTkButton(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(anchor=\"w\", pady=10, padx=10)\nbutton_frame = CTkFrame(root)\nbutton_frame.pack(side=TOP, fill=BOTH, padx=10, pady=10)\ndelete_button = CTkButton(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(side=LEFT, padx=10)\ndelete_all_button = CTkButton(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(side=LEFT, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "add_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "add_button = CTkButton(left_frame, text=\"Добавить транзакцию\", command=add_transaction)\nadd_button.pack(anchor=\"w\", pady=10, padx=10)\nbutton_frame = CTkFrame(root)\nbutton_frame.pack(side=TOP, fill=BOTH, padx=10, pady=10)\ndelete_button = CTkButton(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(side=LEFT, padx=10)\ndelete_all_button = CTkButton(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(side=LEFT, padx=10)\nedit_button = CTkButton(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(side=LEFT, padx=10)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "button_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "button_frame = CTkFrame(root)\nbutton_frame.pack(side=TOP, fill=BOTH, padx=10, pady=10)\ndelete_button = CTkButton(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(side=LEFT, padx=10)\ndelete_all_button = CTkButton(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(side=LEFT, padx=10)\nedit_button = CTkButton(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(side=LEFT, padx=10)\nright_frame = CTkFrame(root)\nright_frame.pack(side=LEFT, fill=BOTH)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "delete_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "delete_button = CTkButton(button_frame, text=\"Удалить транзакцию\", command=delete_transaction)\ndelete_button.pack(side=LEFT, padx=10)\ndelete_all_button = CTkButton(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(side=LEFT, padx=10)\nedit_button = CTkButton(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(side=LEFT, padx=10)\nright_frame = CTkFrame(root)\nright_frame.pack(side=LEFT, fill=BOTH)\ndata_frame = CTkFrame(right_frame, border_width=2)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "delete_all_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "delete_all_button = CTkButton(button_frame, text=\"Удалить все транзакции\", command=delete_all_transactions)\ndelete_all_button.pack(side=LEFT, padx=10)\nedit_button = CTkButton(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(side=LEFT, padx=10)\nright_frame = CTkFrame(root)\nright_frame.pack(side=LEFT, fill=BOTH)\ndata_frame = CTkFrame(right_frame, border_width=2)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "edit_button",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "edit_button = CTkButton(button_frame, text=\"Редактировать транзакцию\", command=edit_transaction)\nedit_button.pack(side=LEFT, padx=10)\nright_frame = CTkFrame(root)\nright_frame.pack(side=LEFT, fill=BOTH)\ndata_frame = CTkFrame(right_frame, border_width=2)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = ttk.Scrollbar(data_frame, orient=\"vertical\", command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "right_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "right_frame = CTkFrame(root)\nright_frame.pack(side=LEFT, fill=BOTH)\ndata_frame = CTkFrame(right_frame, border_width=2)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = ttk.Scrollbar(data_frame, orient=\"vertical\", command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview[\"columns\"] = (\"id\", \"date\", \"type\", \"amount\", \"comment\")",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "data_frame",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "data_frame = CTkFrame(right_frame, border_width=2)\ndata_frame.pack(side=LEFT, fill=BOTH, expand=True)\ntreeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = ttk.Scrollbar(data_frame, orient=\"vertical\", command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview[\"columns\"] = (\"id\", \"date\", \"type\", \"amount\", \"comment\")\ntreeview.column(\"#0\", width=0, stretch=NO)\ntreeview.column(\"id\", anchor=W, width=0)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "treeview",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "treeview = ttk.Treeview(data_frame)\ntreeview.pack(side=LEFT, fill=BOTH, expand=True)\nscrollbar = ttk.Scrollbar(data_frame, orient=\"vertical\", command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview[\"columns\"] = (\"id\", \"date\", \"type\", \"amount\", \"comment\")\ntreeview.column(\"#0\", width=0, stretch=NO)\ntreeview.column(\"id\", anchor=W, width=0)\ntreeview.column(\"date\", anchor=W, width=100)\ntreeview.column(\"type\", anchor=W, width=100)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "scrollbar",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "scrollbar = ttk.Scrollbar(data_frame, orient=\"vertical\", command=treeview.yview)\nscrollbar.pack(side=RIGHT, fill=Y)\ntreeview.configure(yscrollcommand=scrollbar.set)\ntreeview[\"columns\"] = (\"id\", \"date\", \"type\", \"amount\", \"comment\")\ntreeview.column(\"#0\", width=0, stretch=NO)\ntreeview.column(\"id\", anchor=W, width=0)\ntreeview.column(\"date\", anchor=W, width=100)\ntreeview.column(\"type\", anchor=W, width=100)\ntreeview.column(\"amount\", anchor=W, width=100)\ntreeview.column(\"comment\", anchor=W, width=260)",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "treeview[\"columns\"]",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "treeview[\"columns\"] = (\"id\", \"date\", \"type\", \"amount\", \"comment\")\ntreeview.column(\"#0\", width=0, stretch=NO)\ntreeview.column(\"id\", anchor=W, width=0)\ntreeview.column(\"date\", anchor=W, width=100)\ntreeview.column(\"type\", anchor=W, width=100)\ntreeview.column(\"amount\", anchor=W, width=100)\ntreeview.column(\"comment\", anchor=W, width=260)\ntreeview.heading(\"#0\", text=\"\")\ntreeview.heading(\"id\", text=\"ID\")\ntreeview.heading(\"date\", text=\"Дата\")",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "Accounting.home_accounting_with_design",
        "description": "Accounting.home_accounting_with_design",
        "peekOfCode": "rows = cur.fetchall()\nfor row in rows:\n    treeview.insert(\"\", END, values=row)\ntreeview.bind(\"<ButtonRelease-1>\", on_row_click)\nroot.mainloop()\nconnection.close()",
        "detail": "Accounting.home_accounting_with_design",
        "documentation": {}
    },
    {
        "label": "save_callback",
        "kind": 2,
        "importPath": "DearPyGUI.1",
        "description": "DearPyGUI.1",
        "peekOfCode": "def save_callback():\n    print(\"Save Clicked\")\ndpg.create_context()\ndpg.create_viewport()\ndpg.setup_dearpygui()\n# dpg.set_main_window_size(500, 500)\nwith dpg.window(label=\"Example Window\"):\n    dpg.add_text(\"Hello world\")\n    dpg.add_button(label=\"Save\", callback=save_callback)\n    dpg.add_input_text(label=\"string\")",
        "detail": "DearPyGUI.1",
        "documentation": {}
    },
    {
        "label": "add_buttons",
        "kind": 2,
        "importPath": "DearPyGUI.12",
        "description": "DearPyGUI.12",
        "peekOfCode": "def add_buttons():\n    global new_button1, new_button2\n    new_button1 = dpg.add_button(label=\"New Button\", before=\"delete_button\", tag=\"new_button1\")\n    new_button2 = dpg.add_button(label=\"New Button 2\", parent=\"secondary_window\", tag=\"new_button2\")\ndef delete_buttons():\n    dpg.delete_item(\"new_button1\")\n    dpg.delete_item(\"new_button2\")\nwith dpg.window(label=\"Tutorial\", pos=(200, 200)):\n    dpg.add_button(label=\"Add Buttons\", callback=add_buttons)\n    dpg.add_button(label=\"Delete Buttons\", callback=delete_buttons, tag=\"delete_button\")",
        "detail": "DearPyGUI.12",
        "documentation": {}
    },
    {
        "label": "delete_buttons",
        "kind": 2,
        "importPath": "DearPyGUI.12",
        "description": "DearPyGUI.12",
        "peekOfCode": "def delete_buttons():\n    dpg.delete_item(\"new_button1\")\n    dpg.delete_item(\"new_button2\")\nwith dpg.window(label=\"Tutorial\", pos=(200, 200)):\n    dpg.add_button(label=\"Add Buttons\", callback=add_buttons)\n    dpg.add_button(label=\"Delete Buttons\", callback=delete_buttons, tag=\"delete_button\")\nwith dpg.window(label=\"Secondary Window\", tag=\"secondary_window\", pos=(100, 100)):\n    pass\ndpg.create_viewport(title='Custom Title', width=600, height=400)\ndpg.setup_dearpygui()",
        "detail": "DearPyGUI.12",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "DearPyGUI.16",
        "description": "DearPyGUI.16",
        "peekOfCode": "def callback(sender, app_data):\n    print('OK was clicked.')\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\ndef cancel_callback(sender, app_data):\n    print('Cancel was clicked.')\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\ndpg.add_file_dialog(\n    directory_selector=True, show=False, callback=callback, tag=\"file_dialog_id\",",
        "detail": "DearPyGUI.16",
        "documentation": {}
    },
    {
        "label": "cancel_callback",
        "kind": 2,
        "importPath": "DearPyGUI.16",
        "description": "DearPyGUI.16",
        "peekOfCode": "def cancel_callback(sender, app_data):\n    print('Cancel was clicked.')\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\ndpg.add_file_dialog(\n    directory_selector=True, show=False, callback=callback, tag=\"file_dialog_id\",\n    cancel_callback=cancel_callback, width=700 ,height=400)\nwith dpg.window(label=\"Tutorial\", width=800, height=300):\n    dpg.add_button(label=\"Directory Selector\", callback=lambda: dpg.show_item(\"file_dialog_id\"))\ndpg.create_viewport(title='Custom Title', width=800, height=600)",
        "detail": "DearPyGUI.16",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "DearPyGUI.17",
        "description": "DearPyGUI.17",
        "peekOfCode": "def callback(sender, app_data, user_data):\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\nwith dpg.file_dialog(directory_selector=False, show=False, callback=callback, id=\"file_dialog_id\", width=700 ,height=400):\n    dpg.add_file_extension(\".*\")\n    dpg.add_file_extension(\"\", color=(150, 255, 150, 255))\n    dpg.add_file_extension(\"Source files (*.cpp *.h *.hpp){.cpp,.h,.hpp}\", color=(0, 255, 255, 255))\n    dpg.add_file_extension(\".h\", color=(255, 0, 255, 255), custom_text=\"[header]\")\n    dpg.add_file_extension(\".py\", color=(0, 255, 0, 255), custom_text=\"[Python]\")\nwith dpg.window(label=\"Tutorial\", width=800, height=300):",
        "detail": "DearPyGUI.17",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "DearPyGUI.18",
        "description": "DearPyGUI.18",
        "peekOfCode": "def callback(sender, app_data):\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\nwith dpg.file_dialog(directory_selector=False, show=False, callback=callback, tag=\"file_dialog_tag\", width=700 ,height=400):\n    dpg.add_file_extension(\".*\")\n    dpg.add_file_extension(\"\", color=(150, 255, 150, 255))\n    dpg.add_file_extension(\".cpp\", color=(255, 255, 0, 255))\n    dpg.add_file_extension(\".h\", color=(255, 0, 255, 255))\n    dpg.add_file_extension(\".py\", color=(0, 255, 0, 255))\n    with dpg.group(horizontal=True):",
        "detail": "DearPyGUI.18",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "DearPyGUI.19",
        "description": "DearPyGUI.19",
        "peekOfCode": "def callback(sender, app_data):\n    print(\"Sender: \", sender)\n    print(\"App Data: \", app_data)\nwith dpg.file_dialog(directory_selector=False, show=False, callback=callback, file_count=3, tag=\"file_dialog_tag\", width=700 ,height=400):\n    dpg.add_file_extension(\"\", color=(255, 150, 150, 255))\n    dpg.add_file_extension(\".*\")\n    dpg.add_file_extension(\".cpp\", color=(255, 255, 0, 255))\n    dpg.add_file_extension(\".h\", color=(255, 0, 255, 255))\n    dpg.add_file_extension(\".py\", color=(0, 255, 0, 255))\n    dpg.add_button(label=\"fancy file dialog\")",
        "detail": "DearPyGUI.19",
        "documentation": {}
    },
    {
        "label": "save_init",
        "kind": 2,
        "importPath": "DearPyGUI.20",
        "description": "DearPyGUI.20",
        "peekOfCode": "def save_init():\n    dpg.save_init_file(\"dpg.ini\")\ndpg.configure_app(init_file=\"dpg.ini\")  # Файл для сохранения состояния\nwith dpg.window(label=\"about\", tag=\"main window\"):\n    dpg.add_button(label=\"Save Window pos\", callback=lambda: save_init)\nwith dpg.window(label=\"about\", tag=\"side window\"):\n    dpg.add_button(label=\"Press me\")\ndpg.create_viewport(title='Custom Title', width=800, height=600)\ndpg.setup_dearpygui()\ndpg.show_viewport()",
        "detail": "DearPyGUI.20",
        "documentation": {}
    },
    {
        "label": "print_me",
        "kind": 2,
        "importPath": "DearPyGUI.21",
        "description": "DearPyGUI.21",
        "peekOfCode": "def print_me(sender):\n    print(f\"Menu Item: {sender}\")\nwith dpg.window(label=\"Tutorial\"):\n    with dpg.menu_bar():\n        with dpg.menu(label=\"File\"):\n            dpg.add_menu_item(label=\"Save\", callback=print_me)\n            dpg.add_menu_item(label=\"Save As\", callback=print_me)\n            with dpg.menu(label=\"Settings\"):\n                dpg.add_menu_item(label=\"Setting 1\", callback=print_me, check=True)\n                dpg.add_menu_item(label=\"Setting 2\", callback=print_me)",
        "detail": "DearPyGUI.21",
        "documentation": {}
    },
    {
        "label": "link_callback",
        "kind": 2,
        "importPath": "DearPyGUI.22",
        "description": "DearPyGUI.22",
        "peekOfCode": "def link_callback(sender, app_data):\n    dpg.add_node_link(app_data[0], app_data[1], parent=sender)\ndef delink_callback(sender, app_data):\n    dpg.delete_item(app_data)\nwith dpg.window(label=\"Tutorial\", width=400, height=400):\n    with dpg.node_editor(callback=link_callback, delink_callback=delink_callback):\n        with dpg.node(label=\"Node 1\"):\n            with dpg.node_attribute(label=\"Node A1\"):\n                dpg.add_input_float(label=\"F1\", width=150)\n            with dpg.node_attribute(label=\"Node A2\", attribute_type=dpg.mvNode_Attr_Output):",
        "detail": "DearPyGUI.22",
        "documentation": {}
    },
    {
        "label": "delink_callback",
        "kind": 2,
        "importPath": "DearPyGUI.22",
        "description": "DearPyGUI.22",
        "peekOfCode": "def delink_callback(sender, app_data):\n    dpg.delete_item(app_data)\nwith dpg.window(label=\"Tutorial\", width=400, height=400):\n    with dpg.node_editor(callback=link_callback, delink_callback=delink_callback):\n        with dpg.node(label=\"Node 1\"):\n            with dpg.node_attribute(label=\"Node A1\"):\n                dpg.add_input_float(label=\"F1\", width=150)\n            with dpg.node_attribute(label=\"Node A2\", attribute_type=dpg.mvNode_Attr_Output):\n                dpg.add_input_float(label=\"F2\", width=150)\n        with dpg.node(label=\"Node 2\"):",
        "detail": "DearPyGUI.22",
        "documentation": {}
    },
    {
        "label": "button_callback",
        "kind": 2,
        "importPath": "DearPyGUI.6",
        "description": "DearPyGUI.6",
        "peekOfCode": "def button_callback(sender, app_data, user_data):\n    print(f\"sender is: {sender}\")\n    print(f\"app_data is: {app_data}\")\n    print(f\"user_data is: {user_data}\")\nwith dpg.window(label=\"Tutorial\"):\n    dpg.add_button(label=\"Apply\", callback=button_callback, user_data=\"Some Data\")\n    btn = dpg.add_button(label=\"Apply 2\")\n    dpg.set_item_callback(btn, button_callback)\n    dpg.set_item_user_data(btn, \"Some Extra User Data\")\ndpg.create_viewport(title='Custom Title', width=800, height=600)",
        "detail": "DearPyGUI.6",
        "documentation": {}
    },
    {
        "label": "print_value",
        "kind": 2,
        "importPath": "DearPyGUI.7",
        "description": "DearPyGUI.7",
        "peekOfCode": "def print_value(sender):\n    sender_name = dpg.get_item_label(sender)\n    if not sender_name:\n        sender_name = \"None\"\n    print(f\"{sender_name}: dpg.get_value(sender)\")\nwith dpg.window(width=300):\n    input_txt1 = dpg.add_input_text()\n    input_txt2 = dpg.add_input_text(\n        label=\"InputTxt2\",\n        default_value=\"This is a default value!\",",
        "detail": "DearPyGUI.7",
        "documentation": {}
    },
    {
        "label": "change_text",
        "kind": 2,
        "importPath": "DearPyGUI.9",
        "description": "DearPyGUI.9",
        "peekOfCode": "def change_text(sender, app_data):\n    dpg.set_value(\"text item\", f\"Mouse Button ID: {app_data}\")\nwith dpg.window(width=500, height=300):\n    dpg.add_text(\"Click me with any mouse button\", tag=\"text item\")\n    with dpg.item_handler_registry(tag=\"widget handler\") as handler:\n        dpg.add_item_clicked_handler(callback=change_text)\n    dpg.bind_item_handler_registry(\"text item\", \"widget handler\")\ndpg.create_viewport(title='Custom Title', width=800, height=600)\ndpg.setup_dearpygui()\ndpg.show_viewport()",
        "detail": "DearPyGUI.9",
        "documentation": {}
    },
    {
        "label": "show_demo",
        "kind": 2,
        "importPath": "DearPyGUI.demo",
        "description": "DearPyGUI.demo",
        "peekOfCode": "def show_demo():\n    dpg.add_texture_registry(label=\"Demo Texture Container\", tag=\"__demo_texture_container\")\n    dpg.add_colormap_registry(label=\"Demo Colormap Registry\", tag=\"__demo_colormap_registry\")\n    with dpg.theme(tag=\"__demo_hyperlinkTheme\"):\n        with dpg.theme_component(dpg.mvButton):\n            dpg.add_theme_color(dpg.mvThemeCol_Button, [0, 0, 0, 0])\n            dpg.add_theme_color(dpg.mvThemeCol_ButtonActive, [0, 0, 0, 0])\n            dpg.add_theme_color(dpg.mvThemeCol_ButtonHovered, [29, 151, 236, 25])\n            dpg.add_theme_color(dpg.mvThemeCol_Text, [29, 151, 236])\n    def _log(sender, app_data, user_data):",
        "detail": "DearPyGUI.demo",
        "documentation": {}
    },
    {
        "label": "lib1",
        "kind": 5,
        "importPath": "Linux.CTypes.main",
        "description": "Linux.CTypes.main",
        "peekOfCode": "lib1 = ctypes.CDLL(\"handlers/lib1.so\")\nlib2 = ctypes.CDLL(\"handlers/lib2.so\")\nlib3 = ctypes.CDLL(\"handlers/lib3.so\")\nstring = ctypes.create_string_buffer(b\"zprogerit\")\nlib1.open_website(string)\nlib2.start_thread()\nlib3.start_thread2()",
        "detail": "Linux.CTypes.main",
        "documentation": {}
    },
    {
        "label": "lib2",
        "kind": 5,
        "importPath": "Linux.CTypes.main",
        "description": "Linux.CTypes.main",
        "peekOfCode": "lib2 = ctypes.CDLL(\"handlers/lib2.so\")\nlib3 = ctypes.CDLL(\"handlers/lib3.so\")\nstring = ctypes.create_string_buffer(b\"zprogerit\")\nlib1.open_website(string)\nlib2.start_thread()\nlib3.start_thread2()",
        "detail": "Linux.CTypes.main",
        "documentation": {}
    },
    {
        "label": "lib3",
        "kind": 5,
        "importPath": "Linux.CTypes.main",
        "description": "Linux.CTypes.main",
        "peekOfCode": "lib3 = ctypes.CDLL(\"handlers/lib3.so\")\nstring = ctypes.create_string_buffer(b\"zprogerit\")\nlib1.open_website(string)\nlib2.start_thread()\nlib3.start_thread2()",
        "detail": "Linux.CTypes.main",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Linux.CTypes.main",
        "description": "Linux.CTypes.main",
        "peekOfCode": "string = ctypes.create_string_buffer(b\"zprogerit\")\nlib1.open_website(string)\nlib2.start_thread()\nlib3.start_thread2()",
        "detail": "Linux.CTypes.main",
        "documentation": {}
    },
    {
        "label": "TempMixin",
        "kind": 6,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "class TempMixin:\n\t\"\"\"Convert temperature from metric to impterial and revert.\"\"\"\n\t@staticmethod\n\tdef f_to_c(f:float) -> float:\n\t\t\"\"\"Convert from imperial to metric.\"\"\"\n\t\treturn (f - 32) / 1.8\n\t@staticmethod\n\tdef c_to_f(c: float) -> float:\n\t\t\"\"\"Convert metric to inmperial.\"\"\"\n\t\treturn (c * 1.8) + 32",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "DigitalStoreMixin",
        "kind": 6,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "class DigitalStoreMixin:\n\t\"\"\"Convert digital valies.\"\"\"\n\t@staticmethod\n\tdef gb_to_mb(gb: int) -> int:\n\t\treturn gb * 1000\n\t@staticmethod\n\tdef mb_to_gb(mb: int) -> float:\n\t\treturn mb / 1000\nclass HardDrive(TempMixin, DigitalStoreMixin):\n\t\"\"\"Computer hard drive.\"\"\"",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "HardDrive",
        "kind": 6,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "class HardDrive(TempMixin, DigitalStoreMixin):\n\t\"\"\"Computer hard drive.\"\"\"\n\tdef __init__(self, space: int, celsius:int) -> None:\n\t\t\"\"\"Inintialize drive status.\"\"\"\n\t\tself._space = space\n\t\tself._celsius = celsius\n\tdef status(self, metric=True) -> None:\n\t\t\"\"\"Display drive status.\"\"\"\n\t\ttemp = self._celsius if metric else self.c_to_f(self._celsius)\n\t\tspace = self.mb_to_gb(self._space)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself._space",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "\t\tself._space = space\n\t\tself._celsius = celsius\n\tdef status(self, metric=True) -> None:\n\t\t\"\"\"Display drive status.\"\"\"\n\t\ttemp = self._celsius if metric else self.c_to_f(self._celsius)\n\t\tspace = self.mb_to_gb(self._space)\n\t\tprint(f'Space: {space} GB, Temp: {temp} {'C' if metric else 'F'}')\nhd = HardDrive(8000000, 22)\nhd.status()\nhd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "\t\tself._celsius",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "\t\tself._celsius = celsius\n\tdef status(self, metric=True) -> None:\n\t\t\"\"\"Display drive status.\"\"\"\n\t\ttemp = self._celsius if metric else self.c_to_f(self._celsius)\n\t\tspace = self.mb_to_gb(self._space)\n\t\tprint(f'Space: {space} GB, Temp: {temp} {'C' if metric else 'F'}')\nhd = HardDrive(8000000, 22)\nhd.status()\nhd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "\t\ttemp",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "\t\ttemp = self._celsius if metric else self.c_to_f(self._celsius)\n\t\tspace = self.mb_to_gb(self._space)\n\t\tprint(f'Space: {space} GB, Temp: {temp} {'C' if metric else 'F'}')\nhd = HardDrive(8000000, 22)\nhd.status()\nhd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "\t\tspace",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "\t\tspace = self.mb_to_gb(self._space)\n\t\tprint(f'Space: {space} GB, Temp: {temp} {'C' if metric else 'F'}')\nhd = HardDrive(8000000, 22)\nhd.status()\nhd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "hd",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "hd = HardDrive(8000000, 22)\nhd.status()\nhd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "hd.status(metric",
        "kind": 5,
        "importPath": "Mixins.inheritans_converter",
        "description": "Mixins.inheritans_converter",
        "peekOfCode": "hd.status(metric = False)",
        "detail": "Mixins.inheritans_converter",
        "documentation": {}
    },
    {
        "label": "ya_dsk_token",
        "kind": 5,
        "importPath": "n_bot_ntd.cfg_token",
        "description": "n_bot_ntd.cfg_token",
        "peekOfCode": "ya_dsk_token = '��� ����������� �� ��'",
        "detail": "n_bot_ntd.cfg_token",
        "documentation": {}
    },
    {
        "label": "up_to_dir",
        "kind": 2,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "def up_to_dir(file_name):\n    \"\"\"\n    Загрузка файла в папку на ЯД\n    :param file_name:\n    \"\"\"\n    try:\n        # путь к загружаемым в облако файлам от пользователей\n        src = f\"/{up_dir}\"\n        dst = f\"{src}/{file_name}\"\n        if not y.is_dir(src):  # если папки нет, то создать",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "y = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен иметь расширение\nformat_move_files = (\n    \".pdf\",\n    \".doc\",\n    \".docx\",\n    \".djvu\",\n    \".rar\",\n)  # , '.rtf') '.zip', - зипы плохо обраб. ЯД\nup_dir = \"Serii\"  # папка для хранения",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "format_move_files",
        "kind": 5,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "format_move_files = (\n    \".pdf\",\n    \".doc\",\n    \".docx\",\n    \".djvu\",\n    \".rar\",\n)  # , '.rtf') '.zip', - зипы плохо обраб. ЯД\nup_dir = \"Serii\"  # папка для хранения\n## 'GOST'  'SP'  'VSN' 'STO'\ndef up_to_dir(file_name):",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "up_dir",
        "kind": 5,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "up_dir = \"Serii\"  # папка для хранения\n## 'GOST'  'SP'  'VSN' 'STO'\ndef up_to_dir(file_name):\n    \"\"\"\n    Загрузка файла в папку на ЯД\n    :param file_name:\n    \"\"\"\n    try:\n        # путь к загружаемым в облако файлам от пользователей\n        src = f\"/{up_dir}\"",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "k_file",
        "kind": 5,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "k_file = 0\nfile_in_dir = os.listdir(os.getcwd())\nfor file in file_in_dir:\n    if file.endswith(\n        format_move_files, 0, len(file)\n    ):  # '.pdf'  if file.endswith('.pdf'):tuple(\n        print(f\"Обрабатываю файл: {file}\")\n        up_to_dir(file)\n        k_file = k_file + 1\n        print(\"-----------------------------------------------\")",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "file_in_dir",
        "kind": 5,
        "importPath": "n_bot_ntd.load_to_yad",
        "description": "n_bot_ntd.load_to_yad",
        "peekOfCode": "file_in_dir = os.listdir(os.getcwd())\nfor file in file_in_dir:\n    if file.endswith(\n        format_move_files, 0, len(file)\n    ):  # '.pdf'  if file.endswith('.pdf'):tuple(\n        print(f\"Обрабатываю файл: {file}\")\n        up_to_dir(file)\n        k_file = k_file + 1\n        print(\"-----------------------------------------------\")\n    else:",
        "detail": "n_bot_ntd.load_to_yad",
        "documentation": {}
    },
    {
        "label": "sget_base_bot",
        "kind": 2,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "def sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"\n    Работа с БД\n    :param user_id:\n    :param name_dir:\n    :return:\n    \"\"\"\n    con = sl.connect('databasebot.db')\n    cur = con.cursor()\n    ret_val = ''",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "report_to_txt",
        "kind": 2,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "def report_to_txt(str15):\n    \"\"\"\n    Отчет в текстовый файл\n    :param str15:\n    \"\"\"\n    try:\n        with open('Report.txt', 'a', encoding=ENCODING) as file4:\n            file4.write(str15)\n    except Exception as e:\n        print(f'Ошибка: {e}')",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "bot = Bot(token=cfg_token.telebot_token)\ndp = Dispatcher(bot)\nENCODING = 'utf-8'\nDOWNLOAD_DIR = '/DownloadBot'\nDEFAULT_SEARCH_DIR = 'GOST'  # папка по умолчанию стартовая для поиска\n# токен яндекс диска\ny = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "dp = Dispatcher(bot)\nENCODING = 'utf-8'\nDOWNLOAD_DIR = '/DownloadBot'\nDEFAULT_SEARCH_DIR = 'GOST'  # папка по умолчанию стартовая для поиска\n# токен яндекс диска\ny = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "ENCODING",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "ENCODING = 'utf-8'\nDOWNLOAD_DIR = '/DownloadBot'\nDEFAULT_SEARCH_DIR = 'GOST'  # папка по умолчанию стартовая для поиска\n# токен яндекс диска\ny = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "DOWNLOAD_DIR",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "DOWNLOAD_DIR = '/DownloadBot'\nDEFAULT_SEARCH_DIR = 'GOST'  # папка по умолчанию стартовая для поиска\n# токен яндекс диска\ny = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SEARCH_DIR",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "DEFAULT_SEARCH_DIR = 'GOST'  # папка по умолчанию стартовая для поиска\n# токен яндекс диска\ny = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "y = yadisk.YaDisk(token=cfg_token.ya_dsk_token)\n# загружаемый файл должен содержать в своем имени\nformat_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"\n    Работа с БД\n    :param user_id:",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "format_name_files",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "format_name_files = ['гост', 'gost', 'sp', 'сп', 'vsn', 'всн', 'sto', 'сто', 'rd', 'рд', 'серия']\n# загружаемый файл должен иметь расширение\nformat_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"\n    Работа с БД\n    :param user_id:\n    :param name_dir:\n    :return:",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "format_ext_files",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "format_ext_files = ['.pdf', '.doc', '.docx', '.rtf', '.djvu']\nsearch_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"\n    Работа с БД\n    :param user_id:\n    :param name_dir:\n    :return:\n    \"\"\"\n    con = sl.connect('databasebot.db')",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "search_dir",
        "kind": 5,
        "importPath": "n_bot_ntd.t_bot_ntd",
        "description": "n_bot_ntd.t_bot_ntd",
        "peekOfCode": "search_dir = DEFAULT_SEARCH_DIR  # папка по умолчанию стартовая для поиска\ndef sget_base_bot(user_id, name_dir) -> str:\n    \"\"\"\n    Работа с БД\n    :param user_id:\n    :param name_dir:\n    :return:\n    \"\"\"\n    con = sl.connect('databasebot.db')\n    cur = con.cursor()",
        "detail": "n_bot_ntd.t_bot_ntd",
        "documentation": {}
    },
    {
        "label": "Quackable",
        "kind": 6,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "class Quackable(Protocol):\n    def quack(self) -> str: ...\nclass WildDuck():\n    def quack(self) -> str:\n        return \"quack\"\nclass Decoy():\n    def quack(self) -> str:\n        return \"*False* quack\"\nclass RubberDuck():\n    def quack(self) -> str:",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "WildDuck",
        "kind": 6,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "class WildDuck():\n    def quack(self) -> str:\n        return \"quack\"\nclass Decoy():\n    def quack(self) -> str:\n        return \"*False* quack\"\nclass RubberDuck():\n    def quack(self) -> str:\n        return \"squeak\"\ndef action (value: Quackable) -> None:",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "Decoy",
        "kind": 6,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "class Decoy():\n    def quack(self) -> str:\n        return \"*False* quack\"\nclass RubberDuck():\n    def quack(self) -> str:\n        return \"squeak\"\ndef action (value: Quackable) -> None:\n    print(value.quack())\nduck = WildDuck()\nrubber_duck = RubberDuck()",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "RubberDuck",
        "kind": 6,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "class RubberDuck():\n    def quack(self) -> str:\n        return \"squeak\"\ndef action (value: Quackable) -> None:\n    print(value.quack())\nduck = WildDuck()\nrubber_duck = RubberDuck()\ndecoy = Decoy()\naction(duck)\naction(rubber_duck)",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "actio",
        "kind": 2,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "def action (value: Quackable) -> None:\n    print(value.quack())\nduck = WildDuck()\nrubber_duck = RubberDuck()\ndecoy = Decoy()\naction(duck)\naction(rubber_duck)\naction(decoy)\n# action(\"asdf\")",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "duck",
        "kind": 5,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "duck = WildDuck()\nrubber_duck = RubberDuck()\ndecoy = Decoy()\naction(duck)\naction(rubber_duck)\naction(decoy)\n# action(\"asdf\")",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "rubber_duck",
        "kind": 5,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "rubber_duck = RubberDuck()\ndecoy = Decoy()\naction(duck)\naction(rubber_duck)\naction(decoy)\n# action(\"asdf\")",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "decoy",
        "kind": 5,
        "importPath": "Protocol.ProtocolExample",
        "description": "Protocol.ProtocolExample",
        "peekOfCode": "decoy = Decoy()\naction(duck)\naction(rubber_duck)\naction(decoy)\n# action(\"asdf\")",
        "detail": "Protocol.ProtocolExample",
        "documentation": {}
    },
    {
        "label": "MessageBoxDemo",
        "kind": 6,
        "importPath": "pyside_dialogs.messageBoxDemo",
        "description": "pyside_dialogs.messageBoxDemo",
        "peekOfCode": "class MessageBoxDemo(QtGui.QWidget):\n    \"\"\"\"\"\"\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        # super(DialogDemo, self).__init__()\n        QtGui.QWidget.__init__(self)\n        self.setWindowTitle(\"MessageBox Demo\")\n        # create buttons\n        criticalMsgBtn = QtGui.QPushButton(\"Show Critical Message\")",
        "detail": "pyside_dialogs.messageBoxDemo",
        "documentation": {}
    },
    {
        "label": "PrinterWindow",
        "kind": 6,
        "importPath": "pyside_dialogs.printDlgDemo",
        "description": "pyside_dialogs.printDlgDemo",
        "peekOfCode": "class PrinterWindow(QtGui.QWidget):\n    \"\"\"\"\"\"\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        QtGui.QWidget.__init__(self)\n        self.setWindowTitle(\"Printing Demo\")\n        self.text_editor = QtGui.QTextEdit(self)\n        printButton = QtGui.QPushButton('Print')\n        printButton.clicked.connect(self.onPrint)",
        "detail": "pyside_dialogs.printDlgDemo",
        "documentation": {}
    },
    {
        "label": "DialogDemo",
        "kind": 6,
        "importPath": "pyside_dialogs.stdDialogDemo_pyside",
        "description": "pyside_dialogs.stdDialogDemo_pyside",
        "peekOfCode": "class DialogDemo(QtGui.QWidget):\n    \"\"\"\"\"\"\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        # super(DialogDemo, self).__init__()\n        QtGui.QWidget.__init__(self)\n        self.label = QtGui.QLabel(\"Python rules!\")\n        # create the buttons\n        colorDialogBtn = QtGui.QPushButton(\"Open Color Dialog\")",
        "detail": "pyside_dialogs.stdDialogDemo_pyside",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.complex_example",
        "description": "Графический интерфейс.code.CustomTkinter.complex_example",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        # configure window\n        self.title(\"CustomTkinter complex_example.py\")\n        self.geometry(f\"{1100}x{580}\")\n        # configure grid layout (4x4)\n        self.grid_columnconfigure(1, weight=1)\n        self.grid_columnconfigure((2, 3), weight=0)\n        self.grid_rowconfigure((0, 1, 2), weight=1)",
        "detail": "Графический интерфейс.code.CustomTkinter.complex_example",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.example_background_image",
        "description": "Графический интерфейс.code.CustomTkinter.example_background_image",
        "peekOfCode": "class App(customtkinter.CTk):\n    width = 900\n    height = 600\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.title(\"CustomTkinter example_background_image.py\")\n        self.geometry(f\"{self.width}x{self.height}\")\n        self.resizable(False, False)\n        # load and create background image\n        current_path = os.path.dirname(os.path.realpath(__file__))",
        "detail": "Графический интерфейс.code.CustomTkinter.example_background_image",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.image_example",
        "description": "Графический интерфейс.code.CustomTkinter.image_example",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"image_example.py\")\n        self.geometry(\"700x450\")\n        # set grid layout 1x2\n        self.grid_rowconfigure(0, weight=1)\n        self.grid_columnconfigure(1, weight=1)\n        # load images with light and dark mode image\n        image_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"test_images\")",
        "detail": "Графический интерфейс.code.CustomTkinter.image_example",
        "documentation": {}
    },
    {
        "label": "ScrollableCheckBoxFrame",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "description": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "peekOfCode": "class ScrollableCheckBoxFrame(customtkinter.CTkScrollableFrame):\n    def __init__(self, master, item_list, command=None, **kwargs):\n        super().__init__(master, **kwargs)\n        self.command = command\n        self.checkbox_list = []\n        for i, item in enumerate(item_list):\n            self.add_item(item)\n    def add_item(self, item):\n        checkbox = customtkinter.CTkCheckBox(self, text=item)\n        if self.command is not None:",
        "detail": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "documentation": {}
    },
    {
        "label": "ScrollableRadiobuttonFrame",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "description": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "peekOfCode": "class ScrollableRadiobuttonFrame(customtkinter.CTkScrollableFrame):\n    def __init__(self, master, item_list, command=None, **kwargs):\n        super().__init__(master, **kwargs)\n        self.command = command\n        self.radiobutton_variable = customtkinter.StringVar()\n        self.radiobutton_list = []\n        for i, item in enumerate(item_list):\n            self.add_item(item)\n    def add_item(self, item):\n        radiobutton = customtkinter.CTkRadioButton(self, text=item, value=item, variable=self.radiobutton_variable)",
        "detail": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "documentation": {}
    },
    {
        "label": "ScrollableLabelButtonFrame",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "description": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "peekOfCode": "class ScrollableLabelButtonFrame(customtkinter.CTkScrollableFrame):\n    def __init__(self, master, command=None, **kwargs):\n        super().__init__(master, **kwargs)\n        self.grid_columnconfigure(0, weight=1)\n        self.command = command\n        self.radiobutton_variable = customtkinter.StringVar()\n        self.label_list = []\n        self.button_list = []\n    def add_item(self, item, image=None):\n        label = customtkinter.CTkLabel(self, text=item, image=image, compound=\"left\", padx=5, anchor=\"w\")",
        "detail": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "description": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"CTkScrollableFrame example\")\n        self.grid_rowconfigure(0, weight=1)\n        self.columnconfigure(2, weight=1)\n        # create scrollable checkbox frame\n        self.scrollable_checkbox_frame = ScrollableCheckBoxFrame(master=self, width=200, command=self.checkbox_frame_event,\n                                                                 item_list=[f\"item {i}\" for i in range(50)])\n        self.scrollable_checkbox_frame.grid(row=0, column=0, padx=15, pady=15, sticky=\"ns\")",
        "detail": "Графический интерфейс.code.CustomTkinter.scrollable_frame_example",
        "documentation": {}
    },
    {
        "label": "button_callback",
        "kind": 2,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "def button_callback():\n    print(\"Button click\", combobox_1.get())\ndef slider_callback(value):\n    progressbar_1.set(value)\nframe_1 = customtkinter.CTkFrame(master=app)\nframe_1.pack(pady=20, padx=60, fill=\"both\", expand=True)\nlabel_1 = customtkinter.CTkLabel(master=frame_1, justify=customtkinter.LEFT)\nlabel_1.pack(pady=10, padx=10)\nprogressbar_1 = customtkinter.CTkProgressBar(master=frame_1)\nprogressbar_1.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "slider_callback",
        "kind": 2,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "def slider_callback(value):\n    progressbar_1.set(value)\nframe_1 = customtkinter.CTkFrame(master=app)\nframe_1.pack(pady=20, padx=60, fill=\"both\", expand=True)\nlabel_1 = customtkinter.CTkLabel(master=frame_1, justify=customtkinter.LEFT)\nlabel_1.pack(pady=10, padx=10)\nprogressbar_1 = customtkinter.CTkProgressBar(master=frame_1)\nprogressbar_1.pack(pady=10, padx=10)\nbutton_1 = customtkinter.CTkButton(master=frame_1, command=button_callback)\nbutton_1.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry(\"400x780\")\napp.title(\"CustomTkinter simple_example.py\")\ndef button_callback():\n    print(\"Button click\", combobox_1.get())\ndef slider_callback(value):\n    progressbar_1.set(value)\nframe_1 = customtkinter.CTkFrame(master=app)\nframe_1.pack(pady=20, padx=60, fill=\"both\", expand=True)\nlabel_1 = customtkinter.CTkLabel(master=frame_1, justify=customtkinter.LEFT)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "frame_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "frame_1 = customtkinter.CTkFrame(master=app)\nframe_1.pack(pady=20, padx=60, fill=\"both\", expand=True)\nlabel_1 = customtkinter.CTkLabel(master=frame_1, justify=customtkinter.LEFT)\nlabel_1.pack(pady=10, padx=10)\nprogressbar_1 = customtkinter.CTkProgressBar(master=frame_1)\nprogressbar_1.pack(pady=10, padx=10)\nbutton_1 = customtkinter.CTkButton(master=frame_1, command=button_callback)\nbutton_1.pack(pady=10, padx=10)\nslider_1 = customtkinter.CTkSlider(master=frame_1, command=slider_callback, from_=0, to=1)\nslider_1.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "label_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "label_1 = customtkinter.CTkLabel(master=frame_1, justify=customtkinter.LEFT)\nlabel_1.pack(pady=10, padx=10)\nprogressbar_1 = customtkinter.CTkProgressBar(master=frame_1)\nprogressbar_1.pack(pady=10, padx=10)\nbutton_1 = customtkinter.CTkButton(master=frame_1, command=button_callback)\nbutton_1.pack(pady=10, padx=10)\nslider_1 = customtkinter.CTkSlider(master=frame_1, command=slider_callback, from_=0, to=1)\nslider_1.pack(pady=10, padx=10)\nslider_1.set(0.5)\nentry_1 = customtkinter.CTkEntry(master=frame_1, placeholder_text=\"CTkEntry\")",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "progressbar_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "progressbar_1 = customtkinter.CTkProgressBar(master=frame_1)\nprogressbar_1.pack(pady=10, padx=10)\nbutton_1 = customtkinter.CTkButton(master=frame_1, command=button_callback)\nbutton_1.pack(pady=10, padx=10)\nslider_1 = customtkinter.CTkSlider(master=frame_1, command=slider_callback, from_=0, to=1)\nslider_1.pack(pady=10, padx=10)\nslider_1.set(0.5)\nentry_1 = customtkinter.CTkEntry(master=frame_1, placeholder_text=\"CTkEntry\")\nentry_1.pack(pady=10, padx=10)\noptionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "button_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "button_1 = customtkinter.CTkButton(master=frame_1, command=button_callback)\nbutton_1.pack(pady=10, padx=10)\nslider_1 = customtkinter.CTkSlider(master=frame_1, command=slider_callback, from_=0, to=1)\nslider_1.pack(pady=10, padx=10)\nslider_1.set(0.5)\nentry_1 = customtkinter.CTkEntry(master=frame_1, placeholder_text=\"CTkEntry\")\nentry_1.pack(pady=10, padx=10)\noptionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\noptionmenu_1.pack(pady=10, padx=10)\noptionmenu_1.set(\"CTkOptionMenu\")",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "slider_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "slider_1 = customtkinter.CTkSlider(master=frame_1, command=slider_callback, from_=0, to=1)\nslider_1.pack(pady=10, padx=10)\nslider_1.set(0.5)\nentry_1 = customtkinter.CTkEntry(master=frame_1, placeholder_text=\"CTkEntry\")\nentry_1.pack(pady=10, padx=10)\noptionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\noptionmenu_1.pack(pady=10, padx=10)\noptionmenu_1.set(\"CTkOptionMenu\")\ncombobox_1 = customtkinter.CTkComboBox(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\ncombobox_1.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "entry_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "entry_1 = customtkinter.CTkEntry(master=frame_1, placeholder_text=\"CTkEntry\")\nentry_1.pack(pady=10, padx=10)\noptionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\noptionmenu_1.pack(pady=10, padx=10)\noptionmenu_1.set(\"CTkOptionMenu\")\ncombobox_1 = customtkinter.CTkComboBox(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\ncombobox_1.pack(pady=10, padx=10)\ncombobox_1.set(\"CTkComboBox\")\ncheckbox_1 = customtkinter.CTkCheckBox(master=frame_1)\ncheckbox_1.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "optionmenu_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "optionmenu_1 = customtkinter.CTkOptionMenu(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\noptionmenu_1.pack(pady=10, padx=10)\noptionmenu_1.set(\"CTkOptionMenu\")\ncombobox_1 = customtkinter.CTkComboBox(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\ncombobox_1.pack(pady=10, padx=10)\ncombobox_1.set(\"CTkComboBox\")\ncheckbox_1 = customtkinter.CTkCheckBox(master=frame_1)\ncheckbox_1.pack(pady=10, padx=10)\nradiobutton_var = customtkinter.IntVar(value=1)\nradiobutton_1 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=1)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "combobox_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "combobox_1 = customtkinter.CTkComboBox(frame_1, values=[\"Option 1\", \"Option 2\", \"Option 42 long long long...\"])\ncombobox_1.pack(pady=10, padx=10)\ncombobox_1.set(\"CTkComboBox\")\ncheckbox_1 = customtkinter.CTkCheckBox(master=frame_1)\ncheckbox_1.pack(pady=10, padx=10)\nradiobutton_var = customtkinter.IntVar(value=1)\nradiobutton_1 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=1)\nradiobutton_1.pack(pady=10, padx=10)\nradiobutton_2 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=2)\nradiobutton_2.pack(pady=10, padx=10)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "checkbox_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "checkbox_1 = customtkinter.CTkCheckBox(master=frame_1)\ncheckbox_1.pack(pady=10, padx=10)\nradiobutton_var = customtkinter.IntVar(value=1)\nradiobutton_1 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=1)\nradiobutton_1.pack(pady=10, padx=10)\nradiobutton_2 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=2)\nradiobutton_2.pack(pady=10, padx=10)\nswitch_1 = customtkinter.CTkSwitch(master=frame_1)\nswitch_1.pack(pady=10, padx=10)\ntext_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "radiobutton_var",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "radiobutton_var = customtkinter.IntVar(value=1)\nradiobutton_1 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=1)\nradiobutton_1.pack(pady=10, padx=10)\nradiobutton_2 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=2)\nradiobutton_2.pack(pady=10, padx=10)\nswitch_1 = customtkinter.CTkSwitch(master=frame_1)\nswitch_1.pack(pady=10, padx=10)\ntext_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)\ntext_1.pack(pady=10, padx=10)\ntext_1.insert(\"0.0\", \"CTkTextbox\\n\\n\\n\\n\")",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "radiobutton_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "radiobutton_1 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=1)\nradiobutton_1.pack(pady=10, padx=10)\nradiobutton_2 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=2)\nradiobutton_2.pack(pady=10, padx=10)\nswitch_1 = customtkinter.CTkSwitch(master=frame_1)\nswitch_1.pack(pady=10, padx=10)\ntext_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)\ntext_1.pack(pady=10, padx=10)\ntext_1.insert(\"0.0\", \"CTkTextbox\\n\\n\\n\\n\")\nsegmented_button_1 = customtkinter.CTkSegmentedButton(master=frame_1, values=[\"CTkSegmentedButton\", \"Value 2\"])",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "radiobutton_2",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "radiobutton_2 = customtkinter.CTkRadioButton(master=frame_1, variable=radiobutton_var, value=2)\nradiobutton_2.pack(pady=10, padx=10)\nswitch_1 = customtkinter.CTkSwitch(master=frame_1)\nswitch_1.pack(pady=10, padx=10)\ntext_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)\ntext_1.pack(pady=10, padx=10)\ntext_1.insert(\"0.0\", \"CTkTextbox\\n\\n\\n\\n\")\nsegmented_button_1 = customtkinter.CTkSegmentedButton(master=frame_1, values=[\"CTkSegmentedButton\", \"Value 2\"])\nsegmented_button_1.pack(pady=10, padx=10)\ntabview_1 = customtkinter.CTkTabview(master=frame_1, width=200, height=70)",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "switch_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "switch_1 = customtkinter.CTkSwitch(master=frame_1)\nswitch_1.pack(pady=10, padx=10)\ntext_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)\ntext_1.pack(pady=10, padx=10)\ntext_1.insert(\"0.0\", \"CTkTextbox\\n\\n\\n\\n\")\nsegmented_button_1 = customtkinter.CTkSegmentedButton(master=frame_1, values=[\"CTkSegmentedButton\", \"Value 2\"])\nsegmented_button_1.pack(pady=10, padx=10)\ntabview_1 = customtkinter.CTkTabview(master=frame_1, width=200, height=70)\ntabview_1.pack(pady=10, padx=10)\ntabview_1.add(\"CTkTabview\")",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "text_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "text_1 = customtkinter.CTkTextbox(master=frame_1, width=200, height=70)\ntext_1.pack(pady=10, padx=10)\ntext_1.insert(\"0.0\", \"CTkTextbox\\n\\n\\n\\n\")\nsegmented_button_1 = customtkinter.CTkSegmentedButton(master=frame_1, values=[\"CTkSegmentedButton\", \"Value 2\"])\nsegmented_button_1.pack(pady=10, padx=10)\ntabview_1 = customtkinter.CTkTabview(master=frame_1, width=200, height=70)\ntabview_1.pack(pady=10, padx=10)\ntabview_1.add(\"CTkTabview\")\ntabview_1.add(\"Tab 2\")\napp.mainloop()",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "segmented_button_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "segmented_button_1 = customtkinter.CTkSegmentedButton(master=frame_1, values=[\"CTkSegmentedButton\", \"Value 2\"])\nsegmented_button_1.pack(pady=10, padx=10)\ntabview_1 = customtkinter.CTkTabview(master=frame_1, width=200, height=70)\ntabview_1.pack(pady=10, padx=10)\ntabview_1.add(\"CTkTabview\")\ntabview_1.add(\"Tab 2\")\napp.mainloop()",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "tabview_1",
        "kind": 5,
        "importPath": "Графический интерфейс.code.CustomTkinter.simple_example",
        "description": "Графический интерфейс.code.CustomTkinter.simple_example",
        "peekOfCode": "tabview_1 = customtkinter.CTkTabview(master=frame_1, width=200, height=70)\ntabview_1.pack(pady=10, padx=10)\ntabview_1.add(\"CTkTabview\")\ntabview_1.add(\"Tab 2\")\napp.mainloop()",
        "detail": "Графический интерфейс.code.CustomTkinter.simple_example",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.code.TkinterMapView.map_with_customtkinter",
        "description": "Графический интерфейс.code.TkinterMapView.map_with_customtkinter",
        "peekOfCode": "class App(customtkinter.CTk):\n    APP_NAME = \"TkinterMapView with CustomTkinter\"\n    WIDTH = 800\n    HEIGHT = 500\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.title(App.APP_NAME)\n        self.geometry(str(App.WIDTH) + \"x\" + str(App.HEIGHT))\n        self.minsize(App.WIDTH, App.HEIGHT)\n        self.protocol(\"WM_DELETE_WINDOW\", self.on_closing)",
        "detail": "Графический интерфейс.code.TkinterMapView.map_with_customtkinter",
        "documentation": {}
    },
    {
        "label": "button_function",
        "kind": 2,
        "importPath": "Графический интерфейс.example_1",
        "description": "Графический интерфейс.example_1",
        "peekOfCode": "def button_function():\n    print(\"button pressed\")\nbutton = customtkinter.CTkButton(master=app, text=\"Subscribe to ZProger\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Графический интерфейс.example_1",
        "description": "Графический интерфейс.example_1",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry(\"400x240\")\ndef button_function():\n    print(\"button pressed\")\nbutton = customtkinter.CTkButton(master=app, text=\"Subscribe to ZProger\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_1",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "Графический интерфейс.example_1",
        "description": "Графический интерфейс.example_1",
        "peekOfCode": "button = customtkinter.CTkButton(master=app, text=\"Subscribe to ZProger\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_1",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.example_2",
        "description": "Графический интерфейс.example_2",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.geometry(\"600x500\")\n        self.title(\"CTk example\")\n        self.button = customtkinter.CTkButton(self, text=\"Subscribe to ZProger\", command=self.button_click)\n        self.button.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\n    def button_click(self):\n        print(\"button click\")\napp = App()",
        "detail": "Графический интерфейс.example_2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Графический интерфейс.example_2",
        "description": "Графический интерфейс.example_2",
        "peekOfCode": "app = App()\napp.mainloop()",
        "detail": "Графический интерфейс.example_2",
        "documentation": {}
    },
    {
        "label": "ToplevelWindow",
        "kind": 6,
        "importPath": "Графический интерфейс.example_3",
        "description": "Графический интерфейс.example_3",
        "peekOfCode": "class ToplevelWindow(customtkinter.CTkToplevel):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"400x300\")\n        self.label = customtkinter.CTkLabel(self, text=\"ToplevelWindow\")\n        self.label.pack(padx=20, pady=20)\nclass App(customtkinter.CTk):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"500x400\")",
        "detail": "Графический интерфейс.example_3",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.example_3",
        "description": "Графический интерфейс.example_3",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"500x400\")\n        self.button_1 = customtkinter.CTkButton(self, text=\"open toplevel\", command=self.open_toplevel)\n        self.button_1.pack(side=\"top\", padx=20, pady=20)\n        self.toplevel_window = None\n    def open_toplevel(self):\n        if self.toplevel_window is None or not self.toplevel_window.winfo_exists():\n            # create window if its None or destroyed",
        "detail": "Графический интерфейс.example_3",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс.example_4",
        "description": "Графический интерфейс.example_4",
        "peekOfCode": "class App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.geometry(\"600x500\")\n        self.title(\"CTk example\")\n        combobox = customtkinter.CTkOptionMenu(self,\n                                       values=list(SITES.keys()),\n                                       command=self.optionmenu_callback)\n        combobox.pack(padx=20, pady=10)\n        combobox.set(\"option 2\")  # set initial value",
        "detail": "Графический интерфейс.example_4",
        "documentation": {}
    },
    {
        "label": "SITES",
        "kind": 5,
        "importPath": "Графический интерфейс.example_4",
        "description": "Графический интерфейс.example_4",
        "peekOfCode": "SITES = {\n    \"option_1\": \"https://doc.rust-lang.org/book/\",\n    \"option_2\": \"https://stackoverflow.com/questions/1077347/hello-world-in-python\"\n}\nclass App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.geometry(\"600x500\")\n        self.title(\"CTk example\")\n        combobox = customtkinter.CTkOptionMenu(self,",
        "detail": "Графический интерфейс.example_4",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Графический интерфейс.example_4",
        "description": "Графический интерфейс.example_4",
        "peekOfCode": "app = App()\napp.mainloop()",
        "detail": "Графический интерфейс.example_4",
        "documentation": {}
    },
    {
        "label": "button_click_event",
        "kind": 2,
        "importPath": "Графический интерфейс.example_5",
        "description": "Графический интерфейс.example_5",
        "peekOfCode": "def button_click_event():\n    dialog = customtkinter.CTkInputDialog(text=\"Site URL:\", title=\"Test\")\n    response = dialog.get_input()\n    webbrowser.open(response)\nbutton = customtkinter.CTkButton(app, text=\"Open Dialog\", command=button_click_event)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_5",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Графический интерфейс.example_5",
        "description": "Графический интерфейс.example_5",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry(\"400x300\")\ndef button_click_event():\n    dialog = customtkinter.CTkInputDialog(text=\"Site URL:\", title=\"Test\")\n    response = dialog.get_input()\n    webbrowser.open(response)\nbutton = customtkinter.CTkButton(app, text=\"Open Dialog\", command=button_click_event)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_5",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "Графический интерфейс.example_5",
        "description": "Графический интерфейс.example_5",
        "peekOfCode": "button = customtkinter.CTkButton(app, text=\"Open Dialog\", command=button_click_event)\nbutton.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)\napp.mainloop()",
        "detail": "Графический интерфейс.example_5",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Графический интерфейс Flet.projects.1.shoes",
        "description": "Графический интерфейс Flet.projects.1.shoes",
        "peekOfCode": "class App(UserControl):\n    # First: a minor gradient maker function here to return a specific gradient,\n    # you can use this or not, depends on the app\n    def GradientGenerator(self, start, end):\n        self.ColorGradient = LinearGradient(\n            begin=alignment.bottom_left,\n            end=alignment.top_right,\n            colors=[\n                start,\n                end,",
        "detail": "Графический интерфейс Flet.projects.1.shoes",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.1.shoes",
        "description": "Графический интерфейс Flet.projects.1.shoes",
        "peekOfCode": "def start(page: Page):\n    page.title = \"Product UI Design\"\n    page.window_width = 1400\n    page.window_height = 900\n    page.update()\n    # Add an instance of the App() class to the page before getting started\n    app = App()\n    page.add(app)\nif __name__ == \"__main__\":\n    # Also if you're following along, make sure to specify the folder where the images are located at",
        "detail": "Графический интерфейс Flet.projects.1.shoes",
        "documentation": {}
    },
    {
        "label": "CustomPieChart",
        "kind": 6,
        "importPath": "Графический интерфейс Flet.projects.2.main",
        "description": "Графический интерфейс Flet.projects.2.main",
        "peekOfCode": "class CustomPieChart(ft.UserControl):\n    def __init__(self, val: int, color: any, title: str):\n        # numerical instances for pie chart\n        self.val: int = val\n        self.delta_val: int = 100 - self.val\n        self.random_range = random.randint(5, 9)\n        # UI instances of pie chart\n        self.color: any = color\n        self.bg_color = ft.colors.with_opacity(0.025, \"white\")\n        self.base_radius: int = 15",
        "detail": "Графический интерфейс Flet.projects.2.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.2.main",
        "description": "Графический интерфейс Flet.projects.2.main",
        "peekOfCode": "def main(page: ft.Page):\n    # page settings\n    page.horizontal_alignment = \"center\"\n    page.vertical_alignment = \"center\"\n    # page.bgcolor = \"teal900\"\n    #\n    pieOne = CustomPieChart(val=25, color=\"teal\", title=\"Expenses\")\n    pieTwo = CustomPieChart(val=45, color=\"red\", title=\"Income\")\n    #\n    page.add(",
        "detail": "Графический интерфейс Flet.projects.2.main",
        "documentation": {}
    },
    {
        "label": "AnimatedBox",
        "kind": 6,
        "importPath": "Графический интерфейс Flet.projects.3.main",
        "description": "Графический интерфейс Flet.projects.3.main",
        "peekOfCode": "class AnimatedBox(UserControl):\n    def __init__(self, border_color, bg_color, rotate_angle):\n        self.border_color = border_color\n        self.bg_color = bg_color\n        self.rotate_angle = rotate_angle\n        super().__init__()\n    def build(self):\n        return Container(\n            width=64,\n            height=64,",
        "detail": "Графический интерфейс Flet.projects.3.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.3.main",
        "description": "Графический интерфейс Flet.projects.3.main",
        "peekOfCode": "def main(page: Page):\n    page.horizontal_alignment = \"center\"\n    page.vertical_alignment = \"center\"\n    page.bgcolor = \"#1f262f\"\n    def animate_boxes():\n        clock_wise_rotate = pi / 4\n        counter_clock_wise_rotate = -pi * 2\n        red_box = page.controls[0].controls[0].controls[0]\n        blue_box = page.controls[0].controls[1].controls[0]\n        counter = 0",
        "detail": "Графический интерфейс Flet.projects.3.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.4.main",
        "description": "Графический интерфейс Flet.projects.4.main",
        "peekOfCode": "def main(page: Page):\n    # title\n    page.title = \"Flet Animated Icons\"\n    # alignment\n    page.horizontal_alignment = \"center\"\n    page.vertical_alignment = \"center\"\n    # main row\n    _main_row = Container(\n        content=Row(\n            alignment=MainAxisAlignment.CENTER,",
        "detail": "Графический интерфейс Flet.projects.4.main",
        "documentation": {}
    },
    {
        "label": "RealTimeChart",
        "kind": 6,
        "importPath": "Графический интерфейс Flet.projects.5.main",
        "description": "Графический интерфейс Flet.projects.5.main",
        "peekOfCode": "class RealTimeChart(ft.UserControl):\n    def __init__(self):\n        #\n        self.y_labels: list = []\n        self.data_points: list = []\n        self.points: list = POINTS\n        #\n        self.chart: ft.Control = ft.LineChart(\n            tooltip_bgcolor=ft.colors.with_opacity(0.8, ft.colors.WHITE),\n            min_y=int(min(self.points, key=lambda y: y[1])[1]),",
        "detail": "Графический интерфейс Flet.projects.5.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.5.main",
        "description": "Графический интерфейс Flet.projects.5.main",
        "peekOfCode": "def main(page: ft.Page):\n    page.horizontal_alignment = \"center\"\n    page.vertical_alignment = \"center\"\n    chart = RealTimeChart()\n    page.add(\n        ft.Column(\n            expand=True,\n            alignment=\"center\",\n            horizontal_alignment=\"center\",\n            controls=[",
        "detail": "Графический интерфейс Flet.projects.5.main",
        "documentation": {}
    },
    {
        "label": "POINTS",
        "kind": 5,
        "importPath": "Графический интерфейс Flet.projects.5.main",
        "description": "Графический интерфейс Flet.projects.5.main",
        "peekOfCode": "POINTS = [\n    (0, 273.60),\n    (1, 279.00),\n    (2, 348.20),\n    (3, 363.70),\n    (4, 438.40),\n    (5, 518.90),\n    (6, 638.00),\n    (7, 833.75),\n    (8, 874.75),",
        "detail": "Графический интерфейс Flet.projects.5.main",
        "documentation": {}
    },
    {
        "label": "BTC",
        "kind": 5,
        "importPath": "Графический интерфейс Flet.projects.5.main",
        "description": "Графический интерфейс Flet.projects.5.main",
        "peekOfCode": "BTC = [\n    (9, 0.0008),\n    (10, 0.07),\n    (11, 0.95),\n    (12, 13.44),\n    (13, 817.36),\n    (14, 314.24),\n    (15, 430.05),\n    (16, 963.74),\n    (17, 13880.74),",
        "detail": "Графический интерфейс Flet.projects.5.main",
        "documentation": {}
    },
    {
        "label": "AnimatedCard",
        "kind": 6,
        "importPath": "Графический интерфейс Flet.projects.6.main",
        "description": "Графический интерфейс Flet.projects.6.main",
        "peekOfCode": "class AnimatedCard(UserControl):\n    def __int__(self):\n        super().__int__()\n    def build(self):\n        self._icon_container_ = Container(\n            width=120,\n            height=35,\n            bgcolor=colors.BLUE_800,\n            border_radius=25,\n            animate_opacity=200,",
        "detail": "Графический интерфейс Flet.projects.6.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.projects.6.main",
        "description": "Графический интерфейс Flet.projects.6.main",
        "peekOfCode": "def main(page: Page):\n    page.bgcolor = colors.WHITE60\n    app = AnimatedCard()\n    page.add(app)\n    page.update()\nif __name__ == \"__main__\":\n    flet.app(target=main, view=flet.WEB_BROWSER)",
        "detail": "Графический интерфейс Flet.projects.6.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.1",
        "description": "Графический интерфейс Flet.1",
        "peekOfCode": "def main(page: ft.Page):\n    page.title = \"Flet counter example\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    txt_number = ft.TextField(value=\"0\", text_align=ft.TextAlign.RIGHT, width=100)\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()",
        "detail": "Графический интерфейс Flet.1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.10",
        "description": "Графический интерфейс Flet.10",
        "peekOfCode": "def main(page: ft.Page):\n    for i in range(500):\n        page.controls.append(ft.Text(f\"Line {i}\"))\n    page.scroll = \"always\"\n    page.update()\nft.app(target=main, view=ft.WEB_BROWSER)",
        "detail": "Графический интерфейс Flet.10",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.11",
        "description": "Графический интерфейс Flet.11",
        "peekOfCode": "def main(page: ft.Page):\n    page.title = \"Drag and Drop example\"\n    def drag_accept(e):\n        # get draggable (source) control by its ID\n        src = page.get_control(e.src_id)\n        # update text inside draggable control\n        src.content.content.value = \"0\"\n        # update text inside drag target control\n        e.control.content.content.value = \"1\"\n        page.update()",
        "detail": "Графический интерфейс Flet.11",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.12",
        "description": "Графический интерфейс Flet.12",
        "peekOfCode": "def main(page: ft.Page):\n    page.title = \"Flet Chat\"\n    # subscribe to broadcast messages\n    def on_message(msg):\n        messages.controls.append(ft.Text(msg))\n        page.update()\n    page.pubsub.subscribe(on_message)\n    def send_click(e):\n        page.pubsub.send_all(f\"{user.value}: {message.value}\")\n        # clean up the form",
        "detail": "Графический интерфейс Flet.12",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.2",
        "description": "Графический интерфейс Flet.2",
        "peekOfCode": "def main(page: ft.Page):\n    pass\nft.app(target=main, view=ft.WEB_BROWSER)",
        "detail": "Графический интерфейс Flet.2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.3",
        "description": "Графический интерфейс Flet.3",
        "peekOfCode": "def main(page: ft.Page):\n    # Добавляем текст на страницу\n    # t = ft.Text(value=\"Hello, world!\", color=\"green\")\n    # page.controls.append(t)\n    # page.update()\n    # Автоматическая генерация\n    t = ft.Text()\n    page.add(t)\n    for i in range(10):\n        t.value = f\"Step {i}\"",
        "detail": "Графический интерфейс Flet.3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.4",
        "description": "Графический интерфейс Flet.4",
        "peekOfCode": "def main(page):\n    def add_clicked(e):\n        page.add(ft.Checkbox(label=new_task.value))\n        new_task.value = \"\"\n        new_task.focus()\n        new_task.update()\n    new_task = ft.TextField(hint_text=\"Whats needs to be done?\", width=300)\n    page.add(ft.Row([new_task, ft.ElevatedButton(\"Add\", on_click=add_clicked)]))\nft.app(target=main, view=ft.WEB_BROWSER)",
        "detail": "Графический интерфейс Flet.4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.5",
        "description": "Графический интерфейс Flet.5",
        "peekOfCode": "def main(page):\n    first_name = ft.TextField(label=\"First name\", autofocus=True)\n    last_name = ft.TextField(label=\"Last name\")\n    greetings = ft.Column()\n    def btn_click(e):\n        greetings.controls.append(ft.Text(f\"Hello, {first_name.value} {last_name.value}!\"))\n        first_name.value = \"\"\n        last_name.value = \"\"\n        page.update()\n        first_name.focus()",
        "detail": "Графический интерфейс Flet.5",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.6",
        "description": "Графический интерфейс Flet.6",
        "peekOfCode": "def main(page):\n    def checkbox_changed(e):\n        output_text.value = (\n            f\"You have learned how to ski :  {todo_check.value}.\"\n        )\n        page.update()\n    output_text = ft.Text()\n    todo_check = ft.Checkbox(label=\"ToDo: Learn how to use ski\", value=False, on_change=checkbox_changed)\n    page.add(todo_check, output_text)\nft.app(target=main, view=ft.WEB_BROWSER)",
        "detail": "Графический интерфейс Flet.6",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.7",
        "description": "Графический интерфейс Flet.7",
        "peekOfCode": "def main(page: ft.Page):\n    def button_clicked(e):\n        output_text.value = f\"Dropdown value is:  {color_dropdown.value}\"\n        page.update()\n    output_text = ft.Text()\n    submit_btn = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    color_dropdown = ft.Dropdown(\n        width=100,\n        options=[\n            ft.dropdown.Option(\"Red\"),",
        "detail": "Графический интерфейс Flet.7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.8",
        "description": "Графический интерфейс Flet.8",
        "peekOfCode": "def main(page: ft.Page):\n    def on_keyboard(e: ft.KeyboardEvent):\n        page.add(\n            ft.Text(\n                f\"Key: {e.key}, Shift: {e.shift}, Control: {e.ctrl}, Alt: {e.alt}, Meta: {e.meta}\"\n            )\n        )\n    page.on_keyboard_event = on_keyboard\n    page.add(\n        ft.Text(\"Press any key with a combination of CTRL, ALT, SHIFT and META keys...\")",
        "detail": "Графический интерфейс Flet.8",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Графический интерфейс Flet.9",
        "description": "Графический интерфейс Flet.9",
        "peekOfCode": "def main(page):\n    # Добавляем тему к приложению\n    page.theme = ft.Theme(\n        color_scheme=ft.ColorScheme(\n            primary=ft.colors.GREEN,\n            primary_container=ft.colors.GREEN_200\n        ),\n    )\n    def add_clicked(e):\n        page.add(ft.Checkbox(label=new_task.value))",
        "detail": "Графический интерфейс Flet.9",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Задачи.Parsing",
        "description": "Задачи.Parsing",
        "peekOfCode": "url = [\n    \"https://habr.com/ru/post/580888/\",\n    \"https://habr.com/ru/post/579100/\",\n]\nfile = open('article.txt', 'a', encoding='utf8')\nfor x in url:\n    soup = BeautifulSoup(urlopen(x).read(), 'html.parser')\n    s = soup.find('title').text\n    file.write(s+'\\n')\n    p = soup.find_all('p')",
        "detail": "Задачи.Parsing",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Задачи.Parsing",
        "description": "Задачи.Parsing",
        "peekOfCode": "file = open('article.txt', 'a', encoding='utf8')\nfor x in url:\n    soup = BeautifulSoup(urlopen(x).read(), 'html.parser')\n    s = soup.find('title').text\n    file.write(s+'\\n')\n    p = soup.find_all('p')\n    print(s)\n    for j in p:\n        print(j.text)\n        file.write(j.text+'\\n')",
        "detail": "Задачи.Parsing",
        "documentation": {}
    },
    {
        "label": "get_random_cat_image",
        "kind": 2,
        "importPath": "Задачи.Случайная картинка с котом",
        "description": "Задачи.Случайная картинка с котом",
        "peekOfCode": "def get_random_cat_image():\n    # Выполняем GET-запрос к API\n    response: requests.Response = requests.get(f\"{API}/images/search\")\n    if response.status_code == 200:  # Проверяем, успешен ли запрос\n        # Преобразуем ответ в формате JSON в словарь\n        data = response.json()\n        # Извлекаем URL изображения из данных\n        image_url = data[0][\"url\"]\n        # Возвращаем URL изображения\n        return image_url",
        "detail": "Задачи.Случайная картинка с котом",
        "documentation": {}
    },
    {
        "label": "display_image",
        "kind": 2,
        "importPath": "Задачи.Случайная картинка с котом",
        "description": "Задачи.Случайная картинка с котом",
        "peekOfCode": "def display_image(image_url: str) -> None:\n    # Выполняем GET-запрос для получения изображения\n    response = requests.get(image_url)\n    # Проверяем, успешен ли запрос\n    if response.status_code == 200:\n        # Извлекаем содержимое ответа (данные изображения)\n        img_data = response.content\n        # Открываем изображение из байтового потока\n        img = Image.open(BytesIO(img_data))\n        # Показываем изображение",
        "detail": "Задачи.Случайная картинка с котом",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Задачи.Случайная картинка с котом",
        "description": "Задачи.Случайная картинка с котом",
        "peekOfCode": "def main() -> None:\n    # Получаем URL случайного изображения кота\n    image_url = get_random_cat_image()\n    # Печатаем URL изображения\n    print(f\"URL изображения кота: {image_url}\")\n    # Отображаем изображение\n    display_image(image_url)\nif __name__ == \"__main__\":\n    main()",
        "detail": "Задачи.Случайная картинка с котом",
        "documentation": {}
    },
    {
        "label": "API",
        "kind": 5,
        "importPath": "Задачи.Случайная картинка с котом",
        "description": "Задачи.Случайная картинка с котом",
        "peekOfCode": "API = \"https://api.thecatapi.com/v1\"\ndef get_random_cat_image():\n    # Выполняем GET-запрос к API\n    response: requests.Response = requests.get(f\"{API}/images/search\")\n    if response.status_code == 200:  # Проверяем, успешен ли запрос\n        # Преобразуем ответ в формате JSON в словарь\n        data = response.json()\n        # Извлекаем URL изображения из данных\n        image_url = data[0][\"url\"]\n        # Возвращаем URL изображения",
        "detail": "Задачи.Случайная картинка с котом",
        "documentation": {}
    },
    {
        "label": "show_congratulation",
        "kind": 2,
        "importPath": "Поздравления с днём программиста.1 код",
        "description": "Поздравления с днём программиста.1 код",
        "peekOfCode": "def show_congratulation():\n    messagebox.showinfo(\"Поздравление\", \"Поздравляю с Днём программиста!\\nПусть код всегда работает!\")\n# Создаем основное окно\nroot = tk.Tk()\nroot.title(\"Поздравление с Днём программиста\")\nroot.geometry(\"400x300\")\n# Надпись с поздравлением\nlabel = tk.Label(root, text=\"С Днём программиста!\", font=(\"Helvetica\", 18), fg=\"blue\")\nlabel.pack(pady=50)\n# Кнопка для отображения всплывающего сообщения",
        "detail": "Поздравления с днём программиста.1 код",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.1 код",
        "description": "Поздравления с днём программиста.1 код",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Поздравление с Днём программиста\")\nroot.geometry(\"400x300\")\n# Надпись с поздравлением\nlabel = tk.Label(root, text=\"С Днём программиста!\", font=(\"Helvetica\", 18), fg=\"blue\")\nlabel.pack(pady=50)\n# Кнопка для отображения всплывающего сообщения\nbutton = tk.Button(root, text=\"Показать поздравление\", command=show_congratulation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики",
        "detail": "Поздравления с днём программиста.1 код",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.1 код",
        "description": "Поздравления с днём программиста.1 код",
        "peekOfCode": "label = tk.Label(root, text=\"С Днём программиста!\", font=(\"Helvetica\", 18), fg=\"blue\")\nlabel.pack(pady=50)\n# Кнопка для отображения всплывающего сообщения\nbutton = tk.Button(root, text=\"Показать поздравление\", command=show_congratulation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики\ncanvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, смайлик)\ncanvas.create_oval(50, 20, 150, 100, fill=\"yellow\", outline=\"black\")",
        "detail": "Поздравления с днём программиста.1 код",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.1 код",
        "description": "Поздравления с днём программиста.1 код",
        "peekOfCode": "button = tk.Button(root, text=\"Показать поздравление\", command=show_congratulation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики\ncanvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, смайлик)\ncanvas.create_oval(50, 20, 150, 100, fill=\"yellow\", outline=\"black\")\ncanvas.create_oval(70, 40, 90, 60, fill=\"black\")  # Левый глаз\ncanvas.create_oval(110, 40, 130, 60, fill=\"black\")  # Правый глаз\ncanvas.create_arc(70, 60, 130, 90, start=0, extent=-180, style=tk.ARC, outline=\"black\")  # Улыбка",
        "detail": "Поздравления с днём программиста.1 код",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.1 код",
        "description": "Поздравления с днём программиста.1 код",
        "peekOfCode": "canvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, смайлик)\ncanvas.create_oval(50, 20, 150, 100, fill=\"yellow\", outline=\"black\")\ncanvas.create_oval(70, 40, 90, 60, fill=\"black\")  # Левый глаз\ncanvas.create_oval(110, 40, 130, 60, fill=\"black\")  # Правый глаз\ncanvas.create_arc(70, 60, 130, 90, start=0, extent=-180, style=tk.ARC, outline=\"black\")  # Улыбка\n# Запуск цикла обработки событий\nroot.mainloop()",
        "detail": "Поздравления с днём программиста.1 код",
        "documentation": {}
    },
    {
        "label": "type_text",
        "kind": 2,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "def type_text(label, text, delay=100):\n    label.config(text=\"\")  # Очищаем текст в метке перед печатью\n    for i in range(len(text) + 1):\n        label.config(text=text[:i])\n        label.update()\n        time.sleep(delay / 1000)\n# Функция для старта анимации\ndef start_animation():\n    type_text(label, \"Поздравляю с Днём программиста!\", delay=150)\n# Создаем основное окно",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "start_animation",
        "kind": 2,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "def start_animation():\n    type_text(label, \"Поздравляю с Днём программиста!\", delay=150)\n# Создаем основное окно\nroot = tk.Tk()\nroot.title(\"Поздравление с Днём программиста\")\nroot.geometry(\"500x400\")\n# Надпись для отображения текста с анимацией\nlabel = tk.Label(root, text=\"\", font=(\"Helvetica\", 16), fg=\"green\")\nlabel.pack(pady=50)\n# Кнопка для запуска анимации",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Поздравление с Днём программиста\")\nroot.geometry(\"500x400\")\n# Надпись для отображения текста с анимацией\nlabel = tk.Label(root, text=\"\", font=(\"Helvetica\", 16), fg=\"green\")\nlabel.pack(pady=50)\n# Кнопка для запуска анимации\nbutton = tk.Button(root, text=\"Показать поздравление\", command=start_animation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "label = tk.Label(root, text=\"\", font=(\"Helvetica\", 16), fg=\"green\")\nlabel.pack(pady=50)\n# Кнопка для запуска анимации\nbutton = tk.Button(root, text=\"Показать поздравление\", command=start_animation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики\ncanvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, сердце)\ncanvas.create_polygon(100, 40, 120, 60, 140, 40, 160, 60, 140, 80, 100, 80, 80, 60, fill=\"red\", outline=\"black\")",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "button = tk.Button(root, text=\"Показать поздравление\", command=start_animation, font=(\"Helvetica\", 12))\nbutton.pack(pady=20)\n# Рисование простого элемента графики\ncanvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, сердце)\ncanvas.create_polygon(100, 40, 120, 60, 140, 40, 160, 60, 140, 80, 100, 80, 80, 60, fill=\"red\", outline=\"black\")\n# Запуск основного цикла\nroot.mainloop()",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.2 код",
        "description": "Поздравления с днём программиста.2 код",
        "peekOfCode": "canvas = tk.Canvas(root, width=200, height=100)\ncanvas.pack()\n# Рисуем простую фигуру (например, сердце)\ncanvas.create_polygon(100, 40, 120, 60, 140, 40, 160, 60, 140, 80, 100, 80, 80, 60, fill=\"red\", outline=\"black\")\n# Запуск основного цикла\nroot.mainloop()",
        "detail": "Поздравления с днём программиста.2 код",
        "documentation": {}
    },
    {
        "label": "create_rain",
        "kind": 2,
        "importPath": "Поздравления с днём программиста.3 код",
        "description": "Поздравления с днём программиста.3 код",
        "peekOfCode": "def create_rain(canvas, width, height):\n    letters = \"0123456789ABCDEF\"  # Строки кода\n    font_size = 14\n    speed = 50\n    # Позиции для строк\n    positions = [random.randint(0, width // font_size) for _ in range(50)]\n    # Бесконечная анимация \"дождя\"\n    while True:\n        canvas.delete(\"all\")  # Очищаем экран\n        for i in range(len(positions)):",
        "detail": "Поздравления с днём программиста.3 код",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.3 код",
        "description": "Поздравления с днём программиста.3 код",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"С Днём программиста\")\nroot.geometry(\"500x500\")\nroot.config(bg=\"black\")\n# Надпись с поздравлением\nlabel = tk.Label(root, text=\"Поздравляю с Днём программиста!\", font=(\"Helvetica\", 16), fg=\"lime\", bg=\"black\")\nlabel.pack(pady=20)\n# Холст для отображения анимации\ncanvas = tk.Canvas(root, width=500, height=400, bg=\"black\")\ncanvas.pack()",
        "detail": "Поздравления с днём программиста.3 код",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.3 код",
        "description": "Поздравления с днём программиста.3 код",
        "peekOfCode": "label = tk.Label(root, text=\"Поздравляю с Днём программиста!\", font=(\"Helvetica\", 16), fg=\"lime\", bg=\"black\")\nlabel.pack(pady=20)\n# Холст для отображения анимации\ncanvas = tk.Canvas(root, width=500, height=400, bg=\"black\")\ncanvas.pack()\n# Запускаем анимацию дождя из кода в отдельном потоке\nroot.after(0, create_rain, canvas, 500, 400)\n# Запуск основного цикла\nroot.mainloop()",
        "detail": "Поздравления с днём программиста.3 код",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "Поздравления с днём программиста.3 код",
        "description": "Поздравления с днём программиста.3 код",
        "peekOfCode": "canvas = tk.Canvas(root, width=500, height=400, bg=\"black\")\ncanvas.pack()\n# Запускаем анимацию дождя из кода в отдельном потоке\nroot.after(0, create_rain, canvas, 500, 400)\n# Запуск основного цикла\nroot.mainloop()",
        "detail": "Поздравления с днём программиста.3 код",
        "documentation": {}
    },
    {
        "label": "RemoteFile",
        "kind": 6,
        "importPath": "Технологии.1",
        "description": "Технологии.1",
        "peekOfCode": "class RemoteFile:\n    def __init__(self, filename, mode='r', server_ip='127.0.0.1', port='4444'):\n        self.__filename = filename\n        self.__mode = mode\n        self.__server_ip = server_ip\n        self.__port = port\n        self.__fp = None\n    # custom write method\n    def remote_write(self, text: str):\n        if self.__fp:",
        "detail": "Технологии.1",
        "documentation": {}
    },
    {
        "label": "Euro",
        "kind": 6,
        "importPath": "Технологии.2",
        "description": "Технологии.2",
        "peekOfCode": "class Euro:\n    \"\"\"\n    Класс должен определить один из:\n    __lt__(), __le__(), __gt__(), или же __ge__()\n    Кроме того, класс должен предоставить __eq__() метод\n    \"\"\"\n    def __init__(self, value: int):\n        self.__value = value\n    # Оператор ==\n    def __eq__(self, other):",
        "detail": "Технологии.2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Технологии.2",
        "description": "Технологии.2",
        "peekOfCode": "a = Euro(100)\nb = Euro(200)\nprint(a > b)\nprint(a < b)\nprint(a == b)\nprint(a != b)\nprint(a >= b)\nprint(a <= b)\na.hyperinflation()\nb.hyperinflation()",
        "detail": "Технологии.2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Технологии.2",
        "description": "Технологии.2",
        "peekOfCode": "b = Euro(200)\nprint(a > b)\nprint(a < b)\nprint(a == b)\nprint(a != b)\nprint(a >= b)\nprint(a <= b)\na.hyperinflation()\nb.hyperinflation()\nprint(a == b)",
        "detail": "Технологии.2",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "Технологии.3",
        "description": "Технологии.3",
        "peekOfCode": "user = {\"results\":[{\"gender\":\"male\",\"name\":{\"title\":\"Mr\",\"first\":\"Justin\",\"last\":\"Olivier\"},\"location\":{\"street\":{\"number\":523,\"name\":\"Quai Charles-De-Gaulle\"},\"city\":\"Paris\",\"state\":\"Drôme\",\"country\":\"France\",\"postcode\":51764,\"coordinates\":{\"latitude\":\"-19.2225\",\"longitude\":\"-68.3569\"},\"timezone\":{\"offset\":\"+2:00\",\"description\":\"Kaliningrad, South Africa\"}},\"email\":\"justin.olivier@example.com\",\"login\":{\"uuid\":\"6c804a47-4d9b-4ba1-89dd-804afd34436a\",\"username\":\"smallsnake602\",\"password\":\"michael\",\"salt\":\"s1MRUMfb\",\"md5\":\"d85994ea97ea7de241ea0cf749d702bd\",\"sha1\":\"6511dbe3abe9295746b555ee02cc40e4379ab8d6\",\"sha256\":\"ad5acbdaad6d96ed09ea14a56803b102e7b9948211c88a6d7cf2f5c44f1074e4\"},\"dob\":{\"date\":\"1948-01-24T00:48:29.473Z\",\"age\":75},\"registered\":{\"date\":\"2007-09-02T17:56:14.623Z\",\"age\":15},\"phone\":\"05-82-23-23-60\",\"cell\":\"06-44-98-98-83\",\"id\":{\"name\":\"INSEE\",\"value\":\"1480011382632 50\"},\"picture\":{\"large\":\"https://randomuser.me/api/portraits/men/67.jpg\",\"medium\":\"https://randomuser.me/api/portraits/med/men/67.jpg\",\"thumbnail\":\"https://randomuser.me/api/portraits/thumb/men/67.jpg\"},\"nat\":\"FR\"}],\"info\":{\"seed\":\"7dd14e900358b41f\",\"results\":1,\"page\":1,\"version\":\"1.4\"}}\nprint(user)\npprint(user)",
        "detail": "Технологии.3",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 2,
        "importPath": "Технологии.4",
        "description": "Технологии.4",
        "peekOfCode": "def generator():\n    num = 5  # возвращается при первом вызове\n    while True:\n        resp = (yield num)  # возвращает num и получает новое значение\n        if resp:\n            num = resp  # проверяем и сохраняем новое значение в num\na = generator()\nprint(next(a))\na.send(200)\nprint(next(a))",
        "detail": "Технологии.4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Технологии.4",
        "description": "Технологии.4",
        "peekOfCode": "a = generator()\nprint(next(a))\na.send(200)\nprint(next(a))\na.send(300)\nprint(next(a))",
        "detail": "Технологии.4",
        "documentation": {}
    },
    {
        "label": "summary",
        "kind": 2,
        "importPath": "Технологии.5",
        "description": "Технологии.5",
        "peekOfCode": "def summary(a, b):\n    \"\"\"\n    Возвращает сумму двух чисел.\n    >>> [summary(x, x) for x in range(10)]\n    [0, 2, 4, 6, 8, 10, 1112, 14, 16, 18]\n    >>> summary(10, 20)\n    30\n    \"\"\"\n    return a + b\nif __name__ == \"__main__\":",
        "detail": "Технологии.5",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "Технологии.6",
        "description": "Технологии.6",
        "peekOfCode": "key = \"space\"\nreadline.parse_and_bind(f\"{key}: complete\")",
        "detail": "Технологии.6",
        "documentation": {}
    },
    {
        "label": "lowqual_implementation",
        "kind": 2,
        "importPath": "Технологии.7",
        "description": "Технологии.7",
        "peekOfCode": "def lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()\nprint('\\n')",
        "detail": "Технологии.7",
        "documentation": {}
    },
    {
        "label": "implementation_of_normal_boys",
        "kind": 2,
        "importPath": "Технологии.7",
        "description": "Технологии.7",
        "peekOfCode": "def implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()\nprint('\\n')\nimplementation_of_normal_boys()",
        "detail": "Технологии.7",
        "documentation": {}
    },
    {
        "label": "list_1",
        "kind": 5,
        "importPath": "Технологии.7",
        "description": "Технологии.7",
        "peekOfCode": "list_1 = [1, 2]\nlist_2 = [5, 6]\nlist_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):",
        "detail": "Технологии.7",
        "documentation": {}
    },
    {
        "label": "list_2",
        "kind": 5,
        "importPath": "Технологии.7",
        "description": "Технологии.7",
        "peekOfCode": "list_2 = [5, 6]\nlist_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)",
        "detail": "Технологии.7",
        "documentation": {}
    },
    {
        "label": "list_3",
        "kind": 5,
        "importPath": "Технологии.7",
        "description": "Технологии.7",
        "peekOfCode": "list_3 = [0, 5]\ndef lowqual_implementation():\n    for a in list_1:\n        for b in list_2:\n            for c in list_3:\n                print(a, b, c)\ndef implementation_of_normal_boys():\n    for a, b, c in product(list_1, list_2, list_3):\n        print(a, b, c)\nlowqual_implementation()",
        "detail": "Технологии.7",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "class Book(ABC):\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    @abstractmethod\n    def get_summary(self):\n        pass\nclass Fiction(Book):\n    def get_summary(self):\n        print(f'\"{self.title}\" - роман в стиле исторический фикшн, автор - {self.author}')",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "Fiction",
        "kind": 6,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "class Fiction(Book):\n    def get_summary(self):\n        print(f'\"{self.title}\" - роман в стиле исторический фикшн, автор - {self.author}')\nclass NonFiction(Book):\n    def get_summary(self):\n        print(f'\"{self.title}\" - книга в стиле нон фикшн, автор - {self.author}')\nclass Poetry(Book):\n    def get_summary(self):\n        raise NotImplementedError\nfiction_book = Fiction(\"Террор\", \"Дэн Симмонс\")",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "NonFiction",
        "kind": 6,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "class NonFiction(Book):\n    def get_summary(self):\n        print(f'\"{self.title}\" - книга в стиле нон фикшн, автор - {self.author}')\nclass Poetry(Book):\n    def get_summary(self):\n        raise NotImplementedError\nfiction_book = Fiction(\"Террор\", \"Дэн Симмонс\")\nnonfiction_book = NonFiction(\"Как писать книги\", \"Стивен Кинг\")\nfiction_book.get_summary()\nnonfiction_book.get_summary()",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "Poetry",
        "kind": 6,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "class Poetry(Book):\n    def get_summary(self):\n        raise NotImplementedError\nfiction_book = Fiction(\"Террор\", \"Дэн Симмонс\")\nnonfiction_book = NonFiction(\"Как писать книги\", \"Стивен Кинг\")\nfiction_book.get_summary()\nnonfiction_book.get_summary()\npoetry_book = Poetry(\"Стихотворения\", \"Борис Пастернак\")\npoetry_book.get_summary()",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "fiction_book",
        "kind": 5,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "fiction_book = Fiction(\"Террор\", \"Дэн Симмонс\")\nnonfiction_book = NonFiction(\"Как писать книги\", \"Стивен Кинг\")\nfiction_book.get_summary()\nnonfiction_book.get_summary()\npoetry_book = Poetry(\"Стихотворения\", \"Борис Пастернак\")\npoetry_book.get_summary()",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "nonfiction_book",
        "kind": 5,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "nonfiction_book = NonFiction(\"Как писать книги\", \"Стивен Кинг\")\nfiction_book.get_summary()\nnonfiction_book.get_summary()\npoetry_book = Poetry(\"Стихотворения\", \"Борис Пастернак\")\npoetry_book.get_summary()",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "poetry_book",
        "kind": 5,
        "importPath": "abstraction",
        "description": "abstraction",
        "peekOfCode": "poetry_book = Poetry(\"Стихотворения\", \"Борис Пастернак\")\npoetry_book.get_summary()",
        "detail": "abstraction",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "all_ip",
        "description": "all_ip",
        "peekOfCode": "hostname = 'www.italika.ru' # 'www.google.com'\nip_addresses = socket.gethostbyname_ex(hostname)[2]\nip_addresses.sort()\nfor ip in ip_addresses:\n    print(ip)\n# Вывод:\n# 173.194.221.99\n# 173.194.221.106\n# 173.194.221.104\n# 173.194.221.147",
        "detail": "all_ip",
        "documentation": {}
    },
    {
        "label": "ip_addresses",
        "kind": 5,
        "importPath": "all_ip",
        "description": "all_ip",
        "peekOfCode": "ip_addresses = socket.gethostbyname_ex(hostname)[2]\nip_addresses.sort()\nfor ip in ip_addresses:\n    print(ip)\n# Вывод:\n# 173.194.221.99\n# 173.194.221.106\n# 173.194.221.104\n# 173.194.221.147\n# 173.194.221.103",
        "detail": "all_ip",
        "documentation": {}
    },
    {
        "label": "buffer_pause",
        "kind": 5,
        "importPath": "AutoCopyToTxt",
        "description": "AutoCopyToTxt",
        "peekOfCode": "buffer_pause = ''\nwhile True:\n    buffer = pyperclip.paste()\n    if buffer != buffer_pause:\n        print(buffer)\n        with open('text.txt', 'a', encoding='utf-8') as file:\n            file.write(buffer)\n        buffer_pause = buffer\n    time.sleep(0.01)",
        "detail": "AutoCopyToTxt",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 2,
        "importPath": "CachedDecorator",
        "description": "CachedDecorator",
        "peekOfCode": "def cache(func) -> object:\n    cache_calls = {}\n    def wrapper(*args, **kwargs) -> object:\n        tuple_args = args + tuple(kwargs.items())\n        if tuple_args in cache_calls:\n            return cache_calls[tuple_args]\n        result = func(*args, **kwargs)\n        cache_calls[tuple_args] = result\n        return result\n    return wrapper",
        "detail": "CachedDecorator",
        "documentation": {}
    },
    {
        "label": "sum_all",
        "kind": 2,
        "importPath": "CachedDecorator",
        "description": "CachedDecorator",
        "peekOfCode": "def sum_all(a: int = 1, b: int = 2, c: int = 3) -> int:\n    for i in range(10_000_000):\n        i += a + b + c\n    return i  # type: ignore\nprint('Start!')\nprint(sum_all(10, c=30))  # type: ignore\nprint('Stop!')\nprint(sum_all(10, c=30))  # type: ignore\nprint('Stop!')\nprint(sum_all(10, c=30))  # type: ignore",
        "detail": "CachedDecorator",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def check():\n    '''\n    Check the line is empty\n    '''\n    if line.text() == RESULT:\n        line.setText('')\ndef click_digit_or_operator(digit:str) -> None:\n    \"\"\"\n    :param digit: clicked digit\n    \"\"\"",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "click_digit_or_operator",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def click_digit_or_operator(digit:str) -> None:\n    \"\"\"\n    :param digit: clicked digit\n    \"\"\"\n    check()\n    line.setText(line.text() + digit)\ndef delete():\n    line.setText(RESULT)\ndef delete_right():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[:-1])",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def delete():\n    line.setText(RESULT)\ndef delete_right():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[:-1])\ndef delete_lef():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[1::])\ndef total():\n    try:\n        line.setText(str(eval(line.text())))\n    except:",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "delete_right",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def delete_right():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[:-1])\ndef delete_lef():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[1::])\ndef total():\n    try:\n        line.setText(str(eval(line.text())))\n    except:\n        msg = QMessageBox()\n        msg.setWindowTitle(\"Error!\")",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "delete_lef",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def delete_lef():\n    line.setText(RESULT if len(line.text()) == 1 or line.text() == RESULT else line.text()[1::])\ndef total():\n    try:\n        line.setText(str(eval(line.text())))\n    except:\n        msg = QMessageBox()\n        msg.setWindowTitle(\"Error!\")\n        msg.setText(CHECK_YOUR_SAMPLE)\n        msg.exec()",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def total():\n    try:\n        line.setText(str(eval(line.text())))\n    except:\n        msg = QMessageBox()\n        msg.setWindowTitle(\"Error!\")\n        msg.setText(CHECK_YOUR_SAMPLE)\n        msg.exec()\ndef koren():\n    try:",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "koren",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def koren():\n    try:\n        line.setText(str(sqrt(float(line.text()))))\n    except:\n        msg = QMessageBox()\n        msg.setWindowTitle(\"Error!\")\n        msg.setText(CHECK_YOUR_SAMPLE)\n        msg.exec()\ndef point():\n    line.setText(line.text() + '.')",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "point",
        "kind": 2,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "def point():\n    line.setText(line.text() + '.')\nrow1.addWidget(line)\nrow2.addWidget(sqrtes)\nrow2.addWidget(delete_all)\nrow2.addWidget(delete_left)\nrow2.addWidget(delete_last)\nrow3.addWidget(num_seven)\nrow3.addWidget(num_eight)\nrow3.addWidget(num_nine)",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "app = QApplication()\nmain = QWidget()\nmain.setGeometry(400, 300, 400, 300)\nmain.setWindowTitle('Calculator')\napp.setWindowIcon(QIcon('calc.png'))\nline: QLabel = QLabel(RESULT)\ndelete_last: QPushButton = QPushButton('<=')\ndelete_left: QPushButton = QPushButton('=>')\ndelete_all: QPushButton = QPushButton('C')\nsqrtes: QPushButton = QPushButton('?')",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "Calculator",
        "description": "Calculator",
        "peekOfCode": "main = QWidget()\nmain.setGeometry(400, 300, 400, 300)\nmain.setWindowTitle('Calculator')\napp.setWindowIcon(QIcon('calc.png'))\nline: QLabel = QLabel(RESULT)\ndelete_last: QPushButton = QPushButton('<=')\ndelete_left: QPushButton = QPushButton('=>')\ndelete_all: QPushButton = QPushButton('C')\nsqrtes: QPushButton = QPushButton('?')\nnum_seven: QPushButton = QPushButton('7')",
        "detail": "Calculator",
        "documentation": {}
    },
    {
        "label": "btn_click",
        "kind": 2,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "def btn_click(item):\n    global expression\n    try:\n        input_field['state'] = 'normal'\n        expression += item\n        input_field.insert(END, item)\n        if item == '=':\n            result = str(eval(expression[:-1]))\n            input_field.insert(END, result)\n            expression = ''",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "btn_clear",
        "kind": 2,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "def btn_clear():\n    global expression\n    expression = ''\n    input_field['state'] = 'normal'\n    input_field.delete(0, END)\n    input_field['state'] = 'readonly'\nroot = Tk()\nroot.geometry('268x316')\nroot.title(\"Калькулятор\")\nframe_input = Frame(root)",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "expression",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "expression = ''\ndef btn_click(item):\n    global expression\n    try:\n        input_field['state'] = 'normal'\n        expression += item\n        input_field.insert(END, item)\n        if item == '=':\n            result = str(eval(expression[:-1]))\n            input_field.insert(END, result)",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "root = Tk()\nroot.geometry('268x316')\nroot.title(\"Калькулятор\")\nframe_input = Frame(root)\nframe_input.grid(row=0, column=0, columnspan=4, sticky=NSEW)\ninput_field = Entry(frame_input, font='Arial 15 bold', width=24, state='readonly')\ninput_field.pack(fill=BOTH)\nbuttons = (('7', '8', '9', '/', '4'),\n           ('4', '5', '6', '*', '4'),\n           ('1', '2', '3', '-', '4'),",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "frame_input",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "frame_input = Frame(root)\nframe_input.grid(row=0, column=0, columnspan=4, sticky=NSEW)\ninput_field = Entry(frame_input, font='Arial 15 bold', width=24, state='readonly')\ninput_field.pack(fill=BOTH)\nbuttons = (('7', '8', '9', '/', '4'),\n           ('4', '5', '6', '*', '4'),\n           ('1', '2', '3', '-', '4'),\n           ('0', '.', '=', '+', '4'),\n           )\nexpression = ''",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "input_field",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "input_field = Entry(frame_input, font='Arial 15 bold', width=24, state='readonly')\ninput_field.pack(fill=BOTH)\nbuttons = (('7', '8', '9', '/', '4'),\n           ('4', '5', '6', '*', '4'),\n           ('1', '2', '3', '-', '4'),\n           ('0', '.', '=', '+', '4'),\n           )\nexpression = ''\nbutton = Button(root, text='C', font='Arial 20 bold', command=lambda: btn_clear())\nbutton.grid(row=1, column=3, sticky=NSEW)",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "buttons",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "buttons = (('7', '8', '9', '/', '4'),\n           ('4', '5', '6', '*', '4'),\n           ('1', '2', '3', '-', '4'),\n           ('0', '.', '=', '+', '4'),\n           )\nexpression = ''\nbutton = Button(root, text='C', font='Arial 20 bold', command=lambda: btn_clear())\nbutton.grid(row=1, column=3, sticky=NSEW)\nfor row in range(4):\n    for col in range(4):",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "expression",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "expression = ''\nbutton = Button(root, text='C', font='Arial 20 bold', command=lambda: btn_clear())\nbutton.grid(row=1, column=3, sticky=NSEW)\nfor row in range(4):\n    for col in range(4):\n        Button(root, width=2, height=1, text=buttons[row][col], font='Arial 20 bold',\n               command=lambda row=row, col=col: btn_click(buttons[row][col])).grid \\\n            (row=row + 2, column=col, sticky=NSEW, padx=1, pady=1)\nroot.mainloop()",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "Calculator_TKinter",
        "description": "Calculator_TKinter",
        "peekOfCode": "button = Button(root, text='C', font='Arial 20 bold', command=lambda: btn_clear())\nbutton.grid(row=1, column=3, sticky=NSEW)\nfor row in range(4):\n    for col in range(4):\n        Button(root, width=2, height=1, text=buttons[row][col], font='Arial 20 bold',\n               command=lambda row=row, col=col: btn_click(buttons[row][col])).grid \\\n            (row=row + 2, column=col, sticky=NSEW, padx=1, pady=1)\nroot.mainloop()",
        "detail": "Calculator_TKinter",
        "documentation": {}
    },
    {
        "label": "current_locale",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "current_locale = locale.getlocale()\n# Установите локаль на русский язык\nlocale.setlocale(locale.LC_TIME, current_locale)\nroot = Tk()\nroot.title('Календарь')\ndays = []\nnow = datetime.datetime.now()\nyear = now.year\nmonth = now.month\nback_button = Button(root, text='<')",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "root = Tk()\nroot.title('Календарь')\ndays = []\nnow = datetime.datetime.now()\nyear = now.year\nmonth = now.month\nback_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "days = []\nnow = datetime.datetime.now()\nyear = now.year\nmonth = now.month\nback_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "now = datetime.datetime.now()\nyear = now.year\nmonth = now.month\nback_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "year = now.year\nmonth = now.month\nback_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):\n    lblb = Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "month = now.month\nback_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):\n    lblb = Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')\n    lblb.grid(row=1, column=n, sticky=NSEW)",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "back_button",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "back_button = Button(root, text='<')\nback_button.grid(row=0, column=0, sticky=NSEW)\nnext_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):\n    lblb = Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')\n    lblb.grid(row=1, column=n, sticky=NSEW)\nfor row in range(6):",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "next_button",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "next_button = Button(root, text='>')\nnext_button.grid(row=0, column=6, sticky=NSEW)\ninfo_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):\n    lblb = Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')\n    lblb.grid(row=1, column=n, sticky=NSEW)\nfor row in range(6):\n    for col in range(7):\n        lbl = Label(root, text='0', width=4, height=2, font='Arial 16 bold')",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "info_label",
        "kind": 5,
        "importPath": "Calendar_TKinter",
        "description": "Calendar_TKinter",
        "peekOfCode": "info_label = Label(root, text=f'{calendar.month_name[month]} {year}', width=1, height=1, font='Arial 16 bold', fg='blue')\ninfo_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)\nfor n in range(7):\n    lblb = Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')\n    lblb.grid(row=1, column=n, sticky=NSEW)\nfor row in range(6):\n    for col in range(7):\n        lbl = Label(root, text='0', width=4, height=2, font='Arial 16 bold')\n        lbl.grid(row=row + 2, column=col, sticky=NSEW)\n        days.append(lbl)",
        "detail": "Calendar_TKinter",
        "documentation": {}
    },
    {
        "label": "check_disk_space",
        "kind": 2,
        "importPath": "check_disk_space",
        "description": "check_disk_space",
        "peekOfCode": "def check_disk_space(path='/'):\n    try:\n        total, used, free = shutil.disk_usage(path)\n        return total, used, free\n    except FileNotFoundError:\n        print(f\"Ошибка: Путь '{path}' не найден.\")\n        return None\n    except Exception as e:\n        print(f\"Произошла ошибка: {e}\")\n        return None",
        "detail": "check_disk_space",
        "documentation": {}
    },
    {
        "label": "bytes_to_gb",
        "kind": 2,
        "importPath": "check_disk_space",
        "description": "check_disk_space",
        "peekOfCode": "def bytes_to_gb(bytes_value):\n    \"\"\"Конвертирует байты в гигабайты.\"\"\"\n    return bytes_value / (1024**3)\nif __name__ == \"__main__\":\n    # Можно указать путь, который необходимо проверить.\n    # Для Windows используйте букву диска, например 'C:/'\n    # Для Linux/macOS используйте '/' для корня или определенную точку монтирования, например '/home'\n    path_to_check = 'C:/' # Измените, если хотите проверить другой путь\n    disk_info = check_disk_space(path_to_check)\n    if disk_info:",
        "detail": "check_disk_space",
        "documentation": {}
    },
    {
        "label": "check_time",
        "kind": 2,
        "importPath": "check_time",
        "description": "check_time",
        "peekOfCode": "def check_time(func):\n    def wrapper(*args, **kwargs):\n        start = perf_counter()\n        func(*args, **kwargs)\n        print(f'time: {(perf_counter() - start):.02f}')\n    return wrapper",
        "detail": "check_time",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Clock",
        "description": "Clock",
        "peekOfCode": "class Ui_MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(Ui_MainWindow, self).__init__()\n        self.setupUi(self)\n        # Изменение шрифта\n        self.label.setFont(QFont(\"JetBrains Mono\", 48))\n        # Создание переменной timer в которую помещается вызов функции таймер (QTimer)\n        self.timer = QTimer()\n        # Привязка метода перезагрузки к функции self.tm\n        self.timer.timeout.connect(self.tm)",
        "detail": "Clock",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Clock1",
        "description": "Clock1",
        "peekOfCode": "class Ui_MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(Ui_MainWindow, self).__init__()\n        self.setupUi(self)\n        # Изменение шрифта\n        self.label.setFont(QFont(\"Arial\", 20))\n        # Создание переменной timer в которую помещается вызов функции таймер (QTimer)\n        self.timer = QTimer()\n        # Привязка метода перезагрузки к функции self.tm\n        self.timer.timeout.connect(self.tm)",
        "detail": "Clock1",
        "documentation": {}
    },
    {
        "label": "ToplevelWindow",
        "kind": 6,
        "importPath": "CtkTopLevel",
        "description": "CtkTopLevel",
        "peekOfCode": "class ToplevelWindow(ctk.CTkToplevel):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"400x300\")\n        # self.label = customtkinter.CTkLabel(self, text=\"ToplevelWindow\")\n        # self.label.pack(padx=20, pady=20)\n        self.task_text = ctk.CTkEntry(self)\n        self.task_text.pack(pady=5)\n        ctk.CTkButton(self, text='Добавить',font=ctk.CTkFont('Arial',13,'bold'),command=lambda: add(self.task_text.get())).pack()\nclass App(ctk.CTk):",
        "detail": "CtkTopLevel",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "CtkTopLevel",
        "description": "CtkTopLevel",
        "peekOfCode": "class App(ctk.CTk):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"500x400\")\n        self.button_1 = ctk.CTkButton(self, text=\"'Добавить задачу'\", command=self.open_toplevel)\n        self.button_1.pack(side=\"top\", padx=20, pady=20)\n        self.toplevel_window = None\n    def open_toplevel(self):\n        if self.toplevel_window is None or not self.toplevel_window.winfo_exists():\n            self.toplevel_window = ToplevelWindow(self)  # create window if its None or destroyed",
        "detail": "CtkTopLevel",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "CtkTopLevel",
        "description": "CtkTopLevel",
        "peekOfCode": "def add(task):\n    f = ctk.CTkFrame(App)\n    ctk.CTkCheckBox(f, text=task).pack(anchor=NW, side=LEFT)\n    ctk.CTkButton(f, image=img_del,text='',width=30,command=lambda: f.pack_forget()).pack(anchor=NW,side=LEFT,padx=10)\n    f.pack(anchor=NW,padx=5,pady=5)\nclass ToplevelWindow(ctk.CTkToplevel):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"400x300\")\n        # self.label = customtkinter.CTkLabel(self, text=\"ToplevelWindow\")",
        "detail": "CtkTopLevel",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "download_image",
        "description": "download_image",
        "peekOfCode": "def download_image(url, filename):\n    try:\n        # Отправляем GET-запрос по указанному URL\n        response = requests.get(url, stream=True)\n        # Проверяем, что запрос был успешным (статус 200)\n        response.raise_for_status()\n        # Открываем файл в бинарном режиме записи ('wb')\n        with open(filename, 'wb') as file:\n            # Записываем содержимое ответа в файл\n            for chunk in response.iter_content(chunk_size=8192):",
        "detail": "download_image",
        "documentation": {}
    },
    {
        "label": "Banknote",
        "kind": 6,
        "importPath": "dunder",
        "description": "dunder",
        "peekOfCode": "class Banknote:\n    \"\"\"\n    Банкнота\n    \"\"\"\n    def __init__(self, value: int):\n        self.value = value\n    def __repr__(self) -> str:\n        return f'Banknote({self.value})'\n    def __str__(self) -> str:\n        return f'Банкнота номиналом {self.value} рублей'",
        "detail": "dunder",
        "documentation": {}
    },
    {
        "label": "Wallet",
        "kind": 6,
        "importPath": "dunder",
        "description": "dunder",
        "peekOfCode": "class Wallet:\n    \"\"\"\n    Кошелёк\n    \"\"\"\n    def __init__(self, *banknotes: Banknote):\n        self.container: list = []\n        self.container.extend(banknotes)\n        self.index = 0\n    def __repr__(self):\n        return f'Wallet({self.container})'",
        "detail": "dunder",
        "documentation": {}
    },
    {
        "label": "print(f'Результат",
        "kind": 5,
        "importPath": "Exeptions",
        "description": "Exeptions",
        "peekOfCode": "print(f'Результат = {result}')\n# ZeroDivisionError",
        "detail": "Exeptions",
        "documentation": {}
    },
    {
        "label": "format_dms_coordinates",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def format_dms_coordinates(coordinates) -> str:\n    return f\"{coordinates[0]}° {coordinates[1]}\\' {coordinates[2]}\\\"\"\ndef dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref) -> str:\n    decimal_degrees = coordinates[0] + \\\n                      coordinates[1] / 60 + \\\n                      coordinates[2] / 3600\n    if coordinates_ref == \"S\" or coordinates_ref == \"W\":\n        decimal_degrees = -decimal_degrees\n    return decimal_degrees\ndef draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "dms_coordinates_to_dd_coordinates",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref) -> str:\n    decimal_degrees = coordinates[0] + \\\n                      coordinates[1] / 60 + \\\n                      coordinates[2] / 3600\n    if coordinates_ref == \"S\" or coordinates_ref == \"W\":\n        decimal_degrees = -decimal_degrees\n    return decimal_degrees\ndef draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):\n    import webbrowser\n    decimal_latitude = dms_coordinates_to_dd_coordinates(latitude, latitude_ref)",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "draw_map_for_location",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def draw_map_for_location(latitude, latitude_ref, longitude, longitude_ref):\n    import webbrowser\n    decimal_latitude = dms_coordinates_to_dd_coordinates(latitude, latitude_ref)\n    decimal_longitude = dms_coordinates_to_dd_coordinates(longitude, longitude_ref)\n    url = f\"https://www.google.com/maps?q={decimal_latitude},{decimal_longitude}\"\n    webbrowser.open_new_tab(url)\ndef degrees_to_direction(degrees) -> str:\n    compass_directions = [\n        \"N\",\n        \"NNE\",",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "degrees_to_direction",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def degrees_to_direction(degrees) -> str:\n    compass_directions = [\n        \"N\",\n        \"NNE\",\n        \"NE\",\n        \"ENE\",\n        \"E\",\n        \"ESE\",\n        \"SE\",\n        \"SSE\",",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "format_direction_ref",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def format_direction_ref(direction_ref) -> str:\n    direction_ref_text = \"(true or magnetic north not specified)\"\n    if direction_ref == \"T\":\n        direction_ref_text = \"True north\"\n    elif direction_ref == \"M\":\n        direction_ref_text = \"Magnetic north\"\n    return direction_ref_text\ndef format_altitude(altitude, altitude_ref) -> str:\n    altitude_ref_text = \"(above or below sea level not specified)\"\n    if altitude_ref == 0:",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "format_altitude",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def format_altitude(altitude, altitude_ref) -> str:\n    altitude_ref_text = \"(above or below sea level not specified)\"\n    if altitude_ref == 0:\n        altitude_ref_text = \"above sea level\"\n    elif altitude_ref == 1:\n        altitude_ref_text = \"below sea level\"\n    return f\"{altitude} meters {altitude_ref_text}\"\ndef format_speed_ref(speed_ref) -> str:\n    speed_ref_text = \"(speed units not specified)\"\n    if speed_ref == \"K\":",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "format_speed_ref",
        "kind": 2,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "def format_speed_ref(speed_ref) -> str:\n    speed_ref_text = \"(speed units not specified)\"\n    if speed_ref == \"K\":\n        speed_ref_text = \"km/h\"\n    elif speed_ref == \"M\":\n        speed_ref_text = \"mph\"\n    elif speed_ref == \"N\":\n        speed_ref_text = \"knots\"\n    return speed_ref_text\nwith open(\"./images/palm tree 1.jpg\", \"rb\") as palm_1_file:",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "images = [palm_1_image, palm_2_image]\n# проверка ниличия EXIF\nfor index, image in enumerate(images):\n    if image.has_exif:\n        status = f\"contains EXIF (version {image.exif_version}) information.\"\n    else:\n        status = \"does not contain any EXIF information.\"\n    print(f\"Image {index} {status}\")\n# image_members = []\n#",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "common_members",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "common_members = set(images[0]).intersection(set(images[1]))\ncommon_members_sorted = sorted(list(common_members))\nprint(\"Image 0 and Image 1 have these members in common:\")\nprint(f\"{common_members_sorted}\")\n# Модели устройств(камер)\nfor index, image in enumerate(images):\n    print(f\"Device information - Image {index}\")\n    print(\"----------------------------\")\n    print(f\"Make: {image.make}\")\n    print(f\"Model: {image.model}\\n\")",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "common_members_sorted",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "common_members_sorted = sorted(list(common_members))\nprint(\"Image 0 and Image 1 have these members in common:\")\nprint(f\"{common_members_sorted}\")\n# Модели устройств(камер)\nfor index, image in enumerate(images):\n    print(f\"Device information - Image {index}\")\n    print(\"----------------------------\")\n    print(f\"Make: {image.make}\")\n    print(f\"Model: {image.model}\\n\")\n# Стекло(объектив) и ОС камеры",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.gps_latitude",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.gps_latitude = (37.0, 14, 3.6)\nhotel_image.gps_latitude_ref = 'N'\nhotel_image.gps_longitude = (115, 48, 23.99)\nhotel_image.gps_longitude_ref = 'W'\n# Read the revised GPS data\nprint(\"Revised coordinates\")\nprint(\"-------------------\")\nprint(f\"Latitude: {hotel_image.gps_latitude} {hotel_image.gps_latitude_ref}\")\nprint(f\"Longitude: {hotel_image.gps_longitude} {hotel_image.gps_longitude_ref}\\n\")\n# Open a Google Map showing the location represented by the revised coordinates",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.gps_latitude_ref",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.gps_latitude_ref = 'N'\nhotel_image.gps_longitude = (115, 48, 23.99)\nhotel_image.gps_longitude_ref = 'W'\n# Read the revised GPS data\nprint(\"Revised coordinates\")\nprint(\"-------------------\")\nprint(f\"Latitude: {hotel_image.gps_latitude} {hotel_image.gps_latitude_ref}\")\nprint(f\"Longitude: {hotel_image.gps_longitude} {hotel_image.gps_longitude_ref}\\n\")\n# Open a Google Map showing the location represented by the revised coordinates\ndraw_map_for_location(hotel_image.gps_latitude,",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.gps_longitude",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.gps_longitude = (115, 48, 23.99)\nhotel_image.gps_longitude_ref = 'W'\n# Read the revised GPS data\nprint(\"Revised coordinates\")\nprint(\"-------------------\")\nprint(f\"Latitude: {hotel_image.gps_latitude} {hotel_image.gps_latitude_ref}\")\nprint(f\"Longitude: {hotel_image.gps_longitude} {hotel_image.gps_longitude_ref}\\n\")\n# Open a Google Map showing the location represented by the revised coordinates\ndraw_map_for_location(hotel_image.gps_latitude,\n                      hotel_image.gps_latitude_ref,",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.gps_longitude_ref",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.gps_longitude_ref = 'W'\n# Read the revised GPS data\nprint(\"Revised coordinates\")\nprint(\"-------------------\")\nprint(f\"Latitude: {hotel_image.gps_latitude} {hotel_image.gps_latitude_ref}\")\nprint(f\"Longitude: {hotel_image.gps_longitude} {hotel_image.gps_longitude_ref}\\n\")\n# Open a Google Map showing the location represented by the revised coordinates\ndraw_map_for_location(hotel_image.gps_latitude,\n                      hotel_image.gps_latitude_ref,\n                      hotel_image.gps_longitude,",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.image_description",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.image_description = \"The Dolphin Hotel in Orlando, viewed at sunset from the Swan Hotel\"\nhotel_image.copyright = \"Copyright 2021 (Your name here)\"\nprint(f\"Description: {hotel_image.image_description}\")\nprint(f\"Copyright: {hotel_image.copyright}\")\n# Варианты очистки данных в EXIF\nhotel_image.delete('gps_latitude')\nhotel_image.delete('gps_latitude_ref')\ndel hotel_image.gps_longitude\ndel hotel_image.gps_longitude_ref\nhotel_image.delete_all()",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "hotel_image.copyright",
        "kind": 5,
        "importPath": "Exif",
        "description": "Exif",
        "peekOfCode": "hotel_image.copyright = \"Copyright 2021 (Your name here)\"\nprint(f\"Description: {hotel_image.image_description}\")\nprint(f\"Copyright: {hotel_image.copyright}\")\n# Варианты очистки данных в EXIF\nhotel_image.delete('gps_latitude')\nhotel_image.delete('gps_latitude_ref')\ndel hotel_image.gps_longitude\ndel hotel_image.gps_longitude_ref\nhotel_image.delete_all()\n# Запись с измененным содержимым",
        "detail": "Exif",
        "documentation": {}
    },
    {
        "label": "image_metadata",
        "kind": 2,
        "importPath": "Exif_1",
        "description": "Exif_1",
        "peekOfCode": "def image_metadata(path_f):\n    \"\"\"\n    :param path_f:\n    \"\"\"\n    img = Image.open(path_f)\n    info_dict = {\n            \"Имя файла\": os.path.split(path_f)[1],\n            \"Разрешение изображения\": img.size,\n            \"Высота изображения\": img.height,\n            \"Ширина изображения\": img.width,",
        "detail": "Exif_1",
        "documentation": {}
    },
    {
        "label": "vid_aud_matadata",
        "kind": 2,
        "importPath": "Exif_1",
        "description": "Exif_1",
        "peekOfCode": "def vid_aud_matadata(patn_f):\n    try:\n        print(f'\\n[+] Метаданные файла: {os.path.split(patn_f)[-1]}\\n')\n        pprint(ffmpeg.probe(patn_f)[\"streams\"])\n    except ffmpeg._run.Error:\n        print('[-] Неподдерживаемый формат')\nif __name__ == \"__main__\":\n    # path_file = input('[~] Введите путь к файлу: ').lower()\n    files = [NIKON_TRANSFER_PATH+\"\\\\\"+x.lower() for x in os.listdir(NIKON_TRANSFER_PATH) if x.lower().endswith(\".jpg\")]\n    for path_file in files:",
        "detail": "Exif_1",
        "documentation": {}
    },
    {
        "label": "NIKON_TRANSFER_PATH",
        "kind": 5,
        "importPath": "Exif_1",
        "description": "Exif_1",
        "peekOfCode": "NIKON_TRANSFER_PATH = r\"c:\\Users\\sssss\\Images\\Nikon Transfer 2\"\ndef image_metadata(path_f):\n    \"\"\"\n    :param path_f:\n    \"\"\"\n    img = Image.open(path_f)\n    info_dict = {\n            \"Имя файла\": os.path.split(path_f)[1],\n            \"Разрешение изображения\": img.size,\n            \"Высота изображения\": img.height,",
        "detail": "Exif_1",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "find_weather_bot",
        "description": "find_weather_bot",
        "peekOfCode": "TOKEN = ''\nbot = Bot(TOKEN)\ndp = Dispatcher()\n@dp.message(Command('start'))\nasync def start_command(message: types.Message):\n    await message.answer('Привет! Чтобы получить погоду, пришлите название города.')\n@dp.message(F.text)\nasync def get_weather(message: types.Message):\n    city = message.text\n    try:",
        "detail": "find_weather_bot",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "find_weather_bot",
        "description": "find_weather_bot",
        "peekOfCode": "bot = Bot(TOKEN)\ndp = Dispatcher()\n@dp.message(Command('start'))\nasync def start_command(message: types.Message):\n    await message.answer('Привет! Чтобы получить погоду, пришлите название города.')\n@dp.message(F.text)\nasync def get_weather(message: types.Message):\n    city = message.text\n    try:\n        url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'",
        "detail": "find_weather_bot",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "find_weather_bot",
        "description": "find_weather_bot",
        "peekOfCode": "dp = Dispatcher()\n@dp.message(Command('start'))\nasync def start_command(message: types.Message):\n    await message.answer('Привет! Чтобы получить погоду, пришлите название города.')\n@dp.message(F.text)\nasync def get_weather(message: types.Message):\n    city = message.text\n    try:\n        url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'\n        weather_data = requests.get(url).json()",
        "detail": "find_weather_bot",
        "documentation": {}
    },
    {
        "label": "process_images_compact",
        "kind": 2,
        "importPath": "image_compact",
        "description": "image_compact",
        "peekOfCode": "def process_images_compact(input_path: str, output_folder: str = 'out', max_width: int = 1920, quality: int = 85):\n    out_dir = Path(output_folder)\n    out_dir.mkdir(parents=True, exist_ok=True)\n    allowed_exts = {'.jpg', '.jpeg', '.png'}\n    # Собираем список всех файлов в input_path (и подпапках), которые имеют разрешенные расширения\n    # rglob('*') рекурсивно ищет все файлы и папки\n    files = [p for p in Path(input_path).rglob('*') if p.suffix.lower() in allowed_exts]\n    for p in tqdm(files, leave=False):\n        # Открываем изображение с помощью Pillow\n        im = Image.open(p)",
        "detail": "image_compact",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "data = json.load(f)\n# ����������� � ���� ������ SQLite ��� ��������� users.db (����� �������, ���� � �� ����������):\nimport json\nimport sqlite3\nwith open('users.json', 'r', encoding='utf-8') as f:\ndata = json.load(f)\n# ������������ � SQLite (������� ����, ���� ��� ���)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# �������� �������, �������������� ������ �, ����� �������� ������ � ������, ���� ��� ��� ������������:",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "data = json.load(f)\n# ������������ � SQLite (������� ����, ���� ��� ���)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# �������� �������, �������������� ������ �, ����� �������� ������ � ������, ���� ��� ��� ������������:\nimport json\nimport sqlite3\nwith open('users.json', 'r', encoding='utf-8') as f:\ndata = json.load(f)\nconn = sqlite3.connect('users.db')",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "conn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# �������� �������, �������������� ������ �, ����� �������� ������ � ������, ���� ��� ��� ������������:\nimport json\nimport sqlite3\nwith open('users.json', 'r', encoding='utf-8') as f:\ndata = json.load(f)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# ������ ������� (���� �����, ������� ����� ����)",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "cursor = conn.cursor()\n# �������� �������, �������������� ������ �, ����� �������� ������ � ������, ���� ��� ��� ������������:\nimport json\nimport sqlite3\nwith open('users.json', 'r', encoding='utf-8') as f:\ndata = json.load(f)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# ������ ������� (���� �����, ������� ����� ����)\ncursor.execute('DROP TABLE IF EXISTS users')",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "data = json.load(f)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# ������ ������� (���� �����, ������� ����� ����)\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "conn = sqlite3.connect('users.db')\ncursor = conn.cursor()\n# ������ ������� (���� �����, ������� ����� ����)\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "cursor = conn.cursor()\n# ������ ������� (���� �����, ������� ����� ����)\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)\n''')",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "data = json.load(f)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "conn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)\n''')",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)\n''')\n# ��������� ������",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "data = json.load(f)\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "conn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)\n''')",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "JSON2SQLite",
        "description": "JSON2SQLite",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('DROP TABLE IF EXISTS users')\ncursor.execute('''\nCREATE TABLE users (\nid INTEGER PRIMARY KEY,\nname TEXT NOT NULL,\nemail TEXT NOT NULL\n)\n''')\nfor user in data:",
        "detail": "JSON2SQLite",
        "documentation": {}
    },
    {
        "label": "find_large_files",
        "kind": 2,
        "importPath": "LargeFiles",
        "description": "LargeFiles",
        "peekOfCode": "def find_large_files(folder_path, size_threshold_mb):\n    # Преобразуем порог размера в байты\n    size_threshold_bytes: int = size_threshold_mb * 1024 * 1024\n    # Создаём объект Path для указанной папки\n    folder = Path(folder_path)\n    # Рекурсивно проходим по всем файлам в папке и подкаталогах\n    for file_path in folder.rglob('*'):\n        # Проверяем, является ли найденный объект файлом\n        if file_path.is_file():\n            try:",
        "detail": "LargeFiles",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "lesson_15_class",
        "description": "lesson_15_class",
        "peekOfCode": "class User:\n    \"\"\" Некий пользователь чего-то \"\"\"\n    __name: str = ''\n    __age: int = 0\n    def __init__(self) -> None:\n        \"\"\" Конструктор объекта \"\"\"\n    # getter\n    @property\n    def name(self) -> str:\n        return self.__name",
        "detail": "lesson_15_class",
        "documentation": {}
    },
    {
        "label": "user1.name",
        "kind": 5,
        "importPath": "lesson_15_class",
        "description": "lesson_15_class",
        "peekOfCode": "user1.name = 'Bob'\nprint(user1.name)\nuser1.age = 40\nprint(user1.age)\nuser1.name = 'X'\nprint(user1.name)",
        "detail": "lesson_15_class",
        "documentation": {}
    },
    {
        "label": "user1.age",
        "kind": 5,
        "importPath": "lesson_15_class",
        "description": "lesson_15_class",
        "peekOfCode": "user1.age = 40\nprint(user1.age)\nuser1.name = 'X'\nprint(user1.name)",
        "detail": "lesson_15_class",
        "documentation": {}
    },
    {
        "label": "user1.name",
        "kind": 5,
        "importPath": "lesson_15_class",
        "description": "lesson_15_class",
        "peekOfCode": "user1.name = 'X'\nprint(user1.name)",
        "detail": "lesson_15_class",
        "documentation": {}
    },
    {
        "label": "test_str",
        "kind": 5,
        "importPath": "Macro",
        "description": "Macro",
        "peekOfCode": "test_str = 'ITStart'\nexec('%s = %d' % (test_str, 10)) # формируется и выполняется строка\nprint(f'Итог: {ITStart}')\nlocals()[test_str] = 20 # добавление в список локальных переменных\nprint(ITStart)\nglobals()[test_str] = 30 # добавление в список глобальных переменных\nprint(ITStart)",
        "detail": "Macro",
        "documentation": {}
    },
    {
        "label": "exec('%s",
        "kind": 5,
        "importPath": "Macro",
        "description": "Macro",
        "peekOfCode": "exec('%s = %d' % (test_str, 10)) # формируется и выполняется строка\nprint(f'Итог: {ITStart}')\nlocals()[test_str] = 20 # добавление в список локальных переменных\nprint(ITStart)\nglobals()[test_str] = 30 # добавление в список глобальных переменных\nprint(ITStart)",
        "detail": "Macro",
        "documentation": {}
    },
    {
        "label": "locals()[test_str]",
        "kind": 5,
        "importPath": "Macro",
        "description": "Macro",
        "peekOfCode": "locals()[test_str] = 20 # добавление в список локальных переменных\nprint(ITStart)\nglobals()[test_str] = 30 # добавление в список глобальных переменных\nprint(ITStart)",
        "detail": "Macro",
        "documentation": {}
    },
    {
        "label": "globals()[test_str]",
        "kind": 5,
        "importPath": "Macro",
        "description": "Macro",
        "peekOfCode": "globals()[test_str] = 30 # добавление в список глобальных переменных\nprint(ITStart)",
        "detail": "Macro",
        "documentation": {}
    },
    {
        "label": "format_dms_coordinates",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def format_dms_coordinates(coordinates) -> str:\n    \"\"\"\n    Форматирование координат в градусах, минутах и секундах\n    :param coordinates:\n    :return:\n    \"\"\"\n    return f\"{coordinates[0]}° {coordinates[1]}' {coordinates[2]}\\\"\"\ndef dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref) -> str:\n    \"\"\"\n    Преобразование координат в градусах, минутах и секундах в градусах десятичных",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "dms_coordinates_to_dd_coordinates",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref) -> str:\n    \"\"\"\n    Преобразование координат в градусах, минутах и секундах в градусах десятичных\n    :param coordinates:\n    :param coordinates_ref:\n    :return:\n    \"\"\"\n    decimal_degrees = coordinates[0] + coordinates[1] / 60 + coordinates[2] / 3600\n    if coordinates_ref == \"S\" or coordinates_ref == \"W\":\n        decimal_degrees = -decimal_degrees",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "degrees_to_direction",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def degrees_to_direction(degrees) -> str:\n    \"\"\"\n    Форматирование направления\n    :param degrees:\n    :return:\n    \"\"\"\n    compass_directions = [\n        \"N\",\n        \"NNE\",\n        \"NE\",",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "format_direction_ref",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def format_direction_ref(direction_ref) -> str:\n    \"\"\"\n    Форматирование указания на полюс\n    :param direction_ref:\n    :return:\n    \"\"\"\n    direction_ref_text = \"(true or magnetic north not specified)\"\n    if direction_ref == \"T\":\n        direction_ref_text = \"True north\"\n    elif direction_ref == \"M\":",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "format_altitude",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def format_altitude(altitude, altitude_ref) -> str:\n    \"\"\"\n    Форматирование высоты\n    :param altitude:\n    :param altitude_ref:\n    :return:\n    \"\"\"\n    altitude_ref_text = \"(above or below sea level not specified)\"\n    if altitude_ref == 0:\n        altitude_ref_text = \"above sea level\"",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "format_speed_ref",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def format_speed_ref(speed_ref) -> str:\n    \"\"\"\n    Форматирование скорости\n    :param speed_ref:\n    :return:\n    \"\"\"\n    speed_ref_text = \"(speed units not specified)\"\n    if speed_ref == \"K\":\n        speed_ref_text = \"km/h\"\n    elif speed_ref == \"M\":",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "def main():\n    \"\"\"\n    Переделка примера работы с EXIF в виде обработки множества файлов с перемещением файлов\n    в зависимости от наличия информации о дате съёмки\n    \"\"\"\n    # with open(input('[~] Введите путь к 1-му файлу: '), \"rb\") as palm_1_file:\n    #     palm_1_image = Image(palm_1_file)\n    #\n    # with open(input('[~] Введите путь к 2-му файлу: '), \"rb\") as palm_2_file:\n    #     palm_2_image = Image(palm_2_file)",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "SOURCE_TRANSFER_PATH",
        "kind": 5,
        "importPath": "Move_Files_by_Exif",
        "description": "Move_Files_by_Exif",
        "peekOfCode": "SOURCE_TRANSFER_PATH = r\"c:\\Users\\sssss\\Images\\Nikon Transfer 2\"\ndef format_dms_coordinates(coordinates) -> str:\n    \"\"\"\n    Форматирование координат в градусах, минутах и секундах\n    :param coordinates:\n    :return:\n    \"\"\"\n    return f\"{coordinates[0]}° {coordinates[1]}' {coordinates[2]}\\\"\"\ndef dms_coordinates_to_dd_coordinates(coordinates, coordinates_ref) -> str:\n    \"\"\"",
        "detail": "Move_Files_by_Exif",
        "documentation": {}
    },
    {
        "label": "countUp",
        "kind": 2,
        "importPath": "multiprocess",
        "description": "multiprocess",
        "peekOfCode": "def countUp():\n    i = 0\n    while i <= 3:\n        print(f'Up:\\t{i}')\n        time.sleep(randint(1, 3))  # sleep 1, 2 or 3 seconds\n        i += 1\ndef countDown():\n    i = 3\n    while i >= 0:\n        print(f'Down:\\t{i}')",
        "detail": "multiprocess",
        "documentation": {}
    },
    {
        "label": "countDown",
        "kind": 2,
        "importPath": "multiprocess",
        "description": "multiprocess",
        "peekOfCode": "def countDown():\n    i = 3\n    while i >= 0:\n        print(f'Down:\\t{i}')\n        time.sleep(randint(1, 3))  # sleep 1, 2 or 3 seconds\n        i -= 1\nif __name__ == '__main__':\n    # Initiate the workers.\n    workerUp = multiprocessing.Process(target=countUp)\n    workerDown = multiprocessing.Process(target=countDown)",
        "detail": "multiprocess",
        "documentation": {}
    },
    {
        "label": "create_folders",
        "kind": 2,
        "importPath": "order_by_extention",
        "description": "order_by_extention",
        "peekOfCode": "def create_folders(folder_path):\n    # �������� ������ ���� ������ � �����\n    files = folder_path.iterdir()\n    # ���������� �� ������� ����� � ������� ����� �� �����������\n    for file in files:\n        if file.is_file():\n            file_extension = file.suffix\n            folder_name = file_extension[1:]\n            folder_path_new = folder_path / folder_name\n            # ���������, ���������� �� ����� ��� ������� ����������",
        "detail": "order_by_extention",
        "documentation": {}
    },
    {
        "label": "move_files",
        "kind": 2,
        "importPath": "order_by_extention",
        "description": "order_by_extention",
        "peekOfCode": "def move_files(folder_path):\n    create_folders(folder_path)\n    # �������� ������ ���� ������ � �����\n    files = folder_path.iterdir()\n    # ���������� �� ������� ����� � ���������� ��� � ��������������� �����\n    for file in files:\n        if file.is_file():\n            file_extension = file.suffix\n            folder_name = file_extension[1:]\n            folder_path_new = folder_path / folder_name",
        "detail": "order_by_extention",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "url = 'https://italika.ru/'\nsession = requests.Session()\nsession.headers['User-Agent'] = 'Mozilla/5.0 (X11; Linux x86-64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36'\nhtml = session.get(url).content\nsoup = bs(html, 'html.parser')\nscript_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "session = requests.Session()\nsession.headers['User-Agent'] = 'Mozilla/5.0 (X11; Linux x86-64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36'\nhtml = session.get(url).content\nsoup = bs(html, 'html.parser')\nscript_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)\ncss_files = []",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "session.headers['User-Agent']",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "session.headers['User-Agent'] = 'Mozilla/5.0 (X11; Linux x86-64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36'\nhtml = session.get(url).content\nsoup = bs(html, 'html.parser')\nscript_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)\ncss_files = []\nfor css in soup.find_all('link'):",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "html = session.get(url).content\nsoup = bs(html, 'html.parser')\nscript_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)\ncss_files = []\nfor css in soup.find_all('link'):\n    if css.attrs.get('href'):",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "soup = bs(html, 'html.parser')\nscript_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)\ncss_files = []\nfor css in soup.find_all('link'):\n    if css.attrs.get('href'):\n        css_url = urljoin(url, css.attrs.get('href'))",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "script_files",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "script_files = []\nfor script in soup.find_all('script'):\n    if script.attrs.get('src'):\n        script_url = urljoin(url, script.attrs.get('src'))\n        script_files.append(script_url)\ncss_files = []\nfor css in soup.find_all('link'):\n    if css.attrs.get('href'):\n        css_url = urljoin(url, css.attrs.get('href'))\n        css_files.append(css_url)",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "css_files",
        "kind": 5,
        "importPath": "Parsing CSS_JS",
        "description": "Parsing CSS_JS",
        "peekOfCode": "css_files = []\nfor css in soup.find_all('link'):\n    if css.attrs.get('href'):\n        css_url = urljoin(url, css.attrs.get('href'))\n        css_files.append(css_url)\nprint(f'Общее количество файлов скриптов на странице: {len(script_files)}')\nprint(f'Общее количество css-файлов на странице: {len(css_files)}')\nwith open('javascript_files.txt', 'w') as f:\n    for js_file in script_files:\n        print(js_file, file=f)",
        "detail": "Parsing CSS_JS",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "players",
        "description": "players",
        "peekOfCode": "class Player:\n    \"\"\"\n    \"\"\"\n    def __init__(self, name, age, height, weight):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.weight = weight\n    def get_age(self) -> str:\n        \"\"\"",
        "detail": "players",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "props_and_slots",
        "description": "props_and_slots",
        "peekOfCode": "class Cat:\n  __slots__ = ('_name', '_age')\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  @property\n  def name(self):\n    return self._name\n  @name.setter\n  def name(self, value):",
        "detail": "props_and_slots",
        "documentation": {}
    },
    {
        "label": "display_score",
        "kind": 2,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "def display_score():\n    # получаем время текущей игры: от общего времени в игре мы\n    # отнимаем время, сыгранное за время запуска скрипта\n    current_time = pygame.time.get_ticks() - start_time\n    # создаём объект текста количества очков — сыгранное время\n    score_surface = text_font_score.render(f\"{current_time}\", False, \"Purple\")\n    # помещаем текст с количеством очков в прямоугольник\n    score_rect = score_surface.get_rect(bottomright=(795, 395))\n    # размещаем прямоугольник на поверхности\n    screen.blit(score_surface, score_rect)",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "reset_game",
        "kind": 2,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "def reset_game():\n    # делаем видимыми переменные: объекты всех видимых моделей,\n    # отметки о движении предметов и главный флаг запущенной игры\n    global hero_rect, pot_rect, candle_rect, box_rect, pot_flag, box_flag, game\n    # объявляем начальные координаты для всех объектов\n    hero_x_pos = 75\n    hero_y_pos = 180\n    candle_x_pos = 900\n    candle_y_pos = 70\n    box_x_pos = 900",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "width = 800\nheight = 400\n# создаём экран игры\nscreen = pygame.display.set_mode((width, height))\n# устанавливаем количество кадров в секунду\nfps = 60\n# создаём объект таймера\nclock = pygame.time.Clock()\n# добавляем счётчики для подсчёта времени в игре — это будут наши очки\nstart_time = 0",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "height = 400\n# создаём экран игры\nscreen = pygame.display.set_mode((width, height))\n# устанавливаем количество кадров в секунду\nfps = 60\n# создаём объект таймера\nclock = pygame.time.Clock()\n# добавляем счётчики для подсчёта времени в игре — это будут наши очки\nstart_time = 0\nfinal_score = 0",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "screen = pygame.display.set_mode((width, height))\n# устанавливаем количество кадров в секунду\nfps = 60\n# создаём объект таймера\nclock = pygame.time.Clock()\n# добавляем счётчики для подсчёта времени в игре — это будут наши очки\nstart_time = 0\nfinal_score = 0\n# загружаем в переменные картинки из папки с нашим файлом\nback_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "fps = 60\n# создаём объект таймера\nclock = pygame.time.Clock()\n# добавляем счётчики для подсчёта времени в игре — это будут наши очки\nstart_time = 0\nfinal_score = 0\n# загружаем в переменные картинки из папки с нашим файлом\nback_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()\nback = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "clock = pygame.time.Clock()\n# добавляем счётчики для подсчёта времени в игре — это будут наши очки\nstart_time = 0\nfinal_score = 0\n# загружаем в переменные картинки из папки с нашим файлом\nback_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()\nback = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "start_time = 0\nfinal_score = 0\n# загружаем в переменные картинки из папки с нашим файлом\nback_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()\nback = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "final_score",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "final_score = 0\n# загружаем в переменные картинки из папки с нашим файлом\nback_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()\nback = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "back_main_screen",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "back_main_screen = pygame.image.load(\"code_game_back.jpg\").convert()\nback = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "back",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "back = pygame.image.load(\"code_game_back_floor.jpg\").convert()\nhero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "hero",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "hero = pygame.image.load(\"detective.png\").convert_alpha()\npot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,\n# во второй сам текст и его цвет, в третьей — помещаем текст",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "pot",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "pot = pygame.image.load(\"teapot.png\").convert_alpha()\ncandle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,\n# во второй сам текст и его цвет, в третьей — помещаем текст\n# в прямоугольную рамку и размещаем на заданных координатах",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "candle",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "candle = pygame.image.load(\"candlestick.png\").convert_alpha()\nbox = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,\n# во второй сам текст и его цвет, в третьей — помещаем текст\n# в прямоугольную рамку и размещаем на заданных координатах\n# текст с названием игры",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "box = pygame.image.load(\"wooden_box.png\").convert_alpha()\n# даём название окну игры\npygame.display.set_caption(\"Detective CODE Game\")\n# объявляем переменную-флаг для цикла игры\ngame = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,\n# во второй сам текст и его цвет, в третьей — помещаем текст\n# в прямоугольную рамку и размещаем на заданных координатах\n# текст с названием игры\ntext_font = pygame.font.Font(\"prstartk.ttf\", 15)",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "game = False\n# создаём объекты текста: в первой строчке задаём настройки шрифта,\n# во второй сам текст и его цвет, в третьей — помещаем текст\n# в прямоугольную рамку и размещаем на заданных координатах\n# текст с названием игры\ntext_font = pygame.font.Font(\"prstartk.ttf\", 15)\ntext_surface = text_font.render(\"Detective CODE Game\", False, \"White\")\ntext_name_rect = text_surface.get_rect(center=(400, 30))\n# текст с сообщением о столкновении\ntext_font_collide = pygame.font.Font(\"prstartk.ttf\", 50)",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_font",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_font = pygame.font.Font(\"prstartk.ttf\", 15)\ntext_surface = text_font.render(\"Detective CODE Game\", False, \"White\")\ntext_name_rect = text_surface.get_rect(center=(400, 30))\n# текст с сообщением о столкновении\ntext_font_collide = pygame.font.Font(\"prstartk.ttf\", 50)\ntext_collide = text_font_collide.render(\"CoLLiDE!!\", False, \"Red\")\ntext_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_surface",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_surface = text_font.render(\"Detective CODE Game\", False, \"White\")\ntext_name_rect = text_surface.get_rect(center=(400, 30))\n# текст с сообщением о столкновении\ntext_font_collide = pygame.font.Font(\"prstartk.ttf\", 50)\ntext_collide = text_font_collide.render(\"CoLLiDE!!\", False, \"Red\")\ntext_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_name_rect",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_name_rect = text_surface.get_rect(center=(400, 30))\n# текст с сообщением о столкновении\ntext_font_collide = pygame.font.Font(\"prstartk.ttf\", 50)\ntext_collide = text_font_collide.render(\"CoLLiDE!!\", False, \"Red\")\ntext_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_font_collide",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_font_collide = pygame.font.Font(\"prstartk.ttf\", 50)\ntext_collide = text_font_collide.render(\"CoLLiDE!!\", False, \"Red\")\ntext_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_collide",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_collide = text_font_collide.render(\"CoLLiDE!!\", False, \"Red\")\ntext_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_collide_rect",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_collide_rect = text_collide.get_rect(center=(400, 200))\n# текст главного меню\ntext_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_font_new_game",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_font_new_game = pygame.font.Font(\"prstartk.ttf\", 20)\ntext_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_newgame_str1",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_newgame_str1 = text_font_new_game.render(\"If you want to start,\", False, \"Green\")\ntext_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_newgame_rect1",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_newgame_rect1 = text_newgame_str1.get_rect(center=(400, 325))\ntext_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():\n    # получаем время текущей игры: от общего времени в игре мы",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_newgame_str2",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_newgame_str2 = text_font_new_game.render(\"press space\", False, \"Green\")\ntext_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():\n    # получаем время текущей игры: от общего времени в игре мы\n    # отнимаем время, сыгранное за время запуска скрипта",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_newgame_rect2",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_newgame_rect2 = text_newgame_str2.get_rect(center=(400, 350))\n# текст для подсчёта очков\ntext_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():\n    # получаем время текущей игры: от общего времени в игре мы\n    # отнимаем время, сыгранное за время запуска скрипта\n    current_time = pygame.time.get_ticks() - start_time",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_font_score",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_font_score = pygame.font.Font(\"prstartk.ttf\", 15)\n# текст для вывода очков при окончании игры\ntext_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():\n    # получаем время текущей игры: от общего времени в игре мы\n    # отнимаем время, сыгранное за время запуска скрипта\n    current_time = pygame.time.get_ticks() - start_time\n    # создаём объект текста количества очков — сыгранное время\n    score_surface = text_font_score.render(f\"{current_time}\", False, \"Purple\")",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text_ts_font",
        "kind": 5,
        "importPath": "pygame3",
        "description": "pygame3",
        "peekOfCode": "text_ts_font = pygame.font.Font(\"prstartk.ttf\", 20)\n# функция подсчёта очков\ndef display_score():\n    # получаем время текущей игры: от общего времени в игре мы\n    # отнимаем время, сыгранное за время запуска скрипта\n    current_time = pygame.time.get_ticks() - start_time\n    # создаём объект текста количества очков — сыгранное время\n    score_surface = text_font_score.render(f\"{current_time}\", False, \"Purple\")\n    # помещаем текст с количеством очков в прямоугольник\n    score_rect = score_surface.get_rect(bottomright=(795, 395))",
        "detail": "pygame3",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "regexp",
        "description": "regexp",
        "peekOfCode": "text = '''История России насчитвывает более тысячи лет, начиная с переселения восточных славян на Восточно-Европейскую\n(Русскую) равнину в VI-VII веках, впоследствии разделившихся на русских, украинцев и белорусов. Историю страны можно\nподелить примерно на семь периодов: древнейшая (догосудпарственная) (до до конца IX века н.э.), Киевская Русь\n(Древнерусское государство) (до середины XII века), период раздробленности (до начала XVI века), единое государство\n(с 1547 года царство) (конец XV века - 1721), империя (1721-1917), советский период (1917-1991) и новейшая история\n(с 1991 года).\n'''\ninfo = '10 EUR, 20 EUR, 30 EUR - EURO EUROPE'\ntext2 = '''Знаки препинания: первая и вторая запятая - причастный оборот, третья запятая - подчинительная связь между\nпредложениями, четвертая запятая - сочинительная связь между предложениями, пятая запятая - сочинительная связь между",
        "detail": "regexp",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "regexp",
        "description": "regexp",
        "peekOfCode": "info = '10 EUR, 20 EUR, 30 EUR - EURO EUROPE'\ntext2 = '''Знаки препинания: первая и вторая запятая - причастный оборот, третья запятая - подчинительная связь между\nпредложениями, четвертая запятая - сочинительная связь между предложениями, пятая запятая - сочинительная связь между\nпредложениями, шестая запятая - подчинительная связь между предложениями, седьмая запятая - подчинительная связь между\nпредложениями.'''\ns = '+76547987316  86547987316  ---  tfjhg jklj lkjh ljhlkj lkj ;l9up ioj89ujhoy    o  oijlkj kj'\nss = '1\\n\\t\\t\\t\\t\\t2'\nprint(re.findall(r'\\d{4}', text))\nprint(re.findall(r'[XIV]+', text))\nprint(re.findall(r'\\d{4}-\\d{4}', text))",
        "detail": "regexp",
        "documentation": {}
    },
    {
        "label": "text2",
        "kind": 5,
        "importPath": "regexp",
        "description": "regexp",
        "peekOfCode": "text2 = '''Знаки препинания: первая и вторая запятая - причастный оборот, третья запятая - подчинительная связь между\nпредложениями, четвертая запятая - сочинительная связь между предложениями, пятая запятая - сочинительная связь между\nпредложениями, шестая запятая - подчинительная связь между предложениями, седьмая запятая - подчинительная связь между\nпредложениями.'''\ns = '+76547987316  86547987316  ---  tfjhg jklj lkjh ljhlkj lkj ;l9up ioj89ujhoy    o  oijlkj kj'\nss = '1\\n\\t\\t\\t\\t\\t2'\nprint(re.findall(r'\\d{4}', text))\nprint(re.findall(r'[XIV]+', text))\nprint(re.findall(r'\\d{4}-\\d{4}', text))\nprint(re.sub(r'\\bEUR\\b', 'USD', info))",
        "detail": "regexp",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "regexp",
        "description": "regexp",
        "peekOfCode": "s = '+76547987316  86547987316  ---  tfjhg jklj lkjh ljhlkj lkj ;l9up ioj89ujhoy    o  oijlkj kj'\nss = '1\\n\\t\\t\\t\\t\\t2'\nprint(re.findall(r'\\d{4}', text))\nprint(re.findall(r'[XIV]+', text))\nprint(re.findall(r'\\d{4}-\\d{4}', text))\nprint(re.sub(r'\\bEUR\\b', 'USD', info))\nprint(re.split(r'\\W+', text2))\nprint(re.findall(r'[+7|8]\\d{10}', s))\nprint(re.sub(r'[\\n\\t]+', '\\n',ss))\nprint(re.sub(r'[\\n\\t]+', '',ss))",
        "detail": "regexp",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "regexp",
        "description": "regexp",
        "peekOfCode": "ss = '1\\n\\t\\t\\t\\t\\t2'\nprint(re.findall(r'\\d{4}', text))\nprint(re.findall(r'[XIV]+', text))\nprint(re.findall(r'\\d{4}-\\d{4}', text))\nprint(re.sub(r'\\bEUR\\b', 'USD', info))\nprint(re.split(r'\\W+', text2))\nprint(re.findall(r'[+7|8]\\d{10}', s))\nprint(re.sub(r'[\\n\\t]+', '\\n',ss))\nprint(re.sub(r'[\\n\\t]+', '',ss))",
        "detail": "regexp",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://yandex.ru\")\nprint(f\"Status code: {response.status_code}\")  # Выводит статусный код ответа\nprint()\nprint(f\"Text: {response.text}\")  # Выводит текст ответа\n# %% [markdown]\n# POST-запрос\n# %%\ndata = {\"key\": \"value\"}\nresponse = requests.post(\"https://api.example.com/submit\", json=data)\nprint(response.status_code)",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"key\": \"value\"}\nresponse = requests.post(\"https://api.example.com/submit\", json=data)\nprint(response.status_code)\nprint(response.json())  # Если ответ в формате JSON\n# %% [markdown]\n# Обработка ошибок\n# При работе с HTTP-запросами важно обрабатывать возможные ошибки. Библиотека requests предоставляет удобные методы для этого:\n# %%\n# import requests\ntry:",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.post(\"https://api.example.com/submit\", json=data)\nprint(response.status_code)\nprint(response.json())  # Если ответ в формате JSON\n# %% [markdown]\n# Обработка ошибок\n# При работе с HTTP-запросами важно обрабатывать возможные ошибки. Библиотека requests предоставляет удобные методы для этого:\n# %%\n# import requests\ntry:\n    response = requests.get(\"https://api.example.com/data\")",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https: //jsonplaceholder.typicode.com/posts\")\nprint(response.status_code)  # Выводим код состояния ответа\nprint(response.text)  # Выводим текст ответа\nprint(response.json())  # Выводим ответ в формате JSON\n# %% [markdown]\n# Параметры запроса:\n# %%\n# import requests\nparams = {\"userId\": 1}\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", params=params)",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "params = {\"userId\": 1}\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", params=params)\nprint(response.json())\n# %% [markdown]\n# 2. Отправка POST-запросов\n# %% [markdown]\n# POST-запросы часто используются для отправки данных на сервер, например, для создания новых записей в базе данных. В библиотеке requests для отправки POST-запроса используется метод requests.post().\n# %% [markdown]\n# Пример отправки POST-запроса:\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\", params=params)\nprint(response.json())\n# %% [markdown]\n# 2. Отправка POST-запросов\n# %% [markdown]\n# POST-запросы часто используются для отправки данных на сервер, например, для создания новых записей в базе данных. В библиотеке requests для отправки POST-запроса используется метод requests.post().\n# %% [markdown]\n# Пример отправки POST-запроса:\n# %%\ndata = {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}\nresponse = requests.post(\"https://jsonplaceholder.typicode.com/posts\", data=data)\n# Выводим код состояния ответа\nprint(response.status_code)\n# Выводим данные, отправленные сервером в ответ\nprint(response.json())\n# %% [markdown]\n# Параметры запроса:\n# %% [markdown]\n# Для отправки данных, например, в формате JSON, можно использовать параметр json:",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.post(\"https://jsonplaceholder.typicode.com/posts\", data=data)\n# Выводим код состояния ответа\nprint(response.status_code)\n# Выводим данные, отправленные сервером в ответ\nprint(response.json())\n# %% [markdown]\n# Параметры запроса:\n# %% [markdown]\n# Для отправки данных, например, в формате JSON, можно использовать параметр json:\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}\nresponse = requests.post(\"https://jsonplaceholder.typicode.com/posts\", json=data)\nprint(response.json())\n# %% [markdown]\n# 3. Другие HTTP-методы: PUT, PATCH, DELETE\n# %% [markdown]\n# В библиотеке requests также поддерживаются другие HTTP-методы, такие как PUT, PATCH и DELETE.\n# %% [markdown]\n# PUT-запросы\n# %% [markdown]",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.post(\"https://jsonplaceholder.typicode.com/posts\", json=data)\nprint(response.json())\n# %% [markdown]\n# 3. Другие HTTP-методы: PUT, PATCH, DELETE\n# %% [markdown]\n# В библиотеке requests также поддерживаются другие HTTP-методы, такие как PUT, PATCH и DELETE.\n# %% [markdown]\n# PUT-запросы\n# %% [markdown]\n# PUT используется для обновления существующего ресурса на сервере. Он заменяет весь ресурс новыми данными.",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"id\": 1, \"title\": \"Updated Title\", \"body\": \"Updated Body\", \"userId\": 1}\nresponse = requests.put(\"https://jsonplaceholder.typicode.com/posts/1\", json=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# PATCH-запросы\n# %% [markdown]\n# PATCH — это метод, который используется для частичного обновления ресурса. В отличие от PUT, который заменяет весь ресурс, PATCH позволяет обновить только некоторые поля.\n# %% [markdown]\n# Пример отправки PATCH-запроса:",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.put(\"https://jsonplaceholder.typicode.com/posts/1\", json=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# PATCH-запросы\n# %% [markdown]\n# PATCH — это метод, который используется для частичного обновления ресурса. В отличие от PUT, который заменяет весь ресурс, PATCH позволяет обновить только некоторые поля.\n# %% [markdown]\n# Пример отправки PATCH-запроса:\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"title\": \"Updated Title\"}\nresponse = requests.patch(\"https://jsonplaceholder.typicode.com/posts/1\", json=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# DELETE-запросы\n# %% [markdown]\n# DELETE используется для удаления ресурса на сервере. Этот метод может быть использован, чтобы удалить данные по определённому URL.\n#\n# Пример отправки DELETE-запроса:",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.patch(\"https://jsonplaceholder.typicode.com/posts/1\", json=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# DELETE-запросы\n# %% [markdown]\n# DELETE используется для удаления ресурса на сервере. Этот метод может быть использован, чтобы удалить данные по определённому URL.\n#\n# Пример отправки DELETE-запроса:\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.delete(\"https://jsonplaceholder.typicode.com/posts/1\")\nprint(\n    response.status_code\n)  # Ожидаемый код состояния: 200 (ОК), если удаление прошло успешно\n# %% [markdown]\n# Работа с ответами в библиотеке requests в Python\n# %% [markdown]\n# Работа с ответами является важной частью взаимодействия с веб-сервисами, и библиотека requests предоставляет удобные средства для обработки ответов от серверов. В этой статье мы рассмотрим, как обрабатывать ответы, проверять успешность запросов и обрабатывать возможные ошибки.\n# %% [markdown]\n# 1. Обработка ответов",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n# Получение кода состояния ответа\nprint(\"Status Code:\", response.status_code)\n# Получение текста ответа\nprint(\"Response Text:\", response.text)\n# Получение данных в формате JSON (если они есть)\nprint(\"Response JSON:\", response.json())\n# %% [markdown]\n# Что можно извлечь из объекта response?\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\nif response.status_code == 200:\n    print(\"Request was successful!\")\nelse:\n    print(f\"Request failed with status code {response.status_code}\")\n# %% [markdown]\n# Использование response.ok:\n# %% [markdown]\n# Библиотека requests предоставляет атрибут ok, который возвращает True, если код состояния ответа указывает на успешный запрос (коды от 200 до 299):\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\nif response.ok:\n    print(\"Request was successful!\")\nelse:\n    print(f\"Request failed with status code {response.status_code}\")\n# %% [markdown]\n# 3. Обработка ошибок\n# %% [markdown]\n# Когда запрос не может быть выполнен (например, сервер не доступен), будет выброшено исключение. Для обработки этих исключений можно использовать блоки try/except.\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\nif response.ok:\n    data = response.json()\n    if not data:\n        print(\"No data found\")\n    else:\n        print(\"Data received:\", data)\nelse:\n    print(f\"Request failed with status code {response.status_code}\")\n# %% [markdown]",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "headers = {\n    \"User-Agent\": \"my-app/1.0\",\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer your_token\",\n}\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", headers=headers)\nprint(response.status_code)\nprint(response.text)\n# %% [markdown]\n# В этом примере мы передаем заголовки, которые указывают серверу, что клиент — это приложение с именем my-app/1.0, и что мы ожидаем ответ в формате JSON. Также передаем токен авторизации через заголовок Authorization.",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\", headers=headers)\nprint(response.status_code)\nprint(response.text)\n# %% [markdown]\n# В этом примере мы передаем заголовки, которые указывают серверу, что клиент — это приложение с именем my-app/1.0, и что мы ожидаем ответ в формате JSON. Также передаем токен авторизации через заголовок Authorization.\n#\n# Работа с куками\n#\n# Куки используются для хранения информации о состоянии между запросами, например, для сохранения сессии пользователя.\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "cookies",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "cookies = {\"session_id\": \"123456789\"}\n# Отправка запроса с куками\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", cookies=cookies)\nprint(response.status_code)\nprint(response.cookies)\n# %% [markdown]\n# В этом примере мы отправляем запрос с кукой session_id, которая может быть использована сервером для отслеживания состояния сессии пользователя.\n# %% [markdown]\n# 2. Передача параметров и заголовков в запросах\n# %% [markdown]",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\", cookies=cookies)\nprint(response.status_code)\nprint(response.cookies)\n# %% [markdown]\n# В этом примере мы отправляем запрос с кукой session_id, которая может быть использована сервером для отслеживания состояния сессии пользователя.\n# %% [markdown]\n# 2. Передача параметров и заголовков в запросах\n# %% [markdown]\n# Параметры часто используются в URL-адресах для уточнения запроса (например, фильтры или лимиты). Библиотека requests позволяет легко передавать параметры и заголовки в запросах.\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "params = {\"userId\": 1, \"limit\": 5}\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", params=params)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# Здесь мы передаем параметры userId и limit, которые будут автоматически добавлены к URL как часть строки запроса: ?userId=1&limit=5.\n# %% [markdown]\n# Передача параметров в запросе POST\n# В случае с методом POST, параметры передаются в теле запроса:\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\", params=params)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# Здесь мы передаем параметры userId и limit, которые будут автоматически добавлены к URL как часть строки запроса: ?userId=1&limit=5.\n# %% [markdown]\n# Передача параметров в запросе POST\n# В случае с методом POST, параметры передаются в теле запроса:\n#\n# %%",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "data = {\"title\": \"New Post\", \"body\": \"This is the body of the post\", \"userId\": 1}\nresponse = requests.post(\"https://jsonplaceholder.typicode.com/posts\", data=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# Здесь мы отправляем данные в теле запроса, и сервер обрабатывает их как форму.\n# %% [markdown]\n# 3. Сессии и авторизация\n# Сессии и авторизация необходимы для работы с веб-сервисами, которые требуют подтверждения личности пользователя или сохранения состояния между запросами.\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.post(\"https://jsonplaceholder.typicode.com/posts\", data=data)\nprint(response.status_code)\nprint(response.json())\n# %% [markdown]\n# Здесь мы отправляем данные в теле запроса, и сервер обрабатывает их как форму.\n# %% [markdown]\n# 3. Сессии и авторизация\n# Сессии и авторизация необходимы для работы с веб-сервисами, которые требуют подтверждения личности пользователя или сохранения состояния между запросами.\n#\n# Использование сессий",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "session = requests.Session()\n# Добавление заголовков в сессию\nsession.headers.update({\"User-Agent\": \"my-app/1.0\"})\n# Отправка первого запроса\nresponse = session.get(\"https: //jsonplaceholder.typicode. com/posts\")\nprint(response.status_code)\n# Отправка второго запроса с той же сессией\nresponse = session.get(\"https: //jsonplaceholder. typicode. com/posts/1\")\nprint(response.status_code)\n# %% [markdown]",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = session.get(\"https: //jsonplaceholder.typicode. com/posts\")\nprint(response.status_code)\n# Отправка второго запроса с той же сессией\nresponse = session.get(\"https: //jsonplaceholder. typicode. com/posts/1\")\nprint(response.status_code)\n# %% [markdown]\n# В этом примере мы создаем сессию, добавляем заголовки и отправляем несколько запросов в рамках одной сессии. Это позволяет эффективно управлять состоянием.\n#\n# Авторизация\n# Авторизация необходима для получения доступа к защищенным ресурсам. Библиотека requests позволяет использовать базовую авторизацию и токены.",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = session.get(\"https: //jsonplaceholder. typicode. com/posts/1\")\nprint(response.status_code)\n# %% [markdown]\n# В этом примере мы создаем сессию, добавляем заголовки и отправляем несколько запросов в рамках одной сессии. Это позволяет эффективно управлять состоянием.\n#\n# Авторизация\n# Авторизация необходима для получения доступа к защищенным ресурсам. Библиотека requests позволяет использовать базовую авторизацию и токены.\n#\n# Базовая авторизация\n#",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\n    \"https: //jsonplaceholder.typicode.com/posts\",\n    auth=HTTPBasicAuth(\"username\", \"password\"),\n)\nprint(response.status_code)\nprint(response.text)\n# %% [markdown]\n# Авторизация с использованием токена\n# %%\n# import requests",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "headers = {\"Authorization\": \"Bearer your_token\"}\nresponse = requests.get(\"https://jsonplaceholder.typicode.com/posts\", headers=headers)\nprint(response.status_code)\nprint(response.text)\n# %% [markdown]\n# В этом примере используется авторизация с помощью токена Bearer, который добавляется в заголовок запроса.",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Requests",
        "description": "Requests",
        "peekOfCode": "response = requests.get(\"https://jsonplaceholder.typicode.com/posts\", headers=headers)\nprint(response.status_code)\nprint(response.text)\n# %% [markdown]\n# В этом примере используется авторизация с помощью токена Bearer, который добавляется в заголовок запроса.",
        "detail": "Requests",
        "documentation": {}
    },
    {
        "label": "BlogSpider",
        "kind": 6,
        "importPath": "Scraping",
        "description": "Scraping",
        "peekOfCode": "class BlogSpider(scrapy.Spider):\n    name = 'lider-vrn'\n    start_urls = ['https://lider-vrn.ru/catalog/santekhnika/']\n    def __init__(self):\n        super().__init__()\n        self.products = []\n        logging.info(\"Инициализация паука для сбора данных\")\n    def parse(self, response):\n        try:\n            for item_info in response.css('.item_info'):",
        "detail": "Scraping",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Scraping",
        "description": "Scraping",
        "peekOfCode": "def main():\n    # Настройка логирования\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    # Конфигурация Scrapy\n    settings = get_project_settings()\n    settings.update({\n        'USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',",
        "detail": "Scraping",
        "documentation": {}
    },
    {
        "label": "subcategories_dict",
        "kind": 5,
        "importPath": "subcategories",
        "description": "subcategories",
        "peekOfCode": "subcategories_dict = {}\nwb = op.load_workbook(filename, data_only=True)\nsheet = wb.active\nmax_rows = sheet.max_row\nfor i in range(7, max_rows+1):\n    sku = sheet.cell(row=i, column=2).value\n    subcategory = sheet.cell(row=i, column=12).value\n    if not sku:\n        continue\n    if subcategory not in subcategories_dict:",
        "detail": "subcategories",
        "documentation": {}
    },
    {
        "label": "wb",
        "kind": 5,
        "importPath": "subcategories",
        "description": "subcategories",
        "peekOfCode": "wb = op.load_workbook(filename, data_only=True)\nsheet = wb.active\nmax_rows = sheet.max_row\nfor i in range(7, max_rows+1):\n    sku = sheet.cell(row=i, column=2).value\n    subcategory = sheet.cell(row=i, column=12).value\n    if not sku:\n        continue\n    if subcategory not in subcategories_dict:\n        subcategories_dict[subcategory] = [sku]",
        "detail": "subcategories",
        "documentation": {}
    },
    {
        "label": "sheet",
        "kind": 5,
        "importPath": "subcategories",
        "description": "subcategories",
        "peekOfCode": "sheet = wb.active\nmax_rows = sheet.max_row\nfor i in range(7, max_rows+1):\n    sku = sheet.cell(row=i, column=2).value\n    subcategory = sheet.cell(row=i, column=12).value\n    if not sku:\n        continue\n    if subcategory not in subcategories_dict:\n        subcategories_dict[subcategory] = [sku]\n    else:",
        "detail": "subcategories",
        "documentation": {}
    },
    {
        "label": "max_rows",
        "kind": 5,
        "importPath": "subcategories",
        "description": "subcategories",
        "peekOfCode": "max_rows = sheet.max_row\nfor i in range(7, max_rows+1):\n    sku = sheet.cell(row=i, column=2).value\n    subcategory = sheet.cell(row=i, column=12).value\n    if not sku:\n        continue\n    if subcategory not in subcategories_dict:\n        subcategories_dict[subcategory] = [sku]\n    else:\n        subcategories_dict[subcategory].append(sku)",
        "detail": "subcategories",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "TextEditor",
        "description": "TextEditor",
        "peekOfCode": "class Ui_MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(Ui_MainWindow, self).__init__()\n        self.setupUi(self)\n        self.btnOpen.clicked.connect(self.open_file)\n        self.btnSaveAs.clicked.connect(self.save_file_as)\n    def open_file(self):\n        \"\"\"\n        Диалоговое окно открытия файла:\n        1. После self, выберите файл - заголовок окна открытия файла.",
        "detail": "TextEditor",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "TextEditor1",
        "description": "TextEditor1",
        "peekOfCode": "class Ui_MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(Ui_MainWindow, self).__init__()\n        self.setupUi(self)\n        self.btnOpen.clicked.connect(self.open_file)\n        self.btnSaveAs.clicked.connect(self.save_file_as)\n    def open_file(self):\n        \"\"\"\n        Диалоговое окно открытия файла:\n        1. После self, выберите файл - заголовок окна открытия файла.",
        "detail": "TextEditor1",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 2,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "def stop()->None:\n    btn_start.pack()\n    btn_stop.pack_forget()\n    pygame.mixer.music.pause()\ndef sound()->None:\n    btn_start.pack_forget()\n    btn_stop.pack()\n    pygame.mixer.music.play()\ndef start()->None:\n    duration:int = int(seconds.get())",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "sound",
        "kind": 2,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "def sound()->None:\n    btn_start.pack_forget()\n    btn_stop.pack()\n    pygame.mixer.music.play()\ndef start()->None:\n    duration:int = int(seconds.get())\n    while duration:\n        m, s = divmod(int(duration), 60)\n        min_sec_format:str = '{:02d}:{:02d}'.format(m, s)\n        count_digit['text'] = min_sec_format",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "def start()->None:\n    duration:int = int(seconds.get())\n    while duration:\n        m, s = divmod(int(duration), 60)\n        min_sec_format:str = '{:02d}:{:02d}'.format(m, s)\n        count_digit['text'] = min_sec_format\n        count_digit.update()\n        time.sleep(1)\n        duration -= 1\n    sound()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "file:str",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "file:str = '1.mp3'\npygame.init()\npygame.mixer.init()\npygame.mixer.music.load(file)\nroot:object = Tk()\nroot.title('Таймер')\nroot.geometry('150x150')\nroot.resizable(False, False)\ncount_digit:object = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "root:object",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "root:object = Tk()\nroot.title('Таймер')\nroot.geometry('150x150')\nroot.resizable(False, False)\ncount_digit:object = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()\nseconds:object = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack()\nbtn_start:object = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "count_digit:object",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "count_digit:object = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()\nseconds:object = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack()\nbtn_start:object = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop:object = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nroot.mainloop()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "seconds:object",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "seconds:object = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack()\nbtn_start:object = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop:object = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nroot.mainloop()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "btn_start:object",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "btn_start:object = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop:object = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nroot.mainloop()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "btn_stop:object",
        "kind": 5,
        "importPath": "Timer",
        "description": "Timer",
        "peekOfCode": "btn_stop:object = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nroot.mainloop()",
        "detail": "Timer",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "Tree",
        "description": "Tree",
        "peekOfCode": "def build_tree(path, tree):\n    for entry in sorted(os.listdir(path)):\n        full_path = os.path.join(path, entry)\n        if os.path.isdir(full_path):\n            subtree = tree.add(f\" {entry}\")\n            build_tree(full_path, subtree)\n        else:\n            tree.add(f\" {entry}\")\ndef visualize_project_structure(root_path):\n    console = Console()",
        "detail": "Tree",
        "documentation": {}
    },
    {
        "label": "visualize_project_structure",
        "kind": 2,
        "importPath": "Tree",
        "description": "Tree",
        "peekOfCode": "def visualize_project_structure(root_path):\n    console = Console()\n    tree = Tree(f\" Пpoekт: {os.path.basename(root_path)}\")\n    build_tree(root_path, tree)\n    console.print(tree)\nvisualize_project_structure(r\"d:\\Source\\1s\\Externals\")",
        "detail": "Tree",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Foo:\n    def action(self) -> Foo:\n        # Возвращаемая сигнатура `-> Foo` вычисляется непосредственно во время определения,\n        # но класс `Foo` на этом этапе ещё полностью не определён,\n        # вызывая NameError в процессе контроля типов.\n        ...\n# Это обходное решение -> использование строковых типов\nclass Bar:\n    def action(self) -> \"Bar\":\n        # Обходное решение со строковыми литералами: некрасиво и повышает вероятность ошибок",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Bar:\n    def action(self) -> \"Bar\":\n        # Обходное решение со строковыми литералами: некрасиво и повышает вероятность ошибок\n        ...\n# %% [markdown]\n# PEP 563: Postponed Evaluation of Annotations было нацелено на устранение этой проблемы изменением времени вычисления \n# сигнатур типов. Вместо того, чтобы вычислять сигнатуры во время определения, PEP 563 выполняет внутреннее \n# преобразование типов в строки и откладывает вычисление до момента, когда они понадобятся, обычно во время статического \n# анализа. Это обеспечивает более чистые прямые ссылки без определения строковых литералов в явном виде и снижает оверхед \n# сигнатур типов в среде исполнения.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Foo:\n    def bar(self) -> Foo:  # Теперь работает!\n        ...\n# %% [markdown]\n# Так в чём же проблема?\n# Для модулей контроля типов это изменение по большей мере остаётся прозрачным. Но поскольку PEP 563 реализует его, по сути, внутренне обращаясь со всеми типами, как со строками, то все, кто полагается на доступ к возвращаемым типам в среде исполнения (например, ORM, библиотеки сериализации, валидаторы, инъекторы зависимостей и так далее) будут иметь проблемы совместимости с этой новой системой.\n# %% [markdown]\n# Именно поэтому даже спустя десять лет после появления PEP современный Python (3.13 на момент написания моего поста) по-прежнему полагается на ту же хак-систему типов, внедрённую в Python 3.5.\n# %% [python]\n# ===== Обычная типизация Python =====",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class function:\n    # __annotations__ для объекта функции — это уже\n    # \"data descriptor\" в Python, мы просто меняем то,\n    # что он делает\n    @property\n    def __annotations__(self):\n        return self.__annotate__()\n# ...\ndef annotate_foo():\n    return {'x': int, 'y': MyType, 'return': float}",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyType",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyType:\n   ...\nfoo_y_annotation = foo.__annotations__['y']\n# %% [markdown]\n# Эта стратегия отложенного вычисления решает такие проблемы, как прямые ссылки и циклические зависимости, потому что сигнатуры вычисляются только когда необходимы. Более того, это повышает производительность благодаря тому, что мы избегаем незамедлительного вычисления сигнатур, которые могут и не использоваться, сохраняя при этом полную семантическую информацию, поддерживающую инструменты интроспекции и контроля типов в среде исполнения.\n# %% [markdown]\n# Дополнительный факт: с версии 3.11 Python поддерживает тип Self (PEP 673), позволяющий правильно типизировать методы, возвращающие экземпляры своего собственного класса, решая эту конкретную проблему возвращаемых типов, ссылающихся на самих себя.\nfrom typing import Self\nclass Foo:\n    def bar(self) -> Self:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Foo:\n    def bar(self) -> Self:\n        ...\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]\n# * A History Of Annotations\n# * Python, Type Hints, and Future Annotations\n# * __future__ — Future Statement Definitions\n# * PEP 484 — Type Hints",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "KVStore[K",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class KVStore[K: str | int, V]:\n    def __init__(self) -> None:\n        self.store: dict[K, V] = {}\n    def get(self, key: K) -> V:\n        return self.store[key]\n    def set(self, key: K, value: V) -> None:\n        self.store[key] = value\nkv = KVStore[str, int]()\nkv.set(\"one\", 1)\nkv.set(\"two\", 2)",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Foo(Generic[UnBounded, Bounded, Constrained]):\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n# %% [python]\n# НОВЫЙ СИНТАКСИС - Python 3.12+\nclass Foo[UnBounded, Bounded: int, Constrained: int | float]:\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Foo[UnBounded",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Foo[UnBounded, Bounded: int, Constrained: int | float]:\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n# %% [markdown]\n# С этим изменением также была внедрена более мощная версия дженериков с переменным количеством аргументов (variadic generics). Благодаря ей можно создавать произвольное количество параметров типов для сложных структур данных и операций.\n# %% [python]\nclass Tuple[*Ts]:\n    def __init__(self, *args: *Ts) -> None:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Tuple[*Ts]",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Tuple[*Ts]:\n    def __init__(self, *args: *Ts) -> None:\n        self.values = args\n# Работает с любым количеством типов!\npair = Tuple[str, int](\"hello\", 42)\ntriple = Tuple[str, int, bool](\"world\", 100, True)\n# %% [markdown]\n# Кроме того, в рамках изменений типизации в 3.12 в Python также добавили новый краткий синтаксис псевдонимов типов!\n# %% [python]\n# СТАРЫЙ СИНТАКСИС — Python с 3.5 по 3.9",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Duck",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Duck:\n    def quack(self): print('Quack!')\nclass Person:\n    def quack(self): print(\"I'm quacking!\")\nclass Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Person())  # Работает!",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Person:\n    def quack(self): print(\"I'm quacking!\")\nclass Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Person())  # Работает!\nrun_quack(Dog())  # Сбой с AttributeError\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Person())  # Работает!\nrun_quack(Dog())  # Сбой с AttributeError\n# %% [markdown]\n# Здесь на помощь приходят протоколы. Протоколы (также называемые Structural Subtyping) — это классы типизации в Python, определяющие допустимые структуру и поведение классов без использования интерфейсов и наследования.\n# %% [python]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Quackable",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Quackable(Protocol):\n    def quack(self) -> None:\n        ...  # Многоточие здесь означает, что это только сигнатура метода\nclass Duck:\n    def quack(self): print('Quack!')\nclass Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj: Quackable):\n    obj.quack()\nrun_quack(Duck())  # Работает!",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Duck",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Duck:\n    def quack(self): print('Quack!')\nclass Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj: Quackable):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Dog())  # Сбой на этапе КОНТРОЛЯ ТИПОВ (не в среде исполнения)\n# %% [markdown]\n# По сути, протоколы проверяют, что может делать ваш объект, а не что он делает. Они просто постулируют, что пока объект реализует определённые методы или поведения, он приемлем, вне зависимости от истинного типа или наследования.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Dog:\n    def bark(self): print('Woof!')\ndef run_quack(obj: Quackable):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Dog())  # Сбой на этапе КОНТРОЛЯ ТИПОВ (не в среде исполнения)\n# %% [markdown]\n# По сути, протоколы проверяют, что может делать ваш объект, а не что он делает. Они просто постулируют, что пока объект реализует определённые методы или поведения, он приемлем, вне зависимости от истинного типа или наследования.\n# %% [markdown]\n# Дополнительная подсказка: можно добавить декоратор @runtime_checkable, если требуется, чтобы наряду с протоколами работали проверки isinstance()!",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Drawable",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Drawable(Protocol):\n    def draw(self) -> None:\n        ...\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]\n# * Python Protocols: Leveraging Structural Subtyping\n# * MyPy: Protocols and structural subtyping\n# * Python Docs — Protocols\n# * PEP 544 — Protocols: Structural subtyping",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "retry",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class retry:\n    def __enter__(self):\n        print(\"Entering Context\")\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Exiting Context\")\n# %% [python]\n# НОВЫЙ СИНТАКСИС — Новый менеджер контекста на основе contextlib\nimport contextlib\n@contextlib.contextmanager\ndef retry():",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Person:\n    __slots__ = ('name', 'age')\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n# %% [markdown]\n# Классы Python хранят атрибуты экземпляров во внутреннем словаре __dict__, то есть каждый раз для доступа к значению требуется поиск по хэш-таблице.\n# %% [markdown]\n# __slots__ использует похожую на массив структуру, где поиск атрибутов можно выполнять за время O(1), что немного ускоряет выполнение кода на Python.\n# %% [python]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "FooBar",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class FooBar:\n    def __init__(self):\n        self.a = 1\n        self.b = 2\n        self.c = 3\nf = FooBar()\nprint(f.__dict__)  # {'a': 1, 'b': 2, 'c': 3}\n# %% [python]\n# Со __slots__\nclass FooBar:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "FooBar",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class FooBar:\n    __slots__ = ('a', 'b', 'c')\n    def __init__(self):\n        self.a = 1\n        self.b = 2\n        self.c = 3\nf = FooBar()\nprint(f.__dict__)  # AttributeError\nprint(f.__slots__)  # ('a', 'b', 'c')\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "ProxyProperty",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class ProxyProperty(Generic[P, R]):\n    func: Callable[P, R]\n    instance: object\n    def __init__(self, func: Callable[P, R]) -> None:\n        self.func = func\n    def __get__(self, instance: object, _=None) -> Self:\n        self.instance = instance\n        return self\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        return self.func(self.instance, *args, **kwargs)",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class Container:\n    @proxy_property\n    def value(self, val: int = 5) -> str:\n        return f\"The value is: {val}\"\n# Пример использования \nc = Container()\nprint(c.value)      # Возвращает: The value is: 5\nprint(c.value(7))   # Возвращает: The value is: 7\n# %% [markdown]\n# Всё сводится к Descriptor Protocol Python:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyMetaclass",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyMetaclass(type):\n    def __new__(cls, name, bases, namespace):\n        # Магия происходит здесь\n        return super().__new__(cls, name, bases, namespace)\nclass MyClass(metaclass=MyMetaclass):\n    pass\nobj = MyClass()\n# %% [markdown]\n# Классы в Python — это не просто «схемы» для объектов. Они тоже являются объектами! А каждому объекту требуется создающий его класс. Так что же создаёт объекты-классы? Метаклассы.\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyClass(metaclass=MyMetaclass):\n    pass\nobj = MyClass()\n# %% [markdown]\n# Классы в Python — это не просто «схемы» для объектов. Они тоже являются объектами! А каждому объекту требуется создающий его класс. Так что же создаёт объекты-классы? Метаклассы.\n# %% [markdown]\n# По умолчанию, Python использует для создания всех классов метакласс type. Например, эти два примера кода эквивалентны друг другу:\n# %% [python]\n# Создаём объект MyClass\nclass MyClass:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyClass:\n    ...\nobj = MyClass()\n# Тоже создаём объект MyClass\nobj2 = type(\"MyClass\", (), {})\n# %% [markdown]\n# Чтобы разобраться, что означают эти аргументы, приведём пример, создающий класс с атрибутом x и методом say_hi, которые также являются подклассами object.\n# %% [python]\n# type(\n#     name,",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "DoubleAttrMeta",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class DoubleAttrMeta(type):\n    def __new__(cls, name, bases, namespace):\n        new_namespace = {}\n        for key, val in namespace.items():\n            if isinstance(val, int):\n                val *= 2\n            new_namespace[key] = val\n        return super().__new__(cls, name, bases, new_namespace)\nclass MyClass(metaclass=DoubleAttrMeta):\n    x = 5",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyClass(metaclass=DoubleAttrMeta):\n    x = 5\n    y = 10\nprint(MyClass.x)  # 10\nprint(MyClass.y)  # 20\n# %% [markdown]\n# Вот ещё один пример метакласса, заносящий каждый созданный класс в registry.\n# %% [python]\n# ===== Решение с метаклассом =====\nclass RegisterMeta(type):",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "RegisterMeta",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class RegisterMeta(type):\n    registry = []\n    def __new__(mcs, name, bases, attrs):\n        cls = super().__new__(mcs, name, bases, attrs)\n        mcs.registry.append(cls)\n        return cls\n# %% [markdown]\n# Проблема в том, что декораторы могут решать ту же самую задачу без использования чёрной магии (и код часто оказывается при этом чище).\n# %% [python]\n# ===== Решение с декоратором =====",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "class MyClass:\n    pass\n# %% [markdown]\n# И это подчёркивает самую большую проблему метаклассов:\n# %% [markdown]\n# Почти в 100% случаев вам они не понадобятся.\n# %% [markdown]\n# В повседневной разработке 99% кода не будет даже затрагивать те сценарии использования, в которых были бы полезны метаклассы. А из оставшегося 1% в 95% случаев задачу можно решать при помощи обычных декораторов, dunder-методов и просто наследования.\n# %% [markdown]\n# Именно поэтому возникло знаменитое изречение о Python:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "transform",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def transform(data: str, mode: Literal[\"split\"]) -> list[str]:\n    ...\n@overload\ndef transform(data: str, mode: Literal[\"upper\"]) -> str:\n    ...\ndef transform(data: str, mode: Literal[\"split\", \"upper\"]) -> list[str] | str:\n    if mode == \"split\":\n        return data.split()\n    else:\n        return data.upper()",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "transform",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def transform(data: str, mode: Literal[\"upper\"]) -> str:\n    ...\ndef transform(data: str, mode: Literal[\"split\", \"upper\"]) -> list[str] | str:\n    if mode == \"split\":\n        return data.split()\n    else:\n        return data.upper()\nsplit_words = transform(\"hello world\", \"split\")  # Возвращаемый тип list[str]\nsplit_words[0]  # Модуль проверки типов доволен\nupper_words = transform(\"hello world\", \"upper\")  # Возвращаемый тип str",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "transform",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def transform(data: str, mode: Literal[\"split\", \"upper\"]) -> list[str] | str:\n    if mode == \"split\":\n        return data.split()\n    else:\n        return data.upper()\nsplit_words = transform(\"hello world\", \"split\")  # Возвращаемый тип list[str]\nsplit_words[0]  # Модуль проверки типов доволен\nupper_words = transform(\"hello world\", \"upper\")  # Возвращаемый тип str\nupper_words.lower()  # Модуль проверки типов доволен\nupper_words.append(\"!\")  # Невозможно получить доступ к атрибуту \"append\" для \"str\"",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def get_user(id: int = ..., username: None = None) -> User:\n    ...\n@overload\ndef get_user(id: None = None, username: str = ...) -> User:\n    ...\ndef get_user(id: int | None = None, username: str | None = None) -> User:\n    ...\nget_user(id=1)  # Работает!\nget_user(username=\"John\")  # Работает!\nget_user(id=1, username=\"John\")  # Ни одна из перегрузок \"get_user\" не соответствует переданным аргументам",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def get_user(id: None = None, username: str = ...) -> User:\n    ...\ndef get_user(id: int | None = None, username: str | None = None) -> User:\n    ...\nget_user(id=1)  # Работает!\nget_user(username=\"John\")  # Работает!\nget_user(id=1, username=\"John\")  # Ни одна из перегрузок \"get_user\" не соответствует переданным аргументам\n# %% [markdown]\n# ... — это особое значение, часто используемое в перегрузках, чтобы обозначить, что параметр опциональный, но всё равно требует значения.\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def get_user(id: int | None = None, username: str | None = None) -> User:\n    ...\nget_user(id=1)  # Работает!\nget_user(username=\"John\")  # Работает!\nget_user(id=1, username=\"John\")  # Ни одна из перегрузок \"get_user\" не соответствует переданным аргументам\n# %% [markdown]\n# ... — это особое значение, часто используемое в перегрузках, чтобы обозначить, что параметр опциональный, но всё равно требует значения.\n# %% [markdown]\n# Бонусная хитрость: как вы, вероятно, знаете, Python также поддерживает строковые литералы. Они позволяют утверждать, что параметру могут \n# быть переданы только конкретные значения строк, что обеспечивает ещё большую безопасность типов. Можно воспринимать их, как легковесную ",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "set_color",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def set_color(color: Literal[\"red\", \"blue\", \"green\"]) -> None:\n    ...\nset_color(\"red\")\nset_color(\"blue\")\nset_color(\"green\")\nset_color(\"fuchsia\")  # Аргумент типа \"Literal['fuchsia']\" не может быть присвоен параметру \"color\"\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]\n# * Python Type Hints: How to use @overload",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def foo(a, b, /, c, d, *, e, f):\n\t#         ^        ^\n\t# Видели такое раньше?\n\t...\n# %% [markdown]\n# * отмечает параметры, которые могут быть только именованными. Аргументы после * должны передаваться только как \n# именованные аргументы.\n# %% [python]\n#   KW+POS | KW ONLY\n#       vv | vv",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def foo(a, *, b):\n    ...\n# == РАЗРЕШЕНО ==\nfoo(a=1, b=2)  # Все именованные\nfoo(1, b=2)  # Половина позиционных, половина именованных\n# == ЗАПРЕЩЕНО ==\nfoo(1, 2)  # Нельзя использовать позиционный параметр вместо именованного\n#      ^\n# %% [markdown]\n# / отмечает параметры, которые могут быть только позиционными. Аргументы перед / должны передаваться позиционно и ",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def bar(a, /, b):\n    ...\n# == РАЗРЕШЕНО ==\nbar(1, 2)  # Все позиционные\nbar(1, b=2)  # Половина позиционных, половина именованных\n# == ЗАПРЕЩЕНО ==\nbar(a=1, b=2)  # Нельзя использовать именованный параметр вместо позиционного\n#   ^\n# %% [markdown]\n# Только именованные и только позиционные аргументы особенно полезны для разработчиков API, они позволяют ограничить ",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foobar",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def foobar() -> int:\n    return 1\nret_type = foobar.__annotations__.get(\"return\")\nret_type\n# Возвращает: <class 'int'>\nnew_int = ret_type()\n# ===== С отложенным вычислением =====\nfrom __future__ import annotations\ndef foobar() -> int:\n    return 1",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foobar",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def foobar() -> int:\n    return 1\nret_type = foobar.__annotations__.get(\"return\")\nret_type\n# \"int\" (str)\nnew_int = ret_type()  # TypeError: 'str' object is not callable\n# %% [markdown]\n# В недавно появившемся PEP 649 предложен новый способ обработки сигнатур функций и классов Python при помощи отложенного, или «ленивого» вычисления. Вместо того, чтобы вычислять сигнатуры во время определения функции или класса, как это делалось традиционно, этот способ откладывает их вычисление до момента доступа к ним.\n# %% [markdown]\n# Это реализуется компиляцией выражений сигнатур в отдельную функцию, хранящуюся в специальном атрибуте __annotate__. При первой операции доступа к атрибуту __annotations__ эта функция вызывается для вычисления и кэширования сигнатур, делая их доступными для последующего доступа.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "annotate_foo",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def annotate_foo():\n    return {'x': int, 'y': MyType, 'return': float}\ndef foo(x = 3, y = \"abc\"):\n    ...\nfoo.__annotate__ = annotate_foo\nclass MyType:\n   ...\nfoo_y_annotation = foo.__annotations__['y']\n# %% [markdown]\n# Эта стратегия отложенного вычисления решает такие проблемы, как прямые ссылки и циклические зависимости, потому что сигнатуры вычисляются только когда необходимы. Более того, это повышает производительность благодаря тому, что мы избегаем незамедлительного вычисления сигнатур, которые могут и не использоваться, сохраняя при этом полную семантическую информацию, поддерживающую инструменты интроспекции и контроля типов в среде исполнения.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def foo(x = 3, y = \"abc\"):\n    ...\nfoo.__annotate__ = annotate_foo\nclass MyType:\n   ...\nfoo_y_annotation = foo.__annotations__['y']\n# %% [markdown]\n# Эта стратегия отложенного вычисления решает такие проблемы, как прямые ссылки и циклические зависимости, потому что сигнатуры вычисляются только когда необходимы. Более того, это повышает производительность благодаря тому, что мы избегаем незамедлительного вычисления сигнатур, которые могут и не использоваться, сохраняя при этом полную семантическую информацию, поддерживающую инструменты интроспекции и контроля типов в среде исполнения.\n# %% [markdown]\n# Дополнительный факт: с версии 3.11 Python поддерживает тип Self (PEP 673), позволяющий правильно типизировать методы, возвращающие экземпляры своего собственного класса, решая эту конкретную проблему возвращаемых типов, ссылающихся на самих себя.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "run_quack",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def run_quack(obj):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Person())  # Работает!\nrun_quack(Dog())  # Сбой с AttributeError\n# %% [markdown]\n# Здесь на помощь приходят протоколы. Протоколы (также называемые Structural Subtyping) — это классы типизации в Python, определяющие допустимые структуру и поведение классов без использования интерфейсов и наследования.\n# %% [python]\nfrom typing import Protocol\nclass Quackable(Protocol):",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "run_quack",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def run_quack(obj: Quackable):\n    obj.quack()\nrun_quack(Duck())  # Работает!\nrun_quack(Dog())  # Сбой на этапе КОНТРОЛЯ ТИПОВ (не в среде исполнения)\n# %% [markdown]\n# По сути, протоколы проверяют, что может делать ваш объект, а не что он делает. Они просто постулируют, что пока объект реализует определённые методы или поведения, он приемлем, вне зависимости от истинного типа или наследования.\n# %% [markdown]\n# Дополнительная подсказка: можно добавить декоратор @runtime_checkable, если требуется, чтобы наряду с протоколами работали проверки isinstance()!\n# %% [python]\n@runtime_checkable",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "retry",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def retry():\n    print(\"Entering Context\")\n    yield\n    print(\"Exiting Context\")\n# %% [markdown]\n# Для создания своего менеджера нужно написать функцию с декоратором @contextlib.contextmanager, добавить код подготовки до yield и код подчистки после него. Все переменные в yield будут переданы дополнительному контексту. Всё просто.\n# %% [markdown]\n# Оператор yield приказывает менеджеру контекста поставить вашу функцию на паузу и позволяет выполниться содержимому в блоке with.\n# %% [python]\nimport contextlib",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def context():\n    # Здесь код подготовки\n    setup()\n    yield (...)  # Все переменные, которые нужно передать блоку with\n    # Здесь код очистки\n    takedown()\n# %% [markdown]\n# В целом, это гораздо более краткий и читаемый способ создания и использования менеджеров контекста в Python.\n# %% [markdown]\n# ▍ Дополнительные ресурсы",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def fib(n):\n    return n if n < 2 else fib(n-1) + fib(n-2)\n# %% [markdown]\n# В Python 3.2 @lru_cache появился как часть модуля functools и был предназначен для быстрой и чистой мемоизации функций. В Python 3.9 был добавлен @cache, позволяющий добиться того же результата с меньшим количеством кода. Если вам нужен непосредственный контроль над размером кэша, то можно по-прежнему использовать lru_cache.\n# %% [python]\nFIB_CACHE = {}\n# С ручным кэшированием\ndef fib(n):\n    if n in FIB_CACHE:\n        return FIB_CACHE[n]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def fib(n):\n    if n in FIB_CACHE:\n        return FIB_CACHE[n]\n    if n <= 2:\n        return 1\n    FIB_CACHE[n] = fib(n - 1) + fib(n - 2)\n    return FIB_CACHE[n]\nfrom functools import lru_cache\n# Тот же код с lru_cache\n@lru_cache(maxsize=None)",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def fib(n):\n    return n if n < 2 else fib(n-1) + fib(n-2)\nfrom functools import cache\n# Тот же код с новым кэшем Python 3.9\n@cache\ndef fib(n):\n    return n if n < 2 else fib(n-1) + fib(n-2)\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def fib(n):\n    return n if n < 2 else fib(n-1) + fib(n-2)\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]\n# * Python Cache: Two Simple Methods\n# * (outdated) Caching in Python Using the LRU Cache Strategy\n# * Python Docs — @functools.cache\n# * Python Docs — @functools.lru_cache\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "background_task",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def background_task():\n    time.sleep(2)\n    future.set_result(\"Done!\")\nthread = threading.Thread(target=background_task)\nthread.daemon = True\nthread.start()\n# Пробуем все операции управления\nprint(f\"Cancelled: {future.cancel()}\")  # Скорее всего, False, если запустилось\ntry:\n    # Ждём не больше 0,5 секунды",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "slow_task",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def slow_task():\n    time.sleep(1)\n    return \"Done!\"\nwith ThreadPoolExecutor() as executor:\n    # Немедленно возвращает Future\n    future = executor.submit(slow_task)\n    # Пока ожидаем, выполняем другую работу...\n    print(\"Working...\")\n    # Получаем результат по необходимости\n    print(future.result())",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "proxy_property",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def proxy_property(func: Callable[P, R]) -> ProxyProperty[P, R]:\n    return ProxyProperty(func)\nclass Container:\n    @proxy_property\n    def value(self, val: int = 5) -> str:\n        return f\"The value is: {val}\"\n# Пример использования \nc = Container()\nprint(c.value)      # Возвращает: The value is: 5\nprint(c.value(7))   # Возвращает: The value is: 7",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "def register(cls):\n    registry.append(cls)\n    return cls\n@register\nclass MyClass:\n    pass\n# %% [markdown]\n# И это подчёркивает самую большую проблему метаклассов:\n# %% [markdown]\n# Почти в 100% случаев вам они не понадобятся.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "split_words",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "split_words = transform(\"hello world\", \"split\")  # Возвращаемый тип list[str]\nsplit_words[0]  # Модуль проверки типов доволен\nupper_words = transform(\"hello world\", \"upper\")  # Возвращаемый тип str\nupper_words.lower()  # Модуль проверки типов доволен\nupper_words.append(\"!\")  # Невозможно получить доступ к атрибуту \"append\" для \"str\"\n# %% [markdown]\n# Перегрузки не только могут менять возвращаемый тип в зависимости от аргументов, но и способны гораздо на большее! В ещё одном примере мы \n# используем перегрузки типизации, чтобы передавался ИЛИ id, ИЛИ username, но не оба.\n# %% [python]\n@overload",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "upper_words",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "upper_words = transform(\"hello world\", \"upper\")  # Возвращаемый тип str\nupper_words.lower()  # Модуль проверки типов доволен\nupper_words.append(\"!\")  # Невозможно получить доступ к атрибуту \"append\" для \"str\"\n# %% [markdown]\n# Перегрузки не только могут менять возвращаемый тип в зависимости от аргументов, но и способны гораздо на большее! В ещё одном примере мы \n# используем перегрузки типизации, чтобы передавался ИЛИ id, ИЛИ username, но не оба.\n# %% [python]\n@overload\ndef get_user(id: int = ..., username: None = None) -> User:\n    ...",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "ret_type",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "ret_type = foobar.__annotations__.get(\"return\")\nret_type\n# Возвращает: <class 'int'>\nnew_int = ret_type()\n# ===== С отложенным вычислением =====\nfrom __future__ import annotations\ndef foobar() -> int:\n    return 1\nret_type = foobar.__annotations__.get(\"return\")\nret_type",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "new_int",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "new_int = ret_type()\n# ===== С отложенным вычислением =====\nfrom __future__ import annotations\ndef foobar() -> int:\n    return 1\nret_type = foobar.__annotations__.get(\"return\")\nret_type\n# \"int\" (str)\nnew_int = ret_type()  # TypeError: 'str' object is not callable\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "ret_type",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "ret_type = foobar.__annotations__.get(\"return\")\nret_type\n# \"int\" (str)\nnew_int = ret_type()  # TypeError: 'str' object is not callable\n# %% [markdown]\n# В недавно появившемся PEP 649 предложен новый способ обработки сигнатур функций и классов Python при помощи отложенного, или «ленивого» вычисления. Вместо того, чтобы вычислять сигнатуры во время определения функции или класса, как это делалось традиционно, этот способ откладывает их вычисление до момента доступа к ним.\n# %% [markdown]\n# Это реализуется компиляцией выражений сигнатур в отдельную функцию, хранящуюся в специальном атрибуте __annotate__. При первой операции доступа к атрибуту __annotations__ эта функция вызывается для вычисления и кэширования сигнатур, делая их доступными для последующего доступа.\n# %% [python]\n# Пример кода из PEP 649",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "new_int",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "new_int = ret_type()  # TypeError: 'str' object is not callable\n# %% [markdown]\n# В недавно появившемся PEP 649 предложен новый способ обработки сигнатур функций и классов Python при помощи отложенного, или «ленивого» вычисления. Вместо того, чтобы вычислять сигнатуры во время определения функции или класса, как это делалось традиционно, этот способ откладывает их вычисление до момента доступа к ним.\n# %% [markdown]\n# Это реализуется компиляцией выражений сигнатур в отдельную функцию, хранящуюся в специальном атрибуте __annotate__. При первой операции доступа к атрибуту __annotations__ эта функция вызывается для вычисления и кэширования сигнатур, делая их доступными для последующего доступа.\n# %% [python]\n# Пример кода из PEP 649\nclass function:\n    # __annotations__ для объекта функции — это уже\n    # \"data descriptor\" в Python, мы просто меняем то,",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foo.__annotate__",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "foo.__annotate__ = annotate_foo\nclass MyType:\n   ...\nfoo_y_annotation = foo.__annotations__['y']\n# %% [markdown]\n# Эта стратегия отложенного вычисления решает такие проблемы, как прямые ссылки и циклические зависимости, потому что сигнатуры вычисляются только когда необходимы. Более того, это повышает производительность благодаря тому, что мы избегаем незамедлительного вычисления сигнатур, которые могут и не использоваться, сохраняя при этом полную семантическую информацию, поддерживающую инструменты интроспекции и контроля типов в среде исполнения.\n# %% [markdown]\n# Дополнительный факт: с версии 3.11 Python поддерживает тип Self (PEP 673), позволяющий правильно типизировать методы, возвращающие экземпляры своего собственного класса, решая эту конкретную проблему возвращаемых типов, ссылающихся на самих себя.\nfrom typing import Self\nclass Foo:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "foo_y_annotation",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "foo_y_annotation = foo.__annotations__['y']\n# %% [markdown]\n# Эта стратегия отложенного вычисления решает такие проблемы, как прямые ссылки и циклические зависимости, потому что сигнатуры вычисляются только когда необходимы. Более того, это повышает производительность благодаря тому, что мы избегаем незамедлительного вычисления сигнатур, которые могут и не использоваться, сохраняя при этом полную семантическую информацию, поддерживающую инструменты интроспекции и контроля типов в среде исполнения.\n# %% [markdown]\n# Дополнительный факт: с версии 3.11 Python поддерживает тип Self (PEP 673), позволяющий правильно типизировать методы, возвращающие экземпляры своего собственного класса, решая эту конкретную проблему возвращаемых типов, ссылающихся на самих себя.\nfrom typing import Self\nclass Foo:\n    def bar(self) -> Self:\n        ...\n# %% [markdown]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "kv",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "kv = KVStore[str, int]()\nkv.set(\"one\", 1)\nkv.set(\"two\", 2)\nkv.set(\"three\", 3)\n# %% [markdown]\n# Изначально в Python 3.5 дженерики были реализованы при помощи синтаксиса TypeVar. Однако PEP 695 для Python 3.12 преобразовал сигнатуры типов с нативным синтаксисом для дженериков, псевдонимов типов и так далее.\n# %% [python]\n# СТАРЫЙ СИНТАКСИС — Python с 3.5 по 3.11\nfrom typing import Generic, TypeVar\nUnBounded = TypeVar(\"UnBounded\")",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "UnBounded",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "UnBounded = TypeVar(\"UnBounded\")\nBounded = TypeVar(\"Bounded\", bound=int)\nConstrained = TypeVar(\"Constrained\", int, float)\nclass Foo(Generic[UnBounded, Bounded, Constrained]):\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n# %% [python]\n# НОВЫЙ СИНТАКСИС - Python 3.12+",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Bounded",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "Bounded = TypeVar(\"Bounded\", bound=int)\nConstrained = TypeVar(\"Constrained\", int, float)\nclass Foo(Generic[UnBounded, Bounded, Constrained]):\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n# %% [python]\n# НОВЫЙ СИНТАКСИС - Python 3.12+\nclass Foo[UnBounded, Bounded: int, Constrained: int | float]:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Constrained",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "Constrained = TypeVar(\"Constrained\", int, float)\nclass Foo(Generic[UnBounded, Bounded, Constrained]):\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:\n        self.x = x\n        self.y = y\n        self.z = z\n# %% [python]\n# НОВЫЙ СИНТАКСИС - Python 3.12+\nclass Foo[UnBounded, Bounded: int, Constrained: int | float]:\n    def __init__(self, x: UnBounded, y: Bounded, z: Constrained) -> None:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "pair",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "pair = Tuple[str, int](\"hello\", 42)\ntriple = Tuple[str, int, bool](\"world\", 100, True)\n# %% [markdown]\n# Кроме того, в рамках изменений типизации в 3.12 в Python также добавили новый краткий синтаксис псевдонимов типов!\n# %% [python]\n# СТАРЫЙ СИНТАКСИС — Python с 3.5 по 3.9\nfrom typing import NewType\nVector = NewType(\"Vector\", list[float])\n# %% [python]\n# МЕНЕЕ СТАРЫЙ СИНТАКСИС — Python с 3.10 по 3.11",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "triple",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "triple = Tuple[str, int, bool](\"world\", 100, True)\n# %% [markdown]\n# Кроме того, в рамках изменений типизации в 3.12 в Python также добавили новый краткий синтаксис псевдонимов типов!\n# %% [python]\n# СТАРЫЙ СИНТАКСИС — Python с 3.5 по 3.9\nfrom typing import NewType\nVector = NewType(\"Vector\", list[float])\n# %% [python]\n# МЕНЕЕ СТАРЫЙ СИНТАКСИС — Python с 3.10 по 3.11\nfrom typing import TypeAlias",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "Vector = NewType(\"Vector\", list[float])\n# %% [python]\n# МЕНЕЕ СТАРЫЙ СИНТАКСИС — Python с 3.10 по 3.11\nfrom typing import TypeAlias\nVector: TypeAlias = list[float]\n# %% [python]\n# НОВЫЙ СИНТАКСИС — Python 3.12+\ntype Vector = list[float]\n# %% [markdown]\n# ▍ Дополнительные ресурсы",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "f = FooBar()\nprint(f.__dict__)  # {'a': 1, 'b': 2, 'c': 3}\n# %% [python]\n# Со __slots__\nclass FooBar:\n    __slots__ = ('a', 'b', 'c')\n    def __init__(self):\n        self.a = 1\n        self.b = 2\n        self.c = 3",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "f = FooBar()\nprint(f.__dict__)  # AttributeError\nprint(f.__slots__)  # ('a', 'b', 'c')\n# %% [markdown]\n# По-прежнему ведутся споры о том, стоит ли пользоваться __slots__, поскольку они усложняют определения классов, не принося или почти не принося никаких улучшений производительности. Однако это полезный инструмент, который можно взять в свой арсенал и использовать по необходимости.\n# %% [markdown]\n# ▍ Дополнительные ресурсы\n# %% [markdown]\n# * Using Slots — Python Wiki\n# * Don’t forget about __slots__ in Python!",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "found_server",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "found_server = False  # Проверяем, найден ли сервер\nfor server in servers:\n    if server.check_availability():\n        primary_server = server\n        found_server = True  # Присваиваем флагу значение True\n        break\nif not found_server:\n    # Если сервер не найден, используем резервный сервер\n    primary_server = backup_server\n# Продолжаем исполнение с найденным сервером",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "response = get_user_input()\nif response:\n    print('You pressed:', response)\nelse:\n    print('You pressed nothing')\n# ===== Пишите так =====\nif response := get_user_input():\n    print('You pressed:', response)\nelse:\n    print('You pressed nothing')",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "display_name",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "display_name = username or full_name or first_name or \"Anonymous\"\n# %% [markdown]\n# 9.4 Объединение операторов в цепочки\n# %% [markdown]\n# Наконец, Python позволяет соединять в цепочки операторы сравнения, чтобы укоротить сравнения в интервале integer, делая их более читаемыми, чем эквивалентные булевы выражения.\n# %% [python]\n# ===== Не пишите такой код =====\nif 0 < x and x < 10:\n    print(\"x is between 0 and 10\")\n# ===== Пишите так =====",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "FIB_CACHE",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "FIB_CACHE = {}\n# С ручным кэшированием\ndef fib(n):\n    if n in FIB_CACHE:\n        return FIB_CACHE[n]\n    if n <= 2:\n        return 1\n    FIB_CACHE[n] = fib(n - 1) + fib(n - 2)\n    return FIB_CACHE[n]\nfrom functools import lru_cache",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "future",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "future = Future()\n# Задаём ему любой нужный результат\nfuture.set_result(\"Hello from the future!\")\n# Получаем результат\nprint(future.result())  # \"Hello from the future!\"\n# %% [markdown]\n# Модуль concurrent.futures языка Python даёт нам непосредственный контроль над async-операциями, как Promise в JS. Например, он позволяет прикреплять обратные вызовы, запускаемые при готовности результата (точно так же, как .then() в JS).\n# %% [python]\nfrom concurrent.futures import Future\nfuture = Future()",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "future",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "future = Future()\n# Добавляем обратные вызовы ДО или ПОСЛЕ завершения!\nfuture.add_done_callback(lambda f: print(f\"Got: {f.result()}\"))\nfuture.set_result(\"Async result\")\n# Вывод: \"Got: Async result\"\nfuture.add_done_callback(lambda f: print(f\"After: {f.result()}\"))\n# Вывод: \"After: Async result\"\n# %% [markdown]\n# Также у Python Futures есть примитивы для обработки исключений, задания таймаутов и полной остановки задач.\n# %% [python]",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "future",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "future = Future()\n# Функция фоновой задачи\ndef background_task():\n    time.sleep(2)\n    future.set_result(\"Done!\")\nthread = threading.Thread(target=background_task)\nthread.daemon = True\nthread.start()\n# Пробуем все операции управления\nprint(f\"Cancelled: {future.cancel()}\")  # Скорее всего, False, если запустилось",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "thread = threading.Thread(target=background_task)\nthread.daemon = True\nthread.start()\n# Пробуем все операции управления\nprint(f\"Cancelled: {future.cancel()}\")  # Скорее всего, False, если запустилось\ntry:\n    # Ждём не больше 0,5 секунды\n    result = future.result(timeout=0.5)\nexcept TimeoutError:\n    print(\"Timed out!\")",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "thread.daemon",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "thread.daemon = True\nthread.start()\n# Пробуем все операции управления\nprint(f\"Cancelled: {future.cancel()}\")  # Скорее всего, False, если запустилось\ntry:\n    # Ждём не больше 0,5 секунды\n    result = future.result(timeout=0.5)\nexcept TimeoutError:\n    print(\"Timed out!\")\n# Создаём future сбоя",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "err_future",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "err_future = Future()\nerr_future.set_exception(ValueError(\"Failed\"))\nprint(f\"Has error: {bool(err_future.exception())}\")\n# %% [markdown]\n# Как и в современном JS, модуль asyncio имеет собственный Future, идеально работающий с синтаксисом async/await Python:\n# %% [python]\nimport asyncio\nasync def main():\n    future = asyncio.Future()\n    # Задаём результат после задержки",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nT = TypeVar(\"T\")\nclass ProxyProperty(Generic[P, R]):\n    func: Callable[P, R]\n    instance: object\n    def __init__(self, func: Callable[P, R]) -> None:\n        self.func = func\n    def __get__(self, instance: object, _=None) -> Self:\n        self.instance = instance",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "R = TypeVar(\"R\")\nT = TypeVar(\"T\")\nclass ProxyProperty(Generic[P, R]):\n    func: Callable[P, R]\n    instance: object\n    def __init__(self, func: Callable[P, R]) -> None:\n        self.func = func\n    def __get__(self, instance: object, _=None) -> Self:\n        self.instance = instance\n        return self",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ProxyProperty(Generic[P, R]):\n    func: Callable[P, R]\n    instance: object\n    def __init__(self, func: Callable[P, R]) -> None:\n        self.func = func\n    def __get__(self, instance: object, _=None) -> Self:\n        self.instance = instance\n        return self\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "c = Container()\nprint(c.value)      # Возвращает: The value is: 5\nprint(c.value(7))   # Возвращает: The value is: 7\n# %% [markdown]\n# Всё сводится к Descriptor Protocol Python:\n# %% [markdown]\n# * Метод __get__ преобразует объект ProxyProperty в дескриптор.\n# * При выполнении доступа к c.value Python вызывает __get__, который возвращает self (экземпляр дескриптора).\n# * Метод __repr__ обрабатывает доступ к свойствам (возвращая значения по умолчанию).\n# * Метод __call__ обрабатывает вызовы методов с параметрами.",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "obj = MyClass()\n# %% [markdown]\n# Классы в Python — это не просто «схемы» для объектов. Они тоже являются объектами! А каждому объекту требуется создающий его класс. Так что же создаёт объекты-классы? Метаклассы.\n# %% [markdown]\n# По умолчанию, Python использует для создания всех классов метакласс type. Например, эти два примера кода эквивалентны друг другу:\n# %% [python]\n# Создаём объект MyClass\nclass MyClass:\n    ...\nobj = MyClass()",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "obj = MyClass()\n# Тоже создаём объект MyClass\nobj2 = type(\"MyClass\", (), {})\n# %% [markdown]\n# Чтобы разобраться, что означают эти аргументы, приведём пример, создающий класс с атрибутом x и методом say_hi, которые также являются подклассами object.\n# %% [python]\n# type(\n#     name,\n#     bases,\n#     attributes",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "obj2",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "obj2 = type(\"MyClass\", (), {})\n# %% [markdown]\n# Чтобы разобраться, что означают эти аргументы, приведём пример, создающий класс с атрибутом x и методом say_hi, которые также являются подклассами object.\n# %% [python]\n# type(\n#     name,\n#     bases,\n#     attributes\n# )\nCustomClass = type(",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "CustomClass",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "CustomClass = type(\n    'CustomClass',\n    (object,),\n    {'x': 5, 'say_hi': lambda self: 'Hello!'}\n)\nobj = CustomClass()\nprint(obj.x)  # 5\nprint(obj.say_hi())  # Hello!\n# %% [markdown]\n# По сути, метаклассы позволяют настраивать и изменять эти аргументы в процессе создания классов. Например, вот метакласс, удваивающий каждый атрибут integer для класса:",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "Tricks",
        "description": "Tricks",
        "peekOfCode": "obj = CustomClass()\nprint(obj.x)  # 5\nprint(obj.say_hi())  # Hello!\n# %% [markdown]\n# По сути, метаклассы позволяют настраивать и изменять эти аргументы в процессе создания классов. Например, вот метакласс, удваивающий каждый атрибут integer для класса:\n# %% [python]\nclass DoubleAttrMeta(type):\n    def __new__(cls, name, bases, namespace):\n        new_namespace = {}\n        for key, val in namespace.items():",
        "detail": "Tricks",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "WebBrowser",
        "description": "WebBrowser",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        self.browser = QWebEngineView()\n        self.browser.setUrl(QUrl(\"http://google.com\"))\n        self.setCentralWidget(self.browser)\n        navtb = QToolBar()\n        self.addToolBar(navtb)\n        back_btn = QAction(\"Назад\", self)\n        back_btn.triggered.connect(self.browser.back)",
        "detail": "WebBrowser",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "WebBrowser",
        "description": "WebBrowser",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\napp.exec()",
        "detail": "WebBrowser",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "WebBrowser",
        "description": "WebBrowser",
        "peekOfCode": "window = MainWindow()\napp.exec()",
        "detail": "WebBrowser",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "WebBrowser1",
        "description": "WebBrowser1",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        self.browser = QWebEngineView()\n        self.browser.setUrl(QUrl(\"http://google.com\"))\n        self.setCentralWidget(self.browser)\n        navtb = QToolBar()\n        self.addToolBar(navtb)\n        back_btn = QAction(\"Назад\", self)\n        back_btn.triggered.connect(self.browser.back)",
        "detail": "WebBrowser1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "WebBrowser1",
        "description": "WebBrowser1",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\napp.exec()",
        "detail": "WebBrowser1",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "WebBrowser1",
        "description": "WebBrowser1",
        "peekOfCode": "window = MainWindow()\napp.exec()",
        "detail": "WebBrowser1",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  scan_wifi():\n\tprint(\"Сканирование доступных WiFi сетей\\n\")\n\tif os.name == \"nt\":\t# Windows\n\t\tresult = subprocess.run([\"netsh\", \"wlan\", \"show\", \"networks\" \"mode=bssid\"], capture_output=True, text=True)\n\telse: # Linux, Mac\n    # result = subprocess.run([\"sudo\", \"iwlist\", \"scan\"], capture_output=True, text=True)\n\t\tresult = subprocess.run([\"nmcli\", \"-f\", \"SSID,SIGNAL,CHAN\", \"dev\", \"wifi\"], capture_output=True, text=True)\n\tprint(result.stdout)\nscan_wifi()"
        },
        "kind": 2,
        "importPath": "wifi_scan",
        "description": "wifi_scan",
        "peekOfCode": "def  scan_wifi():\n\tprint(\"Сканирование доступных WiFi сетей\\n\")\n\tif os.name == \"nt\":\t# Windows\n\t\tresult = subprocess.run([\"netsh\", \"wlan\", \"show\", \"networks\" \"mode=bssid\"], capture_output=True, text=True)\n\telse: # Linux, Mac\n    # result = subprocess.run([\"sudo\", \"iwlist\", \"scan\"], capture_output=True, text=True)\n\t\tresult = subprocess.run([\"nmcli\", \"-f\", \"SSID,SIGNAL,CHAN\", \"dev\", \"wifi\"], capture_output=True, text=True)\n\tprint(result.stdout)\nscan_wifi()",
        "detail": "wifi_scan",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "wifi_scan",
        "description": "wifi_scan",
        "peekOfCode": "\t\tresult = subprocess.run([\"netsh\", \"wlan\", \"show\", \"networks\" \"mode=bssid\"], capture_output=True, text=True)\n\telse: # Linux, Mac\n    # result = subprocess.run([\"sudo\", \"iwlist\", \"scan\"], capture_output=True, text=True)\n\t\tresult = subprocess.run([\"nmcli\", \"-f\", \"SSID,SIGNAL,CHAN\", \"dev\", \"wifi\"], capture_output=True, text=True)\n\tprint(result.stdout)\nscan_wifi()",
        "detail": "wifi_scan",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "wifi_scan",
        "description": "wifi_scan",
        "peekOfCode": "\t\tresult = subprocess.run([\"nmcli\", \"-f\", \"SSID,SIGNAL,CHAN\", \"dev\", \"wifi\"], capture_output=True, text=True)\n\tprint(result.stdout)\nscan_wifi()",
        "detail": "wifi_scan",
        "documentation": {}
    },
    {
        "label": "desktop",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "desktop = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\n# Задаём путь, где будет создан ярлык\ntarget_path = os.path.join(desktop, \"Блокнот.lnk\")\n# Создаём объект для работы с ярлыками через Windows Script Host\nshell = win32com.client.Dispatch(\"WScript.Shell\")\n# Создаем ярлык\ntarget_shortcut = shell.CreateShortcut(target_path)\n# Указываем путь к исполняемому файлу блокнота\ntarget_shortcut.TargetPath = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n# Сохраняем ярлык",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "target_path",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "target_path = os.path.join(desktop, \"Блокнот.lnk\")\n# Создаём объект для работы с ярлыками через Windows Script Host\nshell = win32com.client.Dispatch(\"WScript.Shell\")\n# Создаем ярлык\ntarget_shortcut = shell.CreateShortcut(target_path)\n# Указываем путь к исполняемому файлу блокнота\ntarget_shortcut.TargetPath = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n# Сохраняем ярлык\ntarget_shortcut.Save()\n# 🔍 Получение списка установленных программ:",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "shell",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "shell = win32com.client.Dispatch(\"WScript.Shell\")\n# Создаем ярлык\ntarget_shortcut = shell.CreateShortcut(target_path)\n# Указываем путь к исполняемому файлу блокнота\ntarget_shortcut.TargetPath = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n# Сохраняем ярлык\ntarget_shortcut.Save()\n# 🔍 Получение списка установленных программ:\n# Подключаемся к WMI (Windows Management Instrumentation), чтобы получать системную информацию\nwmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "target_shortcut",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "target_shortcut = shell.CreateShortcut(target_path)\n# Указываем путь к исполняемому файлу блокнота\ntarget_shortcut.TargetPath = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n# Сохраняем ярлык\ntarget_shortcut.Save()\n# 🔍 Получение списка установленных программ:\n# Подключаемся к WMI (Windows Management Instrumentation), чтобы получать системную информацию\nwmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем WMI-запрос для получения списка установленных программ\nprograms = wmi.ExecQuery(\"SELECT * FROM Win32_Product\")",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "target_shortcut.TargetPath",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "target_shortcut.TargetPath = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n# Сохраняем ярлык\ntarget_shortcut.Save()\n# 🔍 Получение списка установленных программ:\n# Подключаемся к WMI (Windows Management Instrumentation), чтобы получать системную информацию\nwmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем WMI-запрос для получения списка установленных программ\nprograms = wmi.ExecQuery(\"SELECT * FROM Win32_Product\")\n# Перебираем полученные объекты и выводим названия установленных программ\nfor program in programs:",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "wmi",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "wmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем WMI-запрос для получения списка установленных программ\nprograms = wmi.ExecQuery(\"SELECT * FROM Win32_Product\")\n# Перебираем полученные объекты и выводим названия установленных программ\nfor program in programs:\n    print(program.Name)\n# ⚡️ Запуск программы от имени администратора:\n# Создаём объект Shell.Application для управления оболочкой Windows\nshell = win32com.client.Dispatch(\"Shell.Application\")\n# Запускаем Блокнот (notepad.exe) с правами администратора",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "programs",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "programs = wmi.ExecQuery(\"SELECT * FROM Win32_Product\")\n# Перебираем полученные объекты и выводим названия установленных программ\nfor program in programs:\n    print(program.Name)\n# ⚡️ Запуск программы от имени администратора:\n# Создаём объект Shell.Application для управления оболочкой Windows\nshell = win32com.client.Dispatch(\"Shell.Application\")\n# Запускаем Блокнот (notepad.exe) с правами администратора\n# Параметры ShellExecute:\n# 1. \"notepad.exe\" – исполняемый файл",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "shell",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "shell = win32com.client.Dispatch(\"Shell.Application\")\n# Запускаем Блокнот (notepad.exe) с правами администратора\n# Параметры ShellExecute:\n# 1. \"notepad.exe\" – исполняемый файл\n# 2. \"\" – аргументы командной строки (здесь пустая строка)\n# 3. \"\" – рабочая директория (здесь не задана)\n# 4. \"runas\" – запуск от имени администратора\n# 5. 1 – окно открывается в нормальном режиме\nshell.ShellExecute(\"notepad.exe\", \"\", \"\", \"runas\", 1)\n# 🌅 Изменение обоев рабочего стола:",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "path = \"C:\\\\Path\\\\To\\\\Wallpaper.jpg\"\n# Устанавливаем изображение в качестве обоев рабочего стола с помощью SystemParametersInfoW\n# Параметры:\n# 1. win32con.SPI_SETDESKWALLPAPER – указывает на смену обоев рабочего стола\n# 2. 0 – резервный параметр (не используется)\n# 3. path – путь к изображению\n# 4. 3 – обновление параметров пользователя (SPIF_UPDATEINIFILE | SPIF_SENDCHANGE)\nctypes.windll.user32.SystemParametersInfoW(win32con.SPI_SETDESKWALLPAPER, 0, path, 3)\n# 👥 Получение списка пользователей системы:\nserver = (",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "server = (\n    None  # Указываем, что работаем с локальным компьютером (можно указать имя сервера)\n)\nlevel = 0  # Уровень детализации информации о пользователях\n# Получаем список пользователей на локальном компьютере\n# Параметры:\n# 1. server – целевой сервер (None означает локальный)\n# 2. level – уровень детализации (0 возвращает только имена пользователей)\n# 3. win32netcon.FILTER_NORMAL_ACCOUNT – фильтр, указывающий, что нужны только обычные учетные записи\nusers, _, _ = win32net.NetUserEnum(server, level, win32netcon.FILTER_NORMAL_ACCOUNT)",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "level = 0  # Уровень детализации информации о пользователях\n# Получаем список пользователей на локальном компьютере\n# Параметры:\n# 1. server – целевой сервер (None означает локальный)\n# 2. level – уровень детализации (0 возвращает только имена пользователей)\n# 3. win32netcon.FILTER_NORMAL_ACCOUNT – фильтр, указывающий, что нужны только обычные учетные записи\nusers, _, _ = win32net.NetUserEnum(server, level, win32netcon.FILTER_NORMAL_ACCOUNT)\n# Перебираем полученный список пользователей и выводим их имена\nfor user in users:\n    print(user[\"name\"])",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "wmi",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "wmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем WMI-запрос для получения списка сетевых адаптеров\n# Фильтруем только те адаптеры, у которых есть NetConnectionID (т.е. они активны)\nadapters = wmi.ExecQuery(\n    \"SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionID IS NOT NULL\"\n)\n# Перебираем найденные сетевые адаптеры и выводим их имя подключения и MAC-адрес\nfor adapter in adapters:\n    print(f\"{adapter.NetConnectionID} - {adapter.MACAddress}\")\n# 📁 Определение размера свободного места на диске:",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "adapters",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "adapters = wmi.ExecQuery(\n    \"SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionID IS NOT NULL\"\n)\n# Перебираем найденные сетевые адаптеры и выводим их имя подключения и MAC-адрес\nfor adapter in adapters:\n    print(f\"{adapter.NetConnectionID} - {adapter.MACAddress}\")\n# 📁 Определение размера свободного места на диске:\n_, total, free = win32api.GetDiskFreeSpaceEx(\"C:\\\\\")\nprint(f\"Свободное место: {free // (1024**3)} ГБ из {total // (1024**3)} ГБ\")\n# 🖥 Получение разрешения экрана:",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "width = win32api.GetSystemMetrics(0)\n# Получаем высоту экрана в пикселях (индекс 1)\nheight = win32api.GetSystemMetrics(1)\n# Выводим разрешение экрана в формате \"ширина x высота\"\nprint(f\"Разрешение экрана: {width}x{height}\")\n# 🖥 Запрос информации о процессоре:\n# Подключаемся к WMI для доступа к системной информации\nwmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем запрос к WMI для получения данных о процессоре",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "height = win32api.GetSystemMetrics(1)\n# Выводим разрешение экрана в формате \"ширина x высота\"\nprint(f\"Разрешение экрана: {width}x{height}\")\n# 🖥 Запрос информации о процессоре:\n# Подключаемся к WMI для доступа к системной информации\nwmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем запрос к WMI для получения данных о процессоре\ncpu_info = wmi.ExecQuery(\"SELECT * FROM Win32_Processor\")\n# Перебираем все процессоры (обычно один на систему)",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "wmi",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "wmi = win32com.client.GetObject(\"winmgmts:\\\\\\\\.\\\\root\\\\CIMV2\")\n# Выполняем запрос к WMI для получения данных о процессоре\ncpu_info = wmi.ExecQuery(\"SELECT * FROM Win32_Processor\")\n# Перебираем все процессоры (обычно один на систему)\nfor cpu in cpu_info:\n    # Выводим название процессора, число ядер и максимальную частоту\n    print(\n        f\"Процессор: {cpu.Name}, Ядер: {cpu.NumberOfCores}, Частота: {cpu.MaxClockSpeed} MHz\"\n    )",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "cpu_info",
        "kind": 5,
        "importPath": "WinScripts",
        "description": "WinScripts",
        "peekOfCode": "cpu_info = wmi.ExecQuery(\"SELECT * FROM Win32_Processor\")\n# Перебираем все процессоры (обычно один на систему)\nfor cpu in cpu_info:\n    # Выводим название процессора, число ядер и максимальную частоту\n    print(\n        f\"Процессор: {cpu.Name}, Ядер: {cpu.NumberOfCores}, Частота: {cpu.MaxClockSpeed} MHz\"\n    )",
        "detail": "WinScripts",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "WMI",
        "description": "WMI",
        "peekOfCode": "c = wmi.WMI()\n# Получаем информацию о системе\nsystem_info = c.Win32_ComputerSystem()[0]\n# Выводим полученные данные\nprint(f\"Производитель: {system_info.Manufacturer}\")\nprint(f\"Модель: {system_info.Model}\")\nprint(f\"Имя компьютера: {system_info.Name}\")\nprint(f\"Количество процессоров: {system_info.NumberOfProcessors}\")\nprint(f\"Тип системы: {system_info.SystemType}\")\nprint(f\"Физическая память: {int(system_info.TotalPhysicalMemory) // 1024 // 1024 // 1024} ГБ\")",
        "detail": "WMI",
        "documentation": {}
    },
    {
        "label": "system_info",
        "kind": 5,
        "importPath": "WMI",
        "description": "WMI",
        "peekOfCode": "system_info = c.Win32_ComputerSystem()[0]\n# Выводим полученные данные\nprint(f\"Производитель: {system_info.Manufacturer}\")\nprint(f\"Модель: {system_info.Model}\")\nprint(f\"Имя компьютера: {system_info.Name}\")\nprint(f\"Количество процессоров: {system_info.NumberOfProcessors}\")\nprint(f\"Тип системы: {system_info.SystemType}\")\nprint(f\"Физическая память: {int(system_info.TotalPhysicalMemory) // 1024 // 1024 // 1024} ГБ\")",
        "detail": "WMI",
        "documentation": {}
    },
    {
        "label": "shell",
        "kind": 5,
        "importPath": "Анимация текста",
        "description": "Анимация текста",
        "peekOfCode": "shell = Dispatch(\"WScript.Shell\")\n# Задаём строку для \"печати\"\ntext = \"Привет!\"\nfor ch in text:\n    # Эмулируем нажатие клавиши для текущего символа\n    shell.SendKeys(ch)\n    # Задержка 0.1 секунды между вводом символов для эффекта анимации\n    time.sleep(0.1)\n# ⌨️ Вариант 3 - использование библиотеки keyboard\n# Аналогично pywin32, позволяет \"печатать\" текст в любом месте. Требует установки библиотеки keyboard и является кроссплатформенным (работает на Windows, Linux и macOS).",
        "detail": "Анимация текста",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Анимация текста",
        "description": "Анимация текста",
        "peekOfCode": "text = \"Привет!\"\nfor ch in text:\n    # Эмулируем нажатие клавиши для текущего символа\n    shell.SendKeys(ch)\n    # Задержка 0.1 секунды между вводом символов для эффекта анимации\n    time.sleep(0.1)\n# ⌨️ Вариант 3 - использование библиотеки keyboard\n# Аналогично pywin32, позволяет \"печатать\" текст в любом месте. Требует установки библиотеки keyboard и является кроссплатформенным (работает на Windows, Linux и macOS).\n# ➡️Установка библиотеки: pip install keyboard\nimport keyboard",
        "detail": "Анимация текста",
        "documentation": {}
    },
    {
        "label": "validate_time",
        "kind": 2,
        "importPath": "Будильник",
        "description": "Будильник",
        "peekOfCode": "def validate_time(alarm_time: str)-> str|None:\n    try:\n        return datetime.strptime(alarm_time, '%H:%M:%S').time()\n    except ValueError:\n        return None\nwhile True:\n    alarm_time_str:str = input('Введите время в следущем формате: ЧЧ:ММ:СС')\n    alarm_time:time = validate_time(alarm_time_str)\n    print('Неверный формат, попробуйте еще раз.' if alarm_time == None else f'Будильник установлен на время {alarm_time}...')\nwhile datetime.now().time() < alarm_time:",
        "detail": "Будильник",
        "documentation": {}
    },
    {
        "label": "schedule_shutdown",
        "kind": 2,
        "importPath": "Выключение компьютера по расписанию",
        "description": "Выключение компьютера по расписанию",
        "peekOfCode": "def schedule_shutdown(minutes) -> None:\n    try:\n        # Переводим минуты в секунды\n        seconds: int = minutes * 60\n        print(f\"Компьютер будет выключен через {minutes} минут.\")\n        # Выполнение команды shutdown для выключения через заданное количество секунд\n        subprocess.run([\"shutdown\", \"/s\", \"/t\", str(seconds)], check=True)\n    except subprocess.CalledProcessError as e:\n        # Обработка ошибок, если команда не выполнена\n        print(f\"Ошибка при попытке выключить компьютер: {e}\")",
        "detail": "Выключение компьютера по расписанию",
        "documentation": {}
    },
    {
        "label": "get_country_info",
        "kind": 2,
        "importPath": "Инфо по стране",
        "description": "Инфо по стране",
        "peekOfCode": "def get_country_info(country_code):\n    # Формируем URL для API с использованием кода страны\n    url = f\"https://restcountries.com/v3.1/alpha/{country_code}\"\n    response = requests.get(url)  # Выполняем GET-запрос к API\n    # Проверяем, успешен ли запрос (код 200)\n    if response.status_code == 200:\n        # Преобразуем ответ в формат JSON\n        country_data = response.json()\n        # Проверяем, что данные - это список и он не пуст\n        if isinstance(country_data, list) and len(country_data) > 0:",
        "detail": "Инфо по стране",
        "documentation": {}
    },
    {
        "label": "is_registered",
        "kind": 2,
        "importPath": "Информация о домене",
        "description": "Информация о домене",
        "peekOfCode": "def is_registered(domain_name):\n  try:\n    w = whois.query(domain_name)\n  except Exception:\n    return False\n  else:\n    return bool(w)\ndomain_name = 'italika.ru'\nif is_registered(domain_name):\n  whois_info = whois.query(domain_name)",
        "detail": "Информация о домене",
        "documentation": {}
    },
    {
        "label": "domain_name",
        "kind": 5,
        "importPath": "Информация о домене",
        "description": "Информация о домене",
        "peekOfCode": "domain_name = 'italika.ru'\nif is_registered(domain_name):\n  whois_info = whois.query(domain_name)\n  print(whois_info)\n  # print(whois_info.registrar)\n  # print(whois_info.whois_server)\n  # print(whois_info.org)\nelse:\n  print('Домен не зарегистрирован.')",
        "detail": "Информация о домене",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "kind": 2,
        "importPath": "Напоминалка",
        "description": "Напоминалка",
        "peekOfCode": "def show_notification(message) -> None:\n    notification.notify(title=\"Напоминание\", message=message, timeout=10)  # type: ignore\ndef add_reminder(text, reminder_time):\n    schedule.every().day.at(reminder_time).do(show_notification, message=text)\n    print(f\"Напоминание добавлено на {reminder_time}: {text}\")\nif __name__ == \"__main__\":\n    while True:\n        text: str = input(\"Введите текст напоминания: \")\n        reminder_time: str = input(\"Введите время (формат ЧЧ:ММ): \")\n        add_reminder(text, reminder_time)",
        "detail": "Напоминалка",
        "documentation": {}
    },
    {
        "label": "add_reminder",
        "kind": 2,
        "importPath": "Напоминалка",
        "description": "Напоминалка",
        "peekOfCode": "def add_reminder(text, reminder_time):\n    schedule.every().day.at(reminder_time).do(show_notification, message=text)\n    print(f\"Напоминание добавлено на {reminder_time}: {text}\")\nif __name__ == \"__main__\":\n    while True:\n        text: str = input(\"Введите текст напоминания: \")\n        reminder_time: str = input(\"Введите время (формат ЧЧ:ММ): \")\n        add_reminder(text, reminder_time)\n        print(\"Ожидание напоминания...\")\n        while True:",
        "detail": "Напоминалка",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "def translate():\n    for language, suffix in languages.items():\n        if comboTwo.get() == language:\n            text = t_input.get('1.0', END)\n            translation = translator.translate(text, dest=suffix)\n            t_output.delete('1.0', END)\n            t_output.insert('1.0', translation.text)\nroot = Tk()\nroot.geometry('500x350')\nroot.title('Переводчик')",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "root = Tk()\nroot.geometry('500x350')\nroot.title('Переводчик')\nroot.resizable(width=False, height=False)\nroot['bg'] = 'black'\ntranslator = Translator()\nlanguages = {'Русский': 'ru', 'Английский': 'en'}\nheader_frame = Frame(root, bg='black')\nheader_frame.pack(fill=X)\nheader_frame.grid_columnconfigure(0, weight=1)",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "root['bg']",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "root['bg'] = 'black'\ntranslator = Translator()\nlanguages = {'Русский': 'ru', 'Английский': 'en'}\nheader_frame = Frame(root, bg='black')\nheader_frame.pack(fill=X)\nheader_frame.grid_columnconfigure(0, weight=1)\nheader_frame.grid_columnconfigure(1, weight=1)\nheader_frame.grid_columnconfigure(2, weight=1)\ncomboOne = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboOne.current(0)",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "translator",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "translator = Translator()\nlanguages = {'Русский': 'ru', 'Английский': 'en'}\nheader_frame = Frame(root, bg='black')\nheader_frame.pack(fill=X)\nheader_frame.grid_columnconfigure(0, weight=1)\nheader_frame.grid_columnconfigure(1, weight=1)\nheader_frame.grid_columnconfigure(2, weight=1)\ncomboOne = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboOne.current(0)\ncomboOne.grid(row=0, column=0)",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "languages = {'Русский': 'ru', 'Английский': 'en'}\nheader_frame = Frame(root, bg='black')\nheader_frame.pack(fill=X)\nheader_frame.grid_columnconfigure(0, weight=1)\nheader_frame.grid_columnconfigure(1, weight=1)\nheader_frame.grid_columnconfigure(2, weight=1)\ncomboOne = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboOne.current(0)\ncomboOne.grid(row=0, column=0)\nlabel = Label(header_frame, fg='white', bg='black', font='Arial 17 bold', text='->')",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "header_frame",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "header_frame = Frame(root, bg='black')\nheader_frame.pack(fill=X)\nheader_frame.grid_columnconfigure(0, weight=1)\nheader_frame.grid_columnconfigure(1, weight=1)\nheader_frame.grid_columnconfigure(2, weight=1)\ncomboOne = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboOne.current(0)\ncomboOne.grid(row=0, column=0)\nlabel = Label(header_frame, fg='white', bg='black', font='Arial 17 bold', text='->')\nlabel.grid(row=0,column=1)",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "comboOne",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "comboOne = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboOne.current(0)\ncomboOne.grid(row=0, column=0)\nlabel = Label(header_frame, fg='white', bg='black', font='Arial 17 bold', text='->')\nlabel.grid(row=0,column=1)\ncomboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboTwo.current(1)\ncomboTwo.grid(row=0,column=2)\nt_input = Text(root, width=35, height=5, font='Arial 12 bold')\nt_input.pack(pady=20)",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "label = Label(header_frame, fg='white', bg='black', font='Arial 17 bold', text='->')\nlabel.grid(row=0,column=1)\ncomboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboTwo.current(1)\ncomboTwo.grid(row=0,column=2)\nt_input = Text(root, width=35, height=5, font='Arial 12 bold')\nt_input.pack(pady=20)\nbtn = Button(root, width = 45, text='Translate', command=translate)\nbtn.pack()\nt_output = Text(root, width=35, height=5, font='Arial 12 bold')",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "comboTwo",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='readonly')\ncomboTwo.current(1)\ncomboTwo.grid(row=0,column=2)\nt_input = Text(root, width=35, height=5, font='Arial 12 bold')\nt_input.pack(pady=20)\nbtn = Button(root, width = 45, text='Translate', command=translate)\nbtn.pack()\nt_output = Text(root, width=35, height=5, font='Arial 12 bold')\nt_output.pack(pady=20)\nroot.mainloop()",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "t_input",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "t_input = Text(root, width=35, height=5, font='Arial 12 bold')\nt_input.pack(pady=20)\nbtn = Button(root, width = 45, text='Translate', command=translate)\nbtn.pack()\nt_output = Text(root, width=35, height=5, font='Arial 12 bold')\nt_output.pack(pady=20)\nroot.mainloop()",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "btn = Button(root, width = 45, text='Translate', command=translate)\nbtn.pack()\nt_output = Text(root, width=35, height=5, font='Arial 12 bold')\nt_output.pack(pady=20)\nroot.mainloop()",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "t_output",
        "kind": 5,
        "importPath": "Переводчик",
        "description": "Переводчик",
        "peekOfCode": "t_output = Text(root, width=35, height=5, font='Arial 12 bold')\nt_output.pack(pady=20)\nroot.mainloop()",
        "detail": "Переводчик",
        "documentation": {}
    },
    {
        "label": "Ui_MainWindow",
        "kind": 6,
        "importPath": "Подсчет слов",
        "description": "Подсчет слов",
        "peekOfCode": "class Ui_MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(Ui_MainWindow, self).__init__()\n        self.setupUi(self)\n        self.btnCount.clicked.connect(self.symbol_count)\n        self.btnCount.clicked.connect(self.word_count)\n        self.btnCount.clicked.connect(self.number_count)\n    def symbol_count(self):\n        text = self.textEdit.toPlainText()\n        res = []",
        "detail": "Подсчет слов",
        "documentation": {}
    },
    {
        "label": "unordered_list",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "unordered_list = [6, 6, 8, 7, 5, 1, 4, 5, 4, 7]\nduplicate_elements = {}\nfor item in unordered_list:\n    if item in duplicate_elements:\n        duplicate_elements[item] += 1\n    else:\n        duplicate_elements[item] = 1\nprint(duplicate_elements)\n# Вывод: {6: 2, 8: 1, 7: 2, 5: 2, 1: 1, 4: 2}\n'''Поиск одинаковых элементов в списке с помощью модуля collections'''",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "duplicate_elements",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "duplicate_elements = {}\nfor item in unordered_list:\n    if item in duplicate_elements:\n        duplicate_elements[item] += 1\n    else:\n        duplicate_elements[item] = 1\nprint(duplicate_elements)\n# Вывод: {6: 2, 8: 1, 7: 2, 5: 2, 1: 1, 4: 2}\n'''Поиск одинаковых элементов в списке с помощью модуля collections'''\nimport collections",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "unordered_list",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "unordered_list = [6, 6, 8, 7, 5, 1, 4, 5, 4, 7]\ncount_frequency = collections.Counter(unordered_list)\nprint(dict(count_frequency))\n# Вывод: {6: 2, 8: 1, 7: 2, 5: 2, 1: 1, 4: 2}\n'''Поиск одинаковых элементов в списке с помощью функции filter()'''\nunordered_list = [6, 6, 8, 7, 5, 1, 4, 5, 4, 7]\ncount_frequency = filter(lambda x: unordered_list.count(x) > 1, unordered_list)\ncount_frequency = list(set(count_frequency))\nprint(count_frequency)\n# Вывод: [4, 5, 6, 7]",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "count_frequency",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "count_frequency = collections.Counter(unordered_list)\nprint(dict(count_frequency))\n# Вывод: {6: 2, 8: 1, 7: 2, 5: 2, 1: 1, 4: 2}\n'''Поиск одинаковых элементов в списке с помощью функции filter()'''\nunordered_list = [6, 6, 8, 7, 5, 1, 4, 5, 4, 7]\ncount_frequency = filter(lambda x: unordered_list.count(x) > 1, unordered_list)\ncount_frequency = list(set(count_frequency))\nprint(count_frequency)\n# Вывод: [4, 5, 6, 7]",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "unordered_list",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "unordered_list = [6, 6, 8, 7, 5, 1, 4, 5, 4, 7]\ncount_frequency = filter(lambda x: unordered_list.count(x) > 1, unordered_list)\ncount_frequency = list(set(count_frequency))\nprint(count_frequency)\n# Вывод: [4, 5, 6, 7]",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "count_frequency",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "count_frequency = filter(lambda x: unordered_list.count(x) > 1, unordered_list)\ncount_frequency = list(set(count_frequency))\nprint(count_frequency)\n# Вывод: [4, 5, 6, 7]",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "count_frequency",
        "kind": 5,
        "importPath": "Поиск одинаковых элементов в списке",
        "description": "Поиск одинаковых элементов в списке",
        "peekOfCode": "count_frequency = list(set(count_frequency))\nprint(count_frequency)\n# Вывод: [4, 5, 6, 7]",
        "detail": "Поиск одинаковых элементов в списке",
        "documentation": {}
    },
    {
        "label": "weather_check",
        "kind": 2,
        "importPath": "Прогноз погоды",
        "description": "Прогноз погоды",
        "peekOfCode": "def weather_check(city: str):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36'\n    }\n    res = requests.get(\n        f'https://www.qooqle.com/search?q={city}&oq={city}',\n        # f'https://world-weather.ru/pogoda/russia/butovo/',\n        headers = headers\n    )\n    soup = BeautifulSoup(res.text, 'html.parser')",
        "detail": "Прогноз погоды",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Ситуации. в которых полезно использовать словарь",
        "description": "Ситуации. в которых полезно использовать словарь",
        "peekOfCode": "s = input()\nd = {}\nfor i in s:\n    if i.isalpha():\n        # d[i] = 1 if i not in d else d[i]+1\n        d[i] = d.get(i, 0) + 1\nfor i in sorted(d):\n    print(i, d[i])",
        "detail": "Ситуации. в которых полезно использовать словарь",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Ситуации. в которых полезно использовать словарь",
        "description": "Ситуации. в которых полезно использовать словарь",
        "peekOfCode": "d = {}\nfor i in s:\n    if i.isalpha():\n        # d[i] = 1 if i not in d else d[i]+1\n        d[i] = d.get(i, 0) + 1\nfor i in sorted(d):\n    print(i, d[i])",
        "detail": "Ситуации. в которых полезно использовать словарь",
        "documentation": {}
    },
    {
        "label": "sort_photos_by_date",
        "kind": 2,
        "importPath": "Сортировка файлов по дате",
        "description": "Сортировка файлов по дате",
        "peekOfCode": "def sort_photos_by_date(photo_folder):\n    # Преобразуем строку пути к папке в объект Path\n    folder_path = Path(photo_folder)\n    # Проходимся по всем элементам в указанной папке\n    for file_path in folder_path.iterdir():\n        # Проверяем, является ли элемент файлом и имеет ли он нужное расширение\n        if file_path.is_file() and file_path.suffix.lower() in {'.png', '.jpg', '.jpeg'}:\n            # Получаем время последнего изменения файла\n            creation_time = file_path.stat().st_mtime\n            # Преобразуем время в формат даты 'ГГГГ-ММ-ДД'",
        "detail": "Сортировка файлов по дате",
        "documentation": {}
    },
    {
        "label": "photo_folder",
        "kind": 5,
        "importPath": "Сортировка файлов по дате",
        "description": "Сортировка файлов по дате",
        "peekOfCode": "photo_folder = 'images2'\n# Вызываем функцию для сортировки фотографий по дате\nsort_photos_by_date(photo_folder)",
        "detail": "Сортировка файлов по дате",
        "documentation": {}
    },
    {
        "label": "ToplevelWindow",
        "kind": 6,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "class ToplevelWindow(ctk.CTkToplevel):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"300x80\")\n        self.title('Добаить задачу')\n        self.task_text = ctk.CTkEntry(self)\n        self.task_text.pack(pady=5)\n        ctk.CTkButton(wnd, text='Добавить',font=ctk.CTkFont('Arial',13,'bold'),command=lambda: add(task_text.get())).pack()\ndef add_task():\n    wnd = ToplevelWindow()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "def add(task):\n    f = ctk.CTkFrame(root)\n    ctk.CTkCheckBox(f, text=task).pack(anchor=NW, side=LEFT)\n    ctk.CTkButton(f, image=img_del,text='',width=30,command=lambda: f.pack_forget()).pack(anchor=NW,side=LEFT,padx=10)\n    f.pack(anchor=NW,padx=5,pady=5)\nclass ToplevelWindow(ctk.CTkToplevel):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.geometry(\"300x80\")\n        self.title('Добаить задачу')",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "def add_task():\n    wnd = ToplevelWindow()\nroot = ctk.CTk()\nroot.title = 'Планировщик задач'\nroot.geometry('700x300')\nimg_del = ImageTk.PhotoImage(file='delete.bmp')\nbtn_add_task = ctk.CTkButton(root, text='Добавить задачу', font=ctk.CTkFont('Arial', 13, 'bold'), command=add_task)\nbtn_add_task.pack(anchor='s', side='bottom', pady=5)\nroot.mainloop()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "root = ctk.CTk()\nroot.title = 'Планировщик задач'\nroot.geometry('700x300')\nimg_del = ImageTk.PhotoImage(file='delete.bmp')\nbtn_add_task = ctk.CTkButton(root, text='Добавить задачу', font=ctk.CTkFont('Arial', 13, 'bold'), command=add_task)\nbtn_add_task.pack(anchor='s', side='bottom', pady=5)\nroot.mainloop()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "root.title",
        "kind": 5,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "root.title = 'Планировщик задач'\nroot.geometry('700x300')\nimg_del = ImageTk.PhotoImage(file='delete.bmp')\nbtn_add_task = ctk.CTkButton(root, text='Добавить задачу', font=ctk.CTkFont('Arial', 13, 'bold'), command=add_task)\nbtn_add_task.pack(anchor='s', side='bottom', pady=5)\nroot.mainloop()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "img_del",
        "kind": 5,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "img_del = ImageTk.PhotoImage(file='delete.bmp')\nbtn_add_task = ctk.CTkButton(root, text='Добавить задачу', font=ctk.CTkFont('Arial', 13, 'bold'), command=add_task)\nbtn_add_task.pack(anchor='s', side='bottom', pady=5)\nroot.mainloop()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "btn_add_task",
        "kind": 5,
        "importPath": "Список дел",
        "description": "Список дел",
        "peekOfCode": "btn_add_task = ctk.CTkButton(root, text='Добавить задачу', font=ctk.CTkFont('Arial', 13, 'bold'), command=add_task)\nbtn_add_task.pack(anchor='s', side='bottom', pady=5)\nroot.mainloop()",
        "detail": "Список дел",
        "documentation": {}
    },
    {
        "label": "f_sum_digits",
        "kind": 2,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "def f_sum_digits(n):\n    return 0 if n == 0 else int(n % 10) + f_sum_digits(int(n / 10))\nnumber = 11223344\nprint(f\"Сумма цифр числа: {f_sum_digits(number)}\")\n# Вывод: Сумма цифр числа: 20\n# MARK: Использование map\n'''Использование map'''\nnumber = 11223344\na = str(number)\nprint(f\"Сумма цифр числа: {sum(map(int, a))}\")",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "number = 11223344\nsum_digits = 0\nwhile number > 0:\n    sum_digits += number % 10\n    number //= 10\nprint(f\"Сумма цифр числа: {sum_digits}\")\n# Вывод: Сумма цифр числа: 20\n# MARK: Использование рекурсии\n'''Использование рекурсии'''\ndef f_sum_digits(n):",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "sum_digits",
        "kind": 5,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "sum_digits = 0\nwhile number > 0:\n    sum_digits += number % 10\n    number //= 10\nprint(f\"Сумма цифр числа: {sum_digits}\")\n# Вывод: Сумма цифр числа: 20\n# MARK: Использование рекурсии\n'''Использование рекурсии'''\ndef f_sum_digits(n):\n    return 0 if n == 0 else int(n % 10) + f_sum_digits(int(n / 10))",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "number = 11223344\nprint(f\"Сумма цифр числа: {f_sum_digits(number)}\")\n# Вывод: Сумма цифр числа: 20\n# MARK: Использование map\n'''Использование map'''\nnumber = 11223344\na = str(number)\nprint(f\"Сумма цифр числа: {sum(map(int, a))}\")",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "number = 11223344\na = str(number)\nprint(f\"Сумма цифр числа: {sum(map(int, a))}\")",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Сумма цифр числа",
        "description": "Сумма цифр числа",
        "peekOfCode": "a = str(number)\nprint(f\"Сумма цифр числа: {sum(map(int, a))}\")",
        "detail": "Сумма цифр числа",
        "documentation": {}
    },
    {
        "label": "sound",
        "kind": 2,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "def sound():\n    btn_start.pack_forget()\n    btn_stop.pack()\n    playsound(file, False)\ndef start():\n    duration = int(seconds.get())\n    while duration:\n        m, s = divmod(int(duration), 60)\n        min_sec_format = '{:02d}:{:02d}'.format(m, s)\n        count_digit['text'] = min_sec_format",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "def start():\n    duration = int(seconds.get())\n    while duration:\n        m, s = divmod(int(duration), 60)\n        min_sec_format = '{:02d}:{:02d}'.format(m, s)\n        count_digit['text'] = min_sec_format\n        count_digit.update()\n        tim.sleep(1)\n        duration -= 1\n    sound()",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 2,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "def stop():\n    btn_stop.pack_forget()\n    btn_start.pack()\n    playsound(file, True)\nfile = '1.mp3'\nroot = Tk()\nroot.title('Таймер')\nroot.geometry('150x150')\nroot.resizeble(False, False)\ncount_digit = Label(root, text='0', font='Arial 15 bold')",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "file = '1.mp3'\nroot = Tk()\nroot.title('Таймер')\nroot.geometry('150x150')\nroot.resizeble(False, False)\ncount_digit = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()\nseconds = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack(pady=10)\nbtn_start = Button(root, text='Старт', font='Arial 15 bold', command=start)",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "root = Tk()\nroot.title('Таймер')\nroot.geometry('150x150')\nroot.resizeble(False, False)\ncount_digit = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()\nseconds = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack(pady=10)\nbtn_start = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "count_digit",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "count_digit = Label(root, text='0', font='Arial 15 bold')\ncount_digit.pack()\nseconds = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack(pady=10)\nbtn_start = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nbtn_stop.pack()\nroot.mainloop()",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "seconds = Entry(root, font='Arial 15 bold', width=7)\nseconds.pack(pady=10)\nbtn_start = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nbtn_stop.pack()\nroot.mainloop()",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "btn_start",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "btn_start = Button(root, text='Старт', font='Arial 15 bold', command=start)\nbtn_start.pack()\nbtn_stop = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nbtn_stop.pack()\nroot.mainloop()",
        "detail": "Таймер",
        "documentation": {}
    },
    {
        "label": "btn_stop",
        "kind": 5,
        "importPath": "Таймер",
        "description": "Таймер",
        "peekOfCode": "btn_stop = Button(root, text='Выключить', font='Arial 15 bold', command=stop)\nbtn_stop.pack()\nroot.mainloop()",
        "detail": "Таймер",
        "documentation": {}
    }
]