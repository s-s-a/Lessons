# Сортировка файлов по типам файлов на Python

from pathlib import Path
import shutil

# Создадим словарь «Карта категорий», где имя_папки -> список расширений (в нижнем регистре):

# Карта категорий: имя_папки -> список расширений (в нижнем регистре)
CATEGORY_MAP = {
"Изображения": [".jpg", ".jpeg", ".png", ".gif", ".webp", ".bmp"],
"Документы": [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".pptx", ".txt", ".md"],
"Архивы": [".zip", ".rar", ".7z", ".tar", ".gz"],
"Видео": [".mp4", ".mov", ".avi", ".mkv"],
"Аудио": [".mp3", ".wav", ".flac", ".ogg"],
}

# Далее создадим функцию normalize_ext(), которая будет возвращать расширение в
# нижнем регистре (или пустую строку).

# У функции будет присутствовать один параметр, а именно:
# ext — расширение файла.

def normalize_ext(ext: str) -> str:
	"""Возвращает расширение в нижнем регистре (или пустую строку)."""
	return ext.lower() if ext else ""

# Также создадим функцию categorize(), которая будет определять имя категории по расширению файла.
# У функции будет присутствовать один параметр, а именно:
# path — путь к файлу.

def categorize(path: Path) -> str | None:
	"""Определяем имя категории по расширению файла."""
	print(path)
	ext = normalize_ext(path.suffix)
	for cat, exts in CATEGORY_MAP.items():
		if ext in exts:
			return cat
	return None # не нашли категорию

# Последняя функция, которую мы создадим, будет называться sort_files().
# Она будет сортировать файлы по категориям.

# У функции будет присутствовать один параметр, а именно:
# root — путь к папке с файлами, которую необходимо отсортировать.
# Внутри функции будет находиться цикл for, который будет проходиться по путям к файлам.
# В цикле первым делом будет идти условие, что если файл не существует, то сработает ключевое слово continue.

def sort_files(root: Path) -> None:
	"""Сортировка файлов по категориям."""
	for item in root.iterdir():
		print(item)
		if not item.is_file():
			continue

# После условия будет определяться категория файла и при помощи ещё одного условия
# произведётся проверка на принадлежность файла к какой-либо категории из доступных.
# Если таковой нет, то сработает ключевое слово continue.

		cat = categorize(item)
		if not cat:
			continue # пропускаем неизвестные типы

		# Далее сформируем полный путь к файлу целевой директории:
		# Формируем путь к целевой директории
		dest_dir = root / cat
		dest_dir.mkdir(exist_ok=True) # Создаем директорию, если её нет

		# Формируем полный путь к файлу в целевой директории
		dest_path = dest_dir / item.name

		# Добавим проверку при помощи условия на существование файла с таким именем,
		# после чего переместим файл в соответствующую папку и выведем сообщение об успешном перемещении:

		# Проверяем, не существует ли уже файл с таким именем
		if dest_path.exists():
			# Если существует, добавляем суффикс _dup
			dest_path = dest_dir / f"{item.stem}_dup{dest_path.suffix}"

			# Перемещаем файл
			shutil.move(str(item), str(dest_path))
			print(f"Перемещено: {item.name} -> {dest_dir.name}/")


# Осталось добавить точку входа:
if __name__ == "__main__":
# Получаем путь к директории от пользователя
	user_input = input("Введите путь к папке для сортировки: ").strip()
	target_dir = Path(user_input)

# Проверяем корректность введенного пути
	if not target_dir.exists() or not target_dir.is_dir():
		print("Ошибка: указанная папка не существует или путь неверен.")
	else:
		sort_files(target_dir) # Запускаем сортировку
		print("Готово: файлы отсортированы.")

